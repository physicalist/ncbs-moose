/**********************************************************************
** This program is part of 'MOOSE', the
** Messaging Object Oriented Simulation Environment,
** also known as GENESIS 3 base code.
**           copyright (C) 2003-2006 Upinder S. Bhalla. and NCBS
** It is made available under the terms of the
** GNU Lesser General Public License version 2.1
** See the file COPYING.LIB for the full notice.
**********************************************************************/

#include "RateTerm.h"
#include "SparseMatrix.h"

class Stoich
{
	public:
		// Stuff here will be copied over to .h unchanged.
	author: 
		Upinder S. Bhalla, April 2006, NCBS
	description:
		Sets up stoichiometry matrix based calculations from a
		wildcard path for the reaction system.
		Knows how to compute derivatives for most common
		things, also knows how to handle special cases where the
		object will have to do its own computation. Generates a
		stoichiometry matrix, which is useful for lots of other
		operations as well.
	field:
		readonly int nMols = 0;
		readonly int nVarMols = 0;
		readonly int nSumTot = 0;
		readonly int nBuffered = 0;
		readonly int nReacs = 0;
		readonly int nEnz = 0;
		readonly int nMmEnz = 0;
		readonly int nExternalRates = 0;

		// Flag: When true, separates out forward and backward
		// reactions so that things like stochasticity can be
		// done cleanly.
		int useOneWayReacs = 0;
	eval_field:
		string getPath() {
			return path_;
		}

		void setPath( string value ) {
			setPathLocal( value );
		}

		readonly int getRateVectorSize() {
			return rates_.size();
		}

	shared:
		// updates derivative values
		// Later figure out how to couple Stoich, Ksolve, the numerical
		// solver, and external rate objects. Stoich does not know
		// what to do with them, but it needs to know some of the
		// conc terms for them because internal rate calculations may
		// depend on these conc terms.

		single integrate( integrateIn, allocateOut, reinitIn );
		single hub( molSizesOut, rateSizesOut, rateTermInfoOut, molConnectionsOut, reacConnectionOut, enzConnectionOut, mmEnzConnectionOut );

	src:
		single allocate( vector< double >* );
		single molSizes( int nMol, int nBuf, int nSumTot );
		single rateSizes( int nReac, int nEnz, int nMmEnz );
		single rateTermInfo( vector< RateTerm* >*rates, int useOneWayReacs );
		single molConnections( vector< double >* S, vector< double >* Sinit, vector< Element *>* elist );
		single reacConnection( int rateTermIndex, Element* reac );
		single enzConnection( int rateTermIndex, Element* reac );
		single mmEnzConnection( int rateTermIndex, Element* reac );

	dest:
		single reinit() {
			S_ = Sinit_;
			allocate( &S_ );
		}

		// We want yprime to be passed in because some integrators
		// want to use multiple intermediate results, so they need
		// to juggle yprime vectors. e.g., Runge-Kutta.
		single integrate( vector< double >* yprime, double dt ) {
			updateRates( yprime, dt );
		}

	private:
		// Stuff here will be copied over unchanged to .h.
		string path_;

		// First, we put in the data structures that hold the model
		// in the stoichiometry matrix form.
		vector< double > S_; 	// Molecular species array.
		vector< double > Sinit_; 	// Initial concs of molecules.
		// Includes all of them: variables, sumtotals and buffered ones.
		vector< double > v_;	// Reaction rates
		vector< RateTerm* > rates_; // Entries for the rate vector,

		vector< int > sumTotals_;
		// This is just a list of indices into S_. The first entry
		// in each set indicates how many indices to sum. The second
		// entry is the summed entry. The remaining entries (enumerated
		// by the first entry) are indices to sum.
		// I could also do this using pointers. Slightly faster but
		// dangerous. Only a few sumTotals are ever used.

		SparseMatrix N_; // stoichiometry matrix.
		// Has to be sparse because already we are dealing with
		// systems with over 1K molecules. Also faster to compute once
		// we get to a reasonable size.


		// Molecules are expected to be sorted at this point 
		// to separate out regular ones, sumtotals, slaves and 
		// buffered cases.
		// We first map back and forth between the MOOSE wildcard path
		// ordering (which is also message ordering for corresponding
		// ksolve object) and the molecule array.
		// Note that this array will have lots of holes, about 3x
		// for the typical network. Acceptable waste.
		vector< int > path2mol_;
		// Then map back to the path from the molecule array.
		vector< int > mol2path_;

		void updateRates( vector< double>* yprime, double dt  );
		void updateV( );
	
	private_wrapper:
		void setPathLocal( const string& value );
		void setupMols(
			vector< Element* >& varMolVec,
			vector< Element* >& bufVec,
			vector< Element* >& sumTotVec);
		void addSumTot( Element* e );
		void addReac( Element* e );
		void addEnz( Element* e );
		void addMmEnz( Element* e );
		void addTab( Element* e );
		void addRate( Element* e );
		void setupReacSystem();
		unsigned int findReactants( Element* e,
			const string& msgFieldName, vector< const double* >& ret );
		unsigned int findProducts( Element* e,
			const string& msgFieldName, vector< const double* >& ret );

		// an array to manage lookup of values.
		map< const Element*, int > molMap_;
		void fillStoich( const double* baseptr, 
			vector< const double* >& sub, 
			vector< const double* >& prd, 
			int reacNum );
		void fillHalfStoich( const double* baseptr, 
			vector< const double* >& reactants, 
			int sign, int reacNum );
		bool checkEnz( Element* e,
			vector< const double* >& sub, 
			vector< const double* >& prd, 
			vector< const double* >& enz, 
			vector< const double* >& cplx,
			double& k1, double& k2, double& k3,
			bool isMM
			);
		static const double EPSILON;
};

////////////////////////////////////////////////////////////////////
// Stuff below here should go verbatim into StoichWrapper.cpp
////////////////////////////////////////////////////////////////////

unsigned int countRates( Element* e, bool useOneWayReacs )
{
	if ( e-> cinfo()->name() == "Reaction" ) {
		if ( useOneWayReacs)
			return 2;
		else
			return 1;
	}
	if ( e->cinfo()->name() == "Enzyme" ) {
		int mode = 0;
		if ( Ftype1< int >::get( e, "mode", mode ) ) {
			if ( mode == 0 ) { // Regular enzyme with explicit complex
				if ( useOneWayReacs )
					return 3;
				else
					return 2;
			} else { // Classical MM enzyme, always single rate
				return 1;
			}
		}
	}
	return 0;
}

// This builds the entire reaction system and stoichiometry matrix
void StoichWrapper::setPathLocal( const string& value )
{
	path_ = value;

	vector< Element* > ret;
	vector< Element* >::iterator i;
	Element::startFind( path_, ret );
	vector< Element* > varMolVec;
	vector< Element* > bufVec;
	vector< Element* > sumTotVec;
	int mode;
	unsigned int numRates = 0;

	const Cinfo* molCinfo = Cinfo::find( "Molecule" );
	for ( i = ret.begin(); i != ret.end(); i++ ) {
		if ( ( *i )->cinfo() == molCinfo ) {
			if ( Ftype1< int >::get( *i, "mode", mode ) ) {
				if ( mode == 0 ) {
					varMolVec.push_back( *i );
				} else if ( mode == 4 ) {
					bufVec.push_back( *i );
				} else {
					sumTotVec.push_back( *i );
				}
			}
		} else {
			numRates += countRates( *i, useOneWayReacs_ );
		}
	}

	// We need all the vectors set to enter things into the S_
	// vector in the right order, and to do size calculations,
	// and to set up the indexing for the molMap.
	// These all have to be done before the reactions come in
	// so that they can be indexed suitably.
	setupMols( varMolVec, bufVec, sumTotVec );
	N_.setSize( varMolVec.size() , numRates );
	v_.resize( numRates, 0.0 );
	rateTermInfoSrc_.send( &rates_, useOneWayReacs_ );
	const Cinfo* reacCinfo = Cinfo::find( "Reaction" );
	const Cinfo* enzCinfo = Cinfo::find( "Enzyme" );
	int nReac = 0;
	int nEnz = 0;
	int nMmEnz = 0;

	// Need to preallocate storage for all messages.
	for ( i = ret.begin(); i != ret.end(); i++ ) {
		if ( ( *i )->cinfo() == reacCinfo ) {
			nReac++;
		} else if ( ( *i )->cinfo() == enzCinfo ) {
			int mode = 0;
			if ( Ftype1< int >::get( *i, "mode", mode ) ) {
				if ( mode == 0 )
					nEnz++;
				else
					nMmEnz++;
			}
		}
	}
	rateSizesSrc_.send( nReac, nEnz, nMmEnz );

	// Here we actually set up the messages
	for ( i = ret.begin(); i != ret.end(); i++ ) {
		if ( ( *i )->cinfo() == reacCinfo ) {
			addReac( *i );
		} else if ( ( *i )->cinfo() == enzCinfo ) {
			int mode = 0;
			if ( Ftype1< int >::get( *i, "mode", mode ) ) {
				if ( mode == 0 )
					addEnz( *i );
				else
					addMmEnz( *i );
			} else {
				cerr << "Error: StoichWrapper::innerSetPath: Error getting mode for enz\n" << (*i)->path() << "\n";
			}
		} else if ( ( *i )->cinfo()->name() == "table" ) {
			addTab( *i );
		} else {
			addRate( *i );
		}
	}

	// cout << N_;

	setupReacSystem();
}


// Fill in the molecules. Other than initial values, we will also
// have to keep track of the element pointers for a while because
// we need to refer back to the elements for setting up the sumtots.
// Also we will later have to use the element pointers for doing the
// reaction configuration.

void StoichWrapper::setupMols(
	vector< Element* >& varMolVec,
	vector< Element* >& bufVec,
	vector< Element* >& sumTotVec
	)
{
	Field nInitField = Cinfo::find( "Molecule" )->field( "nInit" );
	vector< Element* >::iterator i;
	vector< Element* >elist;
	int j = 0;
	double nInit;
	nVarMols_ = varMolVec.size();
	nSumTot_  = sumTotVec.size();
	nBuffered_ = bufVec.size();
	nMols_ = nVarMols_ + nSumTot_ + nBuffered_;

	S_.resize( nMols_ );
	Sinit_.resize( nMols_ );
	for ( i = varMolVec.begin(); i != varMolVec.end(); i++ ) {
		Ftype1< double >::get( *i, nInitField.getFinfo(), nInit );
		Sinit_[j] = nInit;
		molMap_[ *i ] = j++;
		elist.push_back( *i );
	}

	for ( i = sumTotVec.begin(); i != sumTotVec.end(); i++ ) {
		Ftype1< double >::get( *i, nInitField.getFinfo(), nInit );
		Sinit_[j] = nInit;
		molMap_[ *i ] = j++;
		elist.push_back( *i );
	}

	for ( i = bufVec.begin(); i != bufVec.end(); i++ ) {
		Ftype1< double >::get( *i, nInitField.getFinfo(), nInit );
		Sinit_[j] = nInit;
		molMap_[ *i ] = j++;
		elist.push_back( *i );
	}

	for ( i = sumTotVec.begin(); i != sumTotVec.end(); i++ ) {
		addSumTot( *i );
	}
	molSizesSrc_.send( nVarMols_, nBuffered_, nSumTot_ );
	molConnectionsSrc_.send( &S_, &Sinit_, &elist );
}

void StoichWrapper::addSumTot( Element* e )
{
	// Here we traverse the list of messages to find the source
	// element, and fill up the data struct/array for the sumtot
	// calculations
	vector< Field > srclist;
	vector< Field >::iterator i;
	Field srcField = e->field( "sumTotalIn" );
	srcField.dest( srclist );

	for (i = srclist.begin() ; i != srclist.end(); i++ ) {
		
	}
}

unsigned int StoichWrapper::findReactants( 
	Element* e, const string& msgFieldName, 
	vector< const double* >& ret )
{
	vector< Field > srclist;
	vector< Field >::iterator i;
	ret.resize( 0 );
	map< const Element*, int >::iterator j;
	Field srcField = e->field( msgFieldName );
	srcField.src( srclist );

	for (i = srclist.begin() ; i != srclist.end(); i++ ) {
		Element* src = i->getElement();
		j = molMap_.find( src );
		if ( j != molMap_.end() ) {
			ret.push_back( & S_[ j->second ] );
		} else {
			cerr << "Error: Unable to locate " << src->path() <<
				" as reactant for " << e->path();
			return 0;
		}
	}
	return ret.size();
}

unsigned int StoichWrapper::findProducts( 
	Element* e, const string& msgFieldName, 
	vector< const double* >& ret )
{
	vector< Field > prdlist;
	vector< Field >::iterator i;
	ret.resize( 0 );
	map< const Element*, int >::iterator j;
	Field prdField = e->field( msgFieldName );
	prdField.dest( prdlist );

	for (i = prdlist.begin() ; i != prdlist.end(); i++ ) {
		Element* prd = i->getElement();
		j = molMap_.find( prd );
		if ( j != molMap_.end() ) {
			ret.push_back( & S_[ j->second ] );
		} else {
			cerr << "Error: Unable to locate " << prd->path() <<
				" as reactant for " << e->path();
			return 0;
		}
	}
	return ret.size();
}

class ZeroOrder* makeHalfReaction( double k, vector< const double*> v )
{
	class ZeroOrder* ret = 0;
	switch ( v.size() ) {
		case 0:
			ret = new ZeroOrder( k );
			break;
		case 1:
			ret = new FirstOrder( k, v[0] );
			break;
		case 2:
			ret = new SecondOrder( k, v[0], v[1] );
			break;
		default:
			ret = new NOrder( k, v );
			break;
	}
	return ret;
}

// Assigns stoichiometry terms for half a reaction. Always have to
// add the products separately for this reacNum.
void StoichWrapper::fillHalfStoich( const double* baseptr, 
	vector< const double* >& reactant, int sign, int reacNum )
{
	vector< const double* >::iterator i;
	const double* lastptr = 0;
	int n = 1;

	sort( reactant.begin(), reactant.end() );
	lastptr = reactant.front();
	for (i = reactant.begin() + 1; i != reactant.end(); i++) {
		if ( *i == lastptr ) {
			n++;
		}
		if ( *i != lastptr ) {
			N_.set( lastptr - baseptr, reacNum, sign * n );
			n = 1;
		}
		lastptr = *i;
	}
	N_.set( lastptr - baseptr, reacNum, sign * n );
}

void StoichWrapper::fillStoich( 
	const double* baseptr, 
	vector< const double* >& sub, vector< const double* >& prd, 
	int reacNum )
{
	fillHalfStoich( baseptr, sub, 1 , reacNum );
	fillHalfStoich( baseptr, prd, -1 , reacNum );
}

// This sets up rate terms.
// Also want it to set up Stoichiometry matrix. 
// Entry for a given substrate is at i = substrate index, and 
// j = reac #

void StoichWrapper::addReac( Element* e )
{
	vector< const double* > sub;
	vector< const double* > prd;
	class ZeroOrder* freac = 0;
	class ZeroOrder* breac = 0;
	double kf;
	double kb;
	if ( Ftype1< double >::get( e, "kf", kf ) &&
		 Ftype1< double >::get( e, "kb", kb )
	) {
		if ( findReactants( e, "subIn", sub ) > 0 ) {
			freac = makeHalfReaction( kf, sub );
		}
		if ( findReactants( e, "prdIn", prd ) > 0 ) {
			breac = makeHalfReaction( kb, prd );
		}

		// Here we call the func for constructing the reac.
		// Issue is that we use different kinds of entries depending
		// on which terms are nonzero.
		reacConnectionSrc_.send( rates_.size(), e );
		if ( useOneWayReacs_ ) {
			if ( freac ) {
				fillStoich( &S_[0], sub, prd, rates_.size() );
				rates_.push_back( freac );
			}
			if ( breac ) {
				fillStoich( &S_[0], prd, sub, rates_.size() );
				rates_.push_back( breac );
			}
		} else { // combine into a single rate term.
			fillStoich( &S_[0], sub, prd, rates_.size() );
			if ( freac && breac ) {
				rates_.push_back( 
					new BidirectionalReaction( freac, breac ) );
			} else if ( freac )  {
				rates_.push_back( freac );
			} else if ( breac ) {
				rates_.push_back( breac );
			}
		}
		++nReacs_;
	}
}

bool StoichWrapper::checkEnz( Element* e,
		vector< const double* >& sub,
		vector< const double* >& prd,
		vector< const double* >& enz,
		vector< const double* >& cplx,
		double& k1, double& k2, double& k3,
		bool isMM
	)
{
	if ( !( 
		Ftype1< double >::get( e, "k1", k1 ) &&
		Ftype1< double >::get( e, "k2", k2 ) &&
		Ftype1< double >::get( e, "k3", k3 )
		)
	) {
		cerr << "Error: StoichWrapper:: Failed to find rates\n";
		return 0;
	}
	if ( findReactants( e, "subIn", sub ) < 1 ) {
		cerr << "Error: StoichWrapper::addEnz: Failed to find subs\n";
		return 0;
	}
	if ( findReactants( e, "enzIn", enz ) != 1 ) {
		cerr << "Error: StoichWrapper::addEnz: Failed to find enzyme\n";
		return 0;
	}
	if ( !isMM ) {
		if ( findReactants( e, "cplxIn", cplx ) != 1 ) {  
			cerr << "Error: StoichWrapper::addEnz: Failed to find cplx\n";
			return 0;
		}
	}
	if ( findProducts( e, "prdOut", prd ) < 1 ) {
		cerr << "Error: StoichWrapper::addEnz: Failed to find prds\n";
		return 0;
	}
	return 1;
}

void StoichWrapper::addEnz( Element* e )
{
	vector< const double* > sub;
	vector< const double* > prd;
	vector< const double* > enz;
	vector< const double* > cplx;
	class ZeroOrder* freac = 0;
	class ZeroOrder* breac = 0;
	class ZeroOrder* catreac = 0;
	double k1;
	double k2;
	double k3;
	if ( checkEnz( e, sub, prd, enz, cplx, k1, k2, k3, 0 ) ) {
		sub.push_back( enz[ 0 ] );
		prd.push_back( enz[ 0 ] );
		freac = makeHalfReaction( k1, sub );
		breac = makeHalfReaction( k2, cplx );
		catreac = makeHalfReaction( k3, cplx );
		enzConnectionSrc_.send( rates_.size(), e );
		if ( useOneWayReacs_ ) {
			fillStoich( &S_[0], sub, cplx, rates_.size() );
			rates_.push_back( freac );
			fillStoich( &S_[0], cplx, sub, rates_.size() );
			rates_.push_back( breac );
			fillStoich( &S_[0], cplx, prd, rates_.size() );
			rates_.push_back( catreac );
		} else { // combine into a a single rate term.
			fillStoich( &S_[0], sub, cplx, rates_.size() );
			rates_.push_back( 
				new BidirectionalReaction( freac, breac ) );
			fillStoich( &S_[0], cplx, prd, rates_.size() );
			rates_.push_back( catreac );
		}
		nEnz_++;
	}
}

void StoichWrapper::addMmEnz( Element* e )
{
	vector< const double* > sub;
	vector< const double* > prd;
	vector< const double* > enz;
	vector< const double* > cplx;
	class ZeroOrder* sublist = 0;
	double k1;
	double k2;
	double k3;
	if ( checkEnz( e, sub, prd, enz, cplx, k1, k2, k3, 1 ) ) {
		// This is unidirectional, so we do not distinguish between
		// the options on the useOneWayReacs flag.
		double Km = 1.0;
		if ( k1 > EPSILON ) {
			Km = ( k2 + k3 ) / k1;
		} else {
			cerr << "Error: StoichWrapper::addMMEnz: zero k1\n";
			return;
		}
		fillStoich( &S_[0], sub, prd, rates_.size() );

		sublist = makeHalfReaction( 1.0, sub );
		mmEnzConnectionSrc_.send( rates_.size(), e );
		rates_.push_back( new MMEnzyme( Km, k3, enz[0], sublist ) );
		nMmEnz_++;
	}
}

void StoichWrapper::addTab( Element* e )
{
}

void StoichWrapper::addRate( Element* e )
{
}

void StoichWrapper::setupReacSystem()
{
}
