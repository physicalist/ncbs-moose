/**********************************************************************
** This program is part of 'MOOSE', the
** Messaging Object Oriented Simulation Environment,
** also known as GENESIS 3 base code.
**           copyright (C) 2003-2005 Upinder S. Bhalla. and NCBS
** It is made available under the terms of the
** GNU General Public License version 2
** See the file COPYING.LIB for the full notice.
**********************************************************************/
#ifndef _CONN_H
#define _CONN_H

#include <vector>
#include "ElementFwd.h"
#include "FinfoFwd.h"
#include "RecvFunc.h"
#include "dummyFunc0.h"

/////////////////////////////////////////////////////////////////////
// 
// The Conn family of classes handle connections between objects.
// They are meant to be used symmetrically, that is, both the
// source and destination sides look the same and in some cases
// they may be interchangeable. The proliferation of subtypes is
// to optimize for 
// UniConn: single connections
// PlainMultiConn: multiple connections, typically destinations.
// MultiConn: Source-side multiple connections with multiple possible
//   functions. Each function reaches a separate set of targets.
// RelayConn: Derived from PlainMultiConn. Other than a few hard-coded
//   messages which have precompiled conns for speed, all others use
//   RelayConns which are created on the fly.
// SynConn: Synaptic connections: a single target and a templated value
//
/////////////////////////////////////////////////////////////////////

class Element
{
		public:
				unsigned int connIndex( const Conn* c ) const {
					return c - c_.begin();
				}
				Conn* connPtr( unsigned int i ) const {
					return &c_[ i ];
				}
				
		private:
				vector< Conn > conn_;
}

// Send is from a MsgSrc, and invokes a specific func.
//
class MsgSrc
{
		public:
			Element* target( unsigned long index );

		private:
			RecvFunc rfunc_;
}

class PlainMultiMsgSrc< T >
{
	public:
		send( T val ) {
			for_each( conn.begin() + begin, conn.begin() + end, rf_( c, val )
		}
		// Sends to relative index
		sendTo( T val, unsigned int i ) {
			rf_( conn_[i + begin], val ); 
		}
}

// Overhead: Vector stuff, 2 ints for each PlainMultiMsgSrc.
// Or, Vector stuff, 2 ints for each chunk of data.
// Or, Vector stuff, 1 + 1 int for each chunk of data assuming contigs.
class MultiMsgSrc
{
		public:
		private:
			vector< PlainMultiMsgSrc >;
}

// The MsgSrc has to be a named field because we want to use it to
// send stuff quickly from within funcs of the class.
// 
// Should we have a 1:1 vector of recvFuncs for each Conn?
// - Avoid juggling in Send and SendTo. Save a little time in latter,
//    probably lose a little time in Send.
// - Extra pointer for each Conn.
// - Eliminate MsgRange class.

class MsgSrc< T >
{
	public:
		static void rangeSend( Element* e, 
				vector< MsgRange >::iterator i, val ) {
			for( j = e->connIter( i->begin() ); j != e->connIter( i->end() ); j++ )
				static_cast< void( * )(Conn&, T) >( j->recvFunc() )
						( *j, val );
		}
		// Here we imagine that the Element has a vector of MsgRanges
		// which we need to go through.
		send( Element* e, T val ) {
			for( i = e->src_.begin() + begin_; 
							i != e->src_.begin() + end_; ++i )
				rangeSend( i, val );
		}

		// Note that this dest is relative to the first entry.
		sendTo( Element* e, unsigned int dest, T val ) {
		}
	private:
		unsigned int begin_;	// These indices refer to the MsgRange
		unsigned int end_;		// vector, which has the actual funcs.
		// Alternatively, I could have put in a specific MsgRange
		// vector right here:
		vector< MsgRange > mr;
		// Problem with this approach is that if it is not used it
		// is a little expensive?
		// For example, a single msg src would be dumb to do this.
}

class SingleMsgSrc< T >
{
	public:
		void send( Element* e, T val ) {
			if ( end_ == begin_ )
				return;
			static_cast< void( * )(Conn&, T) >( recvFunc )( 
				e->connPtr( begin_ ), val );
				
		}
		void sendTo( Element* e, unsigned int dest, T val ) {
			if ( dest == 0 )
				send( e, val );
		}
}

// Let the MsgSrc deal with the type stuff. Here we keep track of 
// which func calls which conns.
class MsgRange
{
	public:
	private:
		RecvFunc rf_;
		unsigned int begin_; // eliminatable: end_ of last MsgRange
		unsigned int end_;
}
//
// Dests: Nothing really, except that to traverse message we need
// to have not just a target (which we get from the Conn), but
// also knowledge of where this dest may activate another message.

// Suppose addmsg with a dest somewhere in the middle.
// 1. Find the affected Conn. Need to march through dest and Src
// arrays till we find it. 
// 2. increment all succeeding dest and src values to reflect new conn
// 3. Insert a Conn. This will resize array, no problem. 
// 4. March through shifted Conn array, updating indices in targets.
// 		Could be lots. This is an issue.
//
// Can we have only one type of MsgSrc. Could shift template out
// of MsgSrc. How would it help? 
// 	- Dynamically allocatable src? Not good, slow to set off.
// 	- Specialize Src only with respect to how many and in what
// 	pattern of recfuncs? Good. How to make extensions?
//
// 	Need a way to lookup the MsgSrc from the absolute index, for 
// 	traveral. In the old Moose we march through the Finfo list.
//
//	Issue: How to handle shared messages. 
//	Use same approach for MsgSrcs as we did earlier: Have a vector
//	of RecvFuncs, and use the appropriate indexing to refer to another
//	Element-wide vector of ConnRanges (as opposed to SrcRanges). The
//	justification for having this Element-wide is because multiple
//	MsgSrcs may refer to the same range.
//	A remaining issue is that of Dest ranges. In principle each dest
//	only needs one range, but because of handling shared messages the
//	dest range may be fractured for the outgoing messages.
//	This whole section could be simplified if we had RecvFuncs for
//	each Conn. Moderately expensive. 
//
//
==============================================================================
Here we try out a variant with Src and Dest ranges on vectors on the 
Element. Advantage: extendability. Disadvantage: MsgSrcs are now
delocalized.

class Element {
	private:
		string name_;
		vector< Conn > conn_;
		vector< SrcRange > srcRange_;
		vector< DestRange > destRange_;
		vector< const Finfo* >* finfo_;
};

// Global/templated functions for send.
send0( MsgSrc& src, Element* e )
{
	vector< SrcRange >::iterator i;
	for ( i = e->srcRangeIterator( src.begin() );
			e->srcRangeIterator( src.end() ); ++i ) {
		for_each( e->connIterator( i->begin() ),
			e->connIterator( i->end() ), i->func() );
	}
}

// Global/templated functions for send.
send1<T>( MsgSrc& src, Element* e, T val )
{
	vector< SrcRange >::iterator i;
	for ( i = e->srcRangeIterator( src.begin() );
			e->srcRangeIterator( src.end() ); ++i ) {
		vector< Conn >::iterator j;
		void( * )( Conn&, T ) rf = 
			static_cast< void (*)( Conn&, T ) >( i->func() );
		for ( j = e->connIterator( i->begin() );
			e->connIterator( i->end() ); ++j )
				rf( *j, val );
	}
}

// Global/templated functions for send. The target is relative to this
// specific MsgSrc.
sendTo1<T>( MsgSrc& src, Element* e, unsigned int target, T val )
{
	RecvFunc rf = src->func( e, target );
	if ( rf ) {
		static_cast< void (*)( Conn&, T ) >( rf ) 
			( *e->connIterator( src->absoluteIndex( e, target ) ), val);
	}

	vector< SrcRange >::iterator i;
	if ( src.good() ) {
		target += e->srcRangeIterator( src.begin() )->begin();
		for ( i = e->srcRangeIterator( src.begin() );
				e->srcRangeIterator( src.end() ); ++i ) {
			if ( i->end() > target )
				static_cast< void (*)( Conn&, T ) >( i->func() ) 
					( e->connIterator( target ), val );
		}
	}
}

// The MsgSrc just refers to ranges for SrcRange.
class MsgSrc {
	public:
		// Look up function by relative index counting from start of
		// conns of this Src.
		RecvFunc func( Element* e, unsigned int i ) {
		}
		unsigned int begin_; //If we maintain contiguity and order,
		// the begin_ can be eliminated.
		// We have to maintain contiguity here because of the rules
		// of conn ordering. For example, it must be indexable within
		// each src.
		unsigned int end_;
};

class SrcRange
{
	public:
		RecvFunc func() const {
			return rf_;
		}

	private:
		RecvFunc rf_;
		unsigned int begin_; // If we maintain contiguity and order,
		// the begin_ can be eliminated. 
		unsigned int end_;
		
}

=======================================================================
// Here there is no independent array of SrcRanges, they are just on
// the msgsrc.
Advantage: more localized and OO. Disadvantage: A bit of extra storage
Issue: How to handle shared messages. The SrcRange becomes 
redundant. But if we store sequentially the cost is only one int per
entry. But there are issues with ensuring all members remain aligned.

class Element {
	private:
		string name_;
		vector< Conn > conn_;
		vector< DestRange > destRange_;
		vector< const Finfo* >* finfo_;
};

// Global/templated functions for send. Not much difference with the
// variant above which had an independent array of SrcRanges.
send1<T>( MsgSrc& src, Element* e, T val )
{
	vector< SrcRange >::iterator i;
	for ( i = src.begin(); i != src.end(); ++i ) {
		vector< Conn >::iterator j;
		void( * )( Conn&, T ) rf = 
			static_cast< void (*)( Conn&, T ) >( i->func() );
		for ( j = e->connIterator( i->begin() );
			e->connIterator( i->end() ); ++j )
				rf( *j, val );
	}
}

// This is somewhat cleaner than the previous variant.
sendTo1<T>( MsgSrc& src, Element* e, unsigned int target, T val )
{
	target = ab
	RecvFunc rf = src->func( target );
	
	if ( rf ) {
		static_cast< void (*)( Conn&, T ) >( rf ) 
			( *e->connIterator( src->absoluteIndex( target ) ), val);
	}


class MsgSrc {
	public:
		bool funcFromAbsoluteIndex( unsigned int i );
		bool funcFromRelativeIndex( unsigned int i );
		unsigned int start() {
			return sr_[0].begin();
		}
	private:
		vector< SrcRange > sr_;
}

=======================================================================
// Here we have two globals: the conn_ vector, and the range_ vector.
// The conn_ vector handles connections
// The range_ vector notes groups in the connections, corresponding 
// roughly to individual MsgSrcs and MsgDests. The MsgSrcs
// complicate things a bit because they may be subgrouped because
// targets may have different RecvFuncs.
// range_ must be global because of shared messages.
// This also means that MsgDests as well as MsgSrcs have to be able
// to handle multiple ranges for their targets.
// The alternative would have been to manage multiple collections of
// ranges for each of the participants of a shared msg. Both untidy
// and memory costly.
//
Advantage: Uniform handling of ranges, including for shared messages.
Disadvantage: Each Dest must also be able to deal with a range of
ranges, because of shared messages possibly using multiple recvfuncs.
Issue: 

class Element {
	// Looks up the starting Conn for the range specified by i.
	vector< Conn >::iterator connBegin( unsigned int i );

	// Looks up the ending Conn for the range specified by i.
	vector< Conn >::iterator connEnd( unsigned int i );

	// Looks up the specific indexed conn
	vector< Conn >::iterator connLookup( unsigned int i );
	private:
		string name_;
		vector< Conn > conn_;
		vector< unsigned int > range_;
		// This is just ints, because we record sequentially the
		// end of each range. The start is just the end of the previous
};

// Global/templated functions for send.
send1<T>( MsgSrc& src, Element* e, T val )
{
	vector< pair< unsigned int, RecvFunc > >::iterator i;
	for ( i = src.begin(); i != src.end(); i++ ) {
		void( * )( Conn&, T ) rf = 
			static_cast< void (*)( Conn&, T ) >( i->second );
		vector< Conn >::iterator j;
		for ( j = e->connBegin( i->first ); j != e->connEnd( i->first );
						++j )
			rf( *j, val );
	}
}

sendTo1<T>( MsgSrc& src, Element* e, unsigned int target, T val )
{
	pair< unsigned int, RecvFunc >* rf = 
			src.lookupRangeFuncRelative( e, target );
	if ( rf ) {
		static_cast< void (*)( Conn&, T ) >( rf->second ) 
			( *e->connLookup( src->absoluteIndex( target ) ), val);
	}
}

// This is particularly gruesome if we know we only want to send
// info to one place. 
class MsgSrc {
	public:
		vector< pair< unsigned int, RecvFunc > >::iterator begin() {
			return rangeFunc_.begin();
		}
		vector< pair< unsigned int, RecvFunc > >::iterator end() {
			return rangeFunc_.end();
		}

		unsigned int absoluteIndex( 
			const Element* e, unsigned int target )
		{
			if ( rangeFunc_.size() == 0 )
				return 0;
			return target + e->range( rangeFunc_[0].second );
		}

		// Looks up the target rangeFunc pair, using a relative index
		// for target.
		pair< unsigned int, RecvFunc >*
			lookupRangeFuncRelative( Element* e, unsigned int target ){
			vector< pair< unsigned int, RecvFunc > >::iterator i;
			if ( rangeFunc_.size() == 0 )
				return 0;
			target += e->range( rangeFunc_[0].second );
			for ( i = begin(); i != end(); i++ ) {
				if ( e->range( i->second ) > target )
					return i;
			}
			return 0;
		}

		unsigned int absoluteIndex()
	private:
		vector< pair< unsigned int, RecvFunc > > rangeFunc_;
};

class MsgDest {
	private:
		unsigned int rangeBegin_;
		unsigned int rangeEnd_;
}

=======================================================================
// This is based on the previous one, except that the MsgSrcs and
// Dests are in little arrays of their own on the Element*,
// and the Send functions look up these arrays. The idea is to
// allow virtual MsgSrc classes optimized for the number and type of
// connections, and swap in and out in the arrays as needed. By
// default all MsgSrcs are set up with the same pointer to a dummy.
// 
// Other goal is to make it trivial to add other messages.
// 
Advantages: 
- Uniform handling of ranges, including for shared messages. (see above)
- Flexibility, perchance optimization in Msg subtypes
- Scope for extended fields and relays to use standard forms.
- Uniform Element class?
- Easier to talk to SWIG.
Disadvantages: 
- Each Dest must also be able to deal with a range of ranges (see above)
- More complexity in Msg subtypes.
- Extra indirection when executing Msgs (minor)
Pending:
- Adds and drops, especially where they mess up the existing order of
	conns, range and src.
- Traversals
- Array things. I think it is doable, but need to implement.

// Could do a lot of subclassing here, 
// replacing the Element* subtype as needed. But need a clear interface
// for the base type.
//
// In order to handle array fields, using current Conn data structures,
// we can have an Element subclass
// that wraps the original class, and provides extra info for indexing.
// We could also use this for relays.
// But how do we get this from the Finfo?
//
// Last thing for the night: How can we set this up without a
// preprocessor? Only way to know is to implement a class with it
// by hand and then see what can be templated out.
class Element {
	// Looks up the starting Conn for the range specified by i.
	vector< Conn >::iterator connBegin( unsigned int i );

	// Looks up the ending Conn for the range specified by i.
	vector< Conn >::iterator connEnd( unsigned int i );

	// Looks up the specific indexed conn
	vector< Conn >::iterator connLookup( unsigned int i );
	private:
		string name_;
		vector< Conn > conn_;
		vector< unsigned int > range_;
		vector< MsgSrc* > src_;
		vector< MsgDest* > dest_;
		vector< Finfo* >* finfo_;
		cinfo* cinfo_;
		void* data;
};

// Global/templated functions for send. Could typedef this (using the
// typedefed index for the src) for the object code.
send1<T>( short srcIndex, Element* e, T val )
{
	vector< pair< unsigned int, RecvFunc > >::iterator i;
	MsgSrc* src = e->src_[srcIndex];
	for ( i = src.begin(); i != src.end(); i++ ) {
		void( * )( Conn&, T ) rf = 
			static_cast< void (*)( Conn&, T ) >( i->second );
		vector< Conn >::iterator j;
		for ( j = e->connBegin( i->first ); j != e->connEnd( i->first );
						++j )
			rf( *j, val );
	}
}

sendTo1<T>( short srcIndex, Element* e, unsigned int target, T val )
{
	MsgSrc* src = e->src_[srcIndex];
	pair< unsigned int, RecvFunc >* rf = 
			src.lookupRangeFuncRelative( e, target );
	if ( rf ) {
		static_cast< void (*)( Conn&, T ) >( rf->second ) 
			( *e->connLookup( src->absoluteIndex( target ) ), val);
	}
}

// Here we could define a range of MsgSrcs with the appropriate base
// class
class MsgSrc {
	public:
		virtual vector< pair< unsigned int, RecvFunc > >::iterator begin() {
		vector< pair< unsigned int, RecvFunc > >::iterator end();

		virual unsigned int absoluteIndex( 
			const Element* e, unsigned int target ) = 0;

		// Looks up the target rangeFunc pair, using a relative index
		// for target.
		virtual pair< unsigned int, RecvFunc >*
			lookupRangeFuncRelative( Element* e, unsigned int target )
			= 0;
};

// Similar, except that this is so boring I don't know if we need
// to set up a class heirarchy at all here.
class MsgDest {
	private:
		unsigned int rangeBegin_;
		unsigned int rangeEnd_;
}

=======================================================================
class Conn
{
		public:
			Conn( Element* e, unsigned int target )
					: e_( e ), target_( target )
			{;}
			Element* parent() const {
					return e_->connPtr( target_ )->targetElement();
			}
			Conn* targetConn() {
				return e->connPtr( target_ );
			}
			Element* targetElement() const {
					return e_;
			}
			unsigned int targetIndex() const {
					return target_;
			}
			unsigned int myIndex( const Element* e ) const {
					return e->connIndex( this );
			}
		private:
				Element* e_;	// This is the target element.
				unsigned int target_;	
					// This is the index of the target conn
}

class Conn
{
	public:
		virtual ~Conn()
		{
			;
		}
		virtual Conn* target( unsigned long index ) const = 0;
		virtual unsigned long nTargets() const = 0;
		virtual void listTargets( std::vector< Conn* >& ) const = 0;
		virtual unsigned long nSlots() const = 0;

		virtual Element* parent() const = 0;	// Ptr to parent Element
		virtual bool connect( Conn* target, 
			unsigned long sourceSlot, unsigned long targetSlot = 0);

		// Returns index of disconnected conn, MAX = ~0 if it fails.
		unsigned long disconnect( Conn* target );

		virtual void disconnectAll() = 0;

		// Return index of target if found. Otherwise return MAX = ~0
		virtual unsigned long find( const Conn* target) const = 0;
		virtual bool innerConnect(Conn* target, unsigned long slot = 0)
			= 0;

		// Later need to make this required for all derived classes.
		virtual void resize( std::vector< unsigned long >& segments ) {
				;
		}
		// Perhaps we will hold off on this.
		// Later need to make this required for all derived classes.
		/* 
		virtual void innerConnectVec( vector< Conn* >& list,
			vector< unsigned long > segments )
		{
				;
		}
		*/
		virtual void innerDisconnect(unsigned long index) = 0;
		
		// Brute force cleans up connections without communicating
		// with target.
		virtual void innerDisconnectAll() = 0;

		static const unsigned long MAX;
		virtual Conn* respondToConnect(
						Conn* target, unsigned long slot ) = 0;
	protected:
		virtual bool canConnect(Conn* target) const = 0;

	private:
};

// The UniConnBase manages the target formation and removal.
// Note that this is also an abstract base class as it doesn't have a
// way to access parent()
class UniConnBase: public Conn
{
	public:
		UniConnBase() {
			target_ = 0;
		}

		~UniConnBase()
		{
			if ( target_ )
				disconnect( target_ );
		}

		Conn* target(unsigned long index) const {
			if (index == 0)
				return target_;
			return 0;
		}

		// Unchecked version of above.
		Conn* rawTarget() const {
			return target_;
		}

		unsigned long nTargets() const {
			return (target_ != 0);
		}

		unsigned long nSlots() const {
			return (target_ != 0);
		}

		void listTargets( std::vector< Conn* >& list ) const {
			if ( target_ ) {
				list.push_back( target_ );
			}
		}

		unsigned long find( const Conn* target ) const {
			if (target_ && (target_ == target))
				return 0;
			return ~1;
		}

		bool innerConnect( Conn* target, unsigned long slot = 0 ) {
			target_ = target;
			return 1;
		}

		void disconnectAll() {
			disconnect( target_ );
		}

		void innerDisconnect(unsigned long i) {
			target_ = 0;
		}

		void innerDisconnectAll() {
			target_ = 0;
		}
		Conn* respondToConnect(Conn* target, unsigned long slot ) {
			if ( canConnect( target ) )
				return this;
			return 0;
		}

	protected:
		bool canConnect(Conn* target) const {
			return (target && (target_ == 0));
		}

	private:
		Conn* target_;
};


// The UniConn has a single target. It uses a template to
// look up the parent ptr, so that it uses minimal space.
// The function F returns the Element ptr when passed the ptr to the
// Conn.
template< Element* (*F)(const Conn *)>class UniConn: public UniConnBase
{
	public:
		Element* parent() const {
			return F(this);
		}
};

class UniConn2: public UniConnBase
{
	public:
		UniConn2( Element* parent )
			: parent_( parent )
		{
			;
		}

		Element* parent() const {
			return parent_;
		}

	private:
		Element* parent_;
};


// The SynConn has a single target, and stores per-synapse info T.
// We may need to create a special allocator for this as there may
// be huge numbers of them, especially for T = float, float and double.
template< class T >class SynConn: public UniConnBase
{
	public:
		SynConn( Element* parent )
			: parent_( parent )
		{
			;
		}

		T value_;

		Element* parent() const {
			return parent_;
		}

	private:
		Element* parent_;
};

// The PlainMultiConn has any number of targets. It stores its parent
// ptr. It is used for msgdests and does not worry about handling
// recvfuncs to correspond to each conn. So it is just a simple
// vector of Conns.
class PlainMultiConn: public Conn
{
	public:
		PlainMultiConn(Element* e)
			: parent_(e)
		{
			;
		}

		~PlainMultiConn();

		Conn* target(unsigned long index) const {
			if (index < target_.size())
				return target_[index];
			return 0;
		}

		unsigned long nTargets() const {
			return static_cast< unsigned long >( target_.size() );
		}

		unsigned long nSlots() const {
			return (target_.size() > 0);
		}

		void listTargets( std::vector< Conn* >& list ) const {
			list.insert( list.end(), target_.begin(), target_.end() );
		}

		Element* parent() const {
			return parent_;
		}

		std::vector< Conn* >::const_iterator begin() const {
			return target_.begin();
		}

		std::vector< Conn* >::const_iterator end() const {
			return target_.end();
		}

		unsigned long find( const Conn* other ) const;

		bool innerConnect( Conn* target, unsigned long slot = 0 ) {
			target_.push_back(target);
			return 1;
		}

		void innerDisconnect(unsigned long index) {
			if ( index < target_.size() )
				target_.erase( target_.begin() + index );
		}

		void disconnectAll();

		void innerDisconnectAll() {
			target_.resize( 0 );
		}
		Conn* respondToConnect(Conn* target, unsigned long slot ) {
			if ( canConnect( target ) )
				return this;
			return 0;
		}

	protected:
		bool canConnect(Conn* target) const {
			return ( target != 0 );
		}

	private:
		std::vector< Conn* > target_;
		Element* parent_;
};

// The MultiConn has any number of targets. It is a base class
// for a couple of variants. The base class stores its parent ptr only.
// In one variant these
// are PlainMultiConns, in another they are SolverConnManagers.
class BaseMultiConn: public Conn
{
	public:
		BaseMultiConn( Element* e )
			: parent_(e)
		{
			;
		}

		virtual ~BaseMultiConn();

		Element* parent() const {
			return parent_;
		}

		virtual std::vector< Conn* >::const_iterator begin( unsigned long i ) const = 0;
		virtual unsigned long index( unsigned long msgno ) = 0;

		virtual std::vector< Conn* >::const_iterator end( unsigned long i ) const = 0;

		Conn* respondToConnect(Conn* target, unsigned long slot ) {
			if ( canConnect( target ) )
				return this;
			return 0;
		}
	protected:
		// Always true as long as input is good.
		bool canConnect( Conn* target ) const {
			return ( target != 0 );
		}

	private:
		Element* parent_;
};

// The MultiConn has any number of targets.
// Because the Conn may be accessed by several recvfuncs, it stores
// the targets in a list of distinct vectors.
// This is the original MultiConn
class MultiConn: public BaseMultiConn
{
	public:
		MultiConn( Element* e )
			: BaseMultiConn(e)
		{
			;
		}

		~MultiConn();

		Conn* target(unsigned long index) const;
		unsigned long nTargets() const;

		unsigned long nSlots() const {
			return connVecs_.size();
		}
		void listTargets( std::vector< Conn* >& list ) const ;

		std::vector< Conn* >::const_iterator begin( unsigned long i ) const {
			return connVecs_[ i ]->begin();
		}

		std::vector< Conn* >::const_iterator end( unsigned long i ) const {
			return connVecs_[ i ]->end();
		}

		unsigned long find( const Conn* target ) const;

		// Returns the index of the ConnVec corresponding to specified
		// message number.
		unsigned long index( unsigned long msgno );

		bool innerConnect( Conn* target, unsigned long slot = 0 );

		void innerDisconnect(unsigned long index);

		void disconnectAll();
		void innerDisconnectAll();

	private:
		std::vector< PlainMultiConn* > connVecs_;
};


// Used to send messages along connections that are not precompiled.
class RelayConn: public PlainMultiConn
{
	public:
		RelayConn( Element* e, Finfo* f )
			: PlainMultiConn( e ), f_( f )
		{
			;
		}

		// Inherits the delete func from its base.

		Finfo* finfo() const {
			return f_;
		}

		// Informs the parent finfo if it is empty.
		void innerDisconnect(unsigned long index);

	protected:

	private:
		Finfo* f_;
};

class ReturnConn: public UniConn2
{
	public:
		ReturnConn( Element* parent )
			: UniConn2( parent ), rfunc_( 0 )
		{
			;
		}

		bool addRecvFunc( RecvFunc rfunc ) {
			if ( rfunc_ != 0 )
				return 0;
			rfunc_ = rfunc;
			return 1;
		}

		RecvFunc recvFunc() const {
			return rfunc_;
		}

	private:
		RecvFunc rfunc_;
};
// The MultiReturnConn is a vector of simple conns of the 
// ReturnConn type. Each of these stores the target, the parent, and
// a recvFunc.
// Needed when multiple incoming messages each expect a return value
// for the specific function, for example when doing interpolation
// lookups.  A trifle wasteful in memory, but here speed is critical.
class MultiReturnConn: public Conn
{
	public:
		MultiReturnConn(Element* e)
			: parent_(e)
		{
			;
		}

		~MultiReturnConn();

		Conn* target(unsigned long index) const {
			if (index < vec_.size())
				return vec_[index]->rawTarget();
			return 0;
		}

		unsigned long nTargets() const {
			return static_cast< unsigned long >( vec_.size() );
		}

		unsigned long nSlots() const {
			return static_cast< unsigned long >( vec_.size() );
		}

		RecvFunc targetFunc( unsigned long index ) const {
			if ( index < vec_.size() )
				return vec_[ index ]->recvFunc() ;
			return &dummyFunc0;
		}

		unsigned long indexOfMatchingFunc( RecvFunc rf ) const;
		unsigned long matchRemoteFunc( RecvFunc rf ) const;
		void addRecvFunc( RecvFunc rf );

		void listTargets( std::vector< Conn* >& list ) const;

		Element* parent() const {
			return parent_;
		}

		// Haven't figured out these. I think I will have to
		// define an iterator class here that does the right thing.
		std::vector< Conn* >::const_iterator begin() const {
			return static_cast< std::vector< Conn* >::const_iterator >( 0 );
		}

		std::vector< Conn* >::const_iterator end() const {
			return static_cast< std::vector< Conn* >::const_iterator >( 0 );
		}

		unsigned long find( const Conn* other ) const;
		bool innerConnect( Conn* target, unsigned long slot = 0 );
		void innerDisconnect(unsigned long index);
		void disconnectAll();
		void innerDisconnectAll();
		Conn* respondToConnect( Conn* target, unsigned long slot  ) {
			if ( canConnect( target ) ) {
				ReturnConn* ret = new ReturnConn( parent_ );
				vec_.push_back( ret );
				return ret;
			}
			return 0;
		}

	protected:
		bool canConnect(Conn* target) const {
		// Always true as long as input is good.
			return ( target != 0 );
		}

	private:
		std::vector< ReturnConn* > vec_;
		Element* parent_;
};

class SolverConn;

// The SolveMultiConn has any number of targets. It is special
// because the targets must be able to identify themselves to the
// solver and be quickly accessed individually for return values.
class SolveMultiConn: public BaseMultiConn
{
	public:
		SolveMultiConn( Element* e )
			: BaseMultiConn(e)
		{
			;
		}

		~SolveMultiConn();

		// This is ugly and should be avoided. Ideally a different
		// kind of iteration should be done.
		// For now just block it.
		std::vector< Conn* >::const_iterator begin( unsigned long i ) const {
			return static_cast< std::vector< Conn* >::const_iterator>( 0L );
		}

		std::vector< Conn* >::const_iterator end( unsigned long i ) const {
			return static_cast< std::vector< Conn* >::const_iterator>( 0L );
		}

		unsigned long find( const Conn* target ) const;

		unsigned long nTargets() const {
				return vec_.size();
		}

		unsigned long nSlots() const {
			return static_cast< unsigned long >( segments_.size() );
		}

		Conn* target( unsigned long index ) const;

		void listTargets( std::vector< Conn* >& list ) const;

		// Returns the index of the segment corresponding to specified
		// message number.
		unsigned long index( unsigned long msgno );

		bool connect( Conn* target, 
			unsigned long sourceSlot, unsigned long targetSlot = 0 );

		bool innerConnect( Conn* target, unsigned long slot = 0 );

		// Allocates a vector of Conns, and fills in segment info
		// to handle multiple types of target.
		// Once this is done,
		// no changes to size are allowed. Assumes that contents of
		// vec_ are disposable and have been disconnected.
		void resize( std::vector< unsigned long >& segments );

		// Connects a vector of Conns, and fills in
		// necessary allocation and size definition. Once this is done,
		// no changes to size are allowed. Assumes that contents of
		// vec_ are disposable and have been disconnected.
		/*
		void innerConnectVec( vector< Conn* >& list,
			vector< unsigned long > segments ) {
			segments_ = segments;
			filled_ = segments;
			vec_.resize( list.size() );
			for ( unsigned long i = 0; i < list.size(); i++ )
				vec_[ i ].innerConnect( list[i] );
		}
		*/

		void innerDisconnect(unsigned long index);

		void disconnectAll();

		void innerDisconnectAll();

		Conn* respondToConnect( Conn* target, unsigned long slot );

	private:
		// vec_ is a single big array of all the SolverConns managed
		// by the Conn. We need great care with these because if they
		// are messed up, e.g., due to vector reallocation, then the
		// originating Conns will be confused. So none of the operations
		// except resize() is permitted to touch the size of vec_.
		std::vector< SolverConn > vec_;

		// segments_ stores indices of the end of each segment of the
		// vec_. Each segment handles objects of the same type, having
		// the same RecvFunc. In most cases there will be a single
		// segment, so this should be simple enough.
		std::vector< unsigned long > segments_;

		// filled_ stores index of first free vec_ entry, for each slot.
		// When the vec_ is fully connected, filled_ == segments_.
		std::vector< unsigned long > filled_;
};

// Meant to be used in vectors, but not as pointers. See 
// SolverMultiConn above.
class SolverConn: public UniConnBase {
	public:
		SolverConn( SolveMultiConn* manager = 0 )
				: manager_( manager )
		{
			;
		}

		void setManager( SolveMultiConn* manager ) {
				manager_ = manager;
		}

		Element* parent() const {
			return manager_->parent();
		}

		unsigned long index() const {
			return manager_->find( this );
		}

	private:
		SolveMultiConn* manager_;
};

#endif	// _CONN_H
