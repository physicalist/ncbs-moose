#line 2 "GenesisParser.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int myFlexLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 47
#define YY_END_OF_BUFFER 48
static yyconst short int yy_accept[355] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       48,   46,   13,    5,   46,    8,   46,   46,   46,   46,
       46,   40,   30,   46,   32,   39,    7,   39,   39,   39,
       39,   39,   39,   39,   44,   46,   45,   11,   12,    3,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   13,   35,    8,
        9,   37,   38,    0,   43,    1,    2,   42,   40,    0,
       31,   34,   33,   39,    7,   39,   39,   39,   39,   39,

       39,   39,   19,   39,   39,   39,   39,   36,   11,   12,
       11,   11,   11,   11,   11,    1,    2,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   10,   10,   10,
       10,   10,   10,    1,    2,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,    0,    0,    2,    6,   42,
        0,    0,   41,   39,   39,   39,   24,   39,   39,   22,
       39,   39,   27,   39,   29,   39,   11,   11,    2,    4,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   10,   10,    2,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    0,    0,   43,
        0,    0,   42,   39,   21,   20,   39,   39,   39,   39,
       39,   39,   39,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,    0,    0,   42,   16,   39,
       28,   39,   39,   39,   39,   18,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,    0,   26,
       39,   39,   39,   17,   11,   11,   11,   11,   11,   11,
       10,   10,   10,   10,   10,   10,    0,   23,   39,   14,
       11,   11,   11,   11,   10,   10,   10,   10,    0,   25,
       11,   11,   10,   10,    0,   11,   10,    0,   11,   10,
       15,   11,   10,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    7,    1,    8,
        8,    9,   10,    8,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    1,   15,   16,
       17,   18,    1,    1,   19,   19,   20,   21,   22,   19,
       19,   19,   23,   19,   19,   19,   19,   24,   19,   25,
       19,   26,   27,   28,   19,   19,   19,   19,   19,   19,
        1,   29,    1,    1,   19,    1,   30,   31,   32,   33,

       34,   35,   19,   36,   37,   19,   38,   39,   19,   40,
       41,   19,   19,   42,   43,   44,   45,   19,   46,   47,
       19,   19,   48,   49,   50,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[51] =
    {   0,
        1,    2,    3,    1,    4,    2,    1,    5,    1,    1,
        1,    1,    1,    6,    7,    1,    1,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    2,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    2,    1,    2
    } ;

static yyconst short int yy_base[365] =
    {   0,
        0,    0,   50,    0,  100,    0,    0,    0,    0,    0,
      725,  726,  722,  726,  706,    0,  708,  714,  142,  706,
      143,  141,  702,  701,  700,    0,    0,  674,  118,  121,
      119,  681,  670,  677,  726,  663,  726,    0,  709,  726,
      693,  702,  152,  694,  158,  156,  690,  689,  688,  190,
      239,  137,  141,  153,  139,  143,  168,  655,    0,  686,
      695,  183,  687,  200,  200,  683,  682,  681,  288,  337,
      176,  185,  193,  177,  187,  196,  648,  694,  726,    0,
      681,  726,  726,  670,  203,  726,  690,  231,  246,  252,
      726,  726,  726,    0,    0,  658,  199,  658,  646,  648,

      646,  647,    0,  227,  642,  643,  647,  726,    0,  681,
        0,    0,    0,  658,  250,    0,  385,  253,  295,  259,
        0,    0,    0,  639,  240,  248,  244,  234,  179,  638,
      254,  637,  270,  266,  636,  274,    0,    0,    0,    0,
        0,  653,  299,    0,  434,  301,  306,  316,    0,    0,
        0,  634,  290,  314,  289,  292,  301,  633,  318,  632,
      327,  319,  631,  325,    0,  651,  354,  668,  726,  358,
      363,  656,  655,  638,  632,  632,    0,  631,  634,  629,
      630,  622,    0,  615,    0,  620,  637,  371,  483,  726,
      361,  383,  643,  642,  336,  154,  342,  613,  362,  359,

      364,  212,  130,  612,  357,  611,  366,  631,  399,  532,
      389,  405,  637,  636,  382,  383,  386,  607,  387,  392,
      396,  251,  402,  606,  401,  605,  406,  619,  631,  630,
      439,  606,  605,  580,    0,    0,  575,  569,  582,  567,
      565,  564,  571,  577,  586,  585,  441,  584,  578,  389,
      544,  543,  539,  412,  417,  416,  419,  537,  423,  551,
      563,  562,  456,  561,  560,  430,  531,  530,  529,  427,
      432,  431,  434,  528,  449,  549,  554,  553,    0,  526,
        0,  533,  527,  530,  522,    0,  540,  545,  544,  515,
      438,  514,  375,  450,  448,  453,  513,  534,  539,  538,

      509,  454,  508,  465,  462,  467,  461,  507,  522,    0,
      511,  505,  511,    0,  518,  501,  283,  464,  468,  500,
      515,  497,  303,  472,  474,  494,  509,    0,  490,    0,
      506,  486,  475,  485,  503,  483,  478,  482,  498,    0,
      497,  479,  494,  469,  449,  404,  398,  361,  270,  252,
      726,    0,    0,  726,  582,  235,  589,  596,  602,  608,
      615,  622,  629,  636
    } ;

static yyconst short int yy_def[365] =
    {   0,
      354,    1,  354,    3,  354,    5,    1,    1,    1,    1,
      354,  354,  354,  354,  354,  355,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  356,  357,  356,  356,  356,
      356,  356,  356,  356,  354,  354,  354,  358,  354,  354,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  359,
      359,   51,   51,   51,   51,   51,   51,  358,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  361,  361,
       70,   70,   70,   70,   70,   70,  360,  354,  354,  355,
      354,  354,  354,  354,  354,  354,  362,  354,  354,  354,
      354,  354,  354,  356,  357,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  354,  358,  354,
      358,  358,  358,  358,  358,  358,  363,  358,  358,  358,
      358,  358,  358,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,  358,  360,  360,  360,
      360,  360,  360,  360,  364,  360,  360,  360,  360,  360,
      360,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,  360,  354,  354,  362,  354,  354,
      354,  354,  354,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  358,  358,  363,  354,
      358,  358,  358,  358,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,  360,  360,  364,
      360,  360,  360,  360,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,  354,  354,  354,
      354,  354,  354,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  358,  358,  358,  358,  358,  358,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,  360,
      360,  360,  360,  360,  360,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,  354,  354,  354,  356,  356,
      356,  356,  356,  356,  356,  356,  358,  358,  358,   51,
       51,   51,   51,   51,   51,   51,   51,  360,  360,  360,

       70,   70,   70,   70,   70,   70,   70,   70,  354,  356,
      356,  356,  356,  356,  358,   51,   51,   51,   51,   51,
      360,   70,   70,   70,   70,   70,  354,  356,  356,  356,
      358,   51,   51,   51,  360,   70,   70,   70,  354,  356,
      358,   51,  360,   70,  354,  358,  360,  354,  358,  360,
      354,  358,  360,    0,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354
    } ;

static yyconst short int yy_nxt[777] =
    {   0,
       12,   13,   14,   15,   16,   17,   18,   12,   19,   12,
       12,   20,   21,   22,   12,   23,   24,   25,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   27,   26,
       28,   26,   26,   29,   30,   26,   31,   26,   26,   26,
       26,   32,   33,   26,   26,   34,   26,   35,   36,   37,
       38,   39,   40,   41,   16,   17,   42,   38,   43,   38,
       38,   44,   45,   46,   12,   47,   48,   49,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   27,   50,
       51,   50,   50,   52,   53,   50,   54,   50,   50,   50,
       50,   55,   56,   50,   50,   57,   50,   35,   58,   37,

       59,   39,   40,   60,   16,   17,   61,   12,   62,   59,
       59,   63,   64,   65,   59,   66,   67,   68,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   27,   69,
       70,   69,   69,   71,   72,   69,   73,   69,   69,   69,
       69,   74,   75,   69,   69,   76,   69,   35,   77,   37,
       83,   86,   88,  103,   89,   87,   97,   98,  104,  100,
      113,  101,   90,   84,   99,  102,  116,  118,  257,  119,
      117,  124,  134,  114,   90,  126,  127,  120,  124,  129,
      124,  130,  124,  128,  124,  131,  135,  132,  251,  120,
      109,  141,  133,  109,  124,  124,  109,  109,  109,  109,

      109,  109,  109,  136,  142,  109,  109,  109,  144,  124,
      162,  146,  145,  147,  154,  155,   85,  152,  152,  200,
      124,  148,  156,  157,  167,  158,  152,  160,  152,  159,
      163,  164,  161,  148,  152,  175,  167,  152,  109,  109,
       94,  176,  109,  256,  170,  109,  109,  109,  109,  109,
      109,  109,  171,  124,  109,  109,  109,   88,  182,   89,
      353,  172,  172,  115,  171,  173,  191,   90,  193,  193,
      183,  188,  194,  195,  192,  124,  198,  199,  352,   90,
      125,  124,  272,  188,  196,  124,  192,  109,  138,  124,
      197,  138,  152,  202,  138,  124,  138,  138,  138,  138,

      138,  203,  138,  138,  138,  138,  118,  124,  119,  205,
      207,  124,  143,  204,  211,  124,  120,  146,  332,  147,
      209,  218,  212,  215,  124,  213,  213,  148,  120,  214,
      152,  152,  209,  152,  212,  219,  138,  138,  336,  148,
      138,  220,  152,  138,  152,  138,  138,  138,  138,  138,
      216,  138,  138,  138,  138,  152,  217,  222,  223,  152,
      152,  227,  225,  229,  229,  250,  152,  230,  152,  351,
      224,  170,  232,  232,  191,  252,  233,  124,  153,  231,
      245,  245,  247,  124,  246,  138,  168,  190,  254,  168,
      168,  231,  248,  248,  247,  253,  249,  255,  124,  168,

      124,  258,  211,  124,  259,  124,  317,  124,  261,  261,
      263,  266,  262,  168,  264,  264,  124,  267,  265,  268,
      269,  270,  263,  152,  152,  350,  290,  152,  152,  271,
      124,  349,  168,  152,  168,  168,  190,  152,  168,  168,
      273,  168,  152,  152,  275,  274,  293,  152,  277,  277,
      288,  288,  278,  124,  289,  292,  297,  124,  124,  294,
      124,  304,  168,  295,  124,  299,  299,  301,  152,  300,
      303,  152,  152,  152,  305,  152,  348,  316,  306,  124,
      319,  168,  308,  168,  168,  354,  318,  168,  168,  124,
      152,  124,  320,  322,  124,  152,  323,  168,  324,  325,

      326,  334,  152,  152,  333,  124,  152,  338,  152,  124,
      152,  168,  337,  152,  342,  152,  124,  344,  347,  152,
      124,  346,  345,  152,  152,  343,  124,  124,  341,  340,
      168,  339,  168,  168,  354,  152,  168,  168,  152,  168,
      335,  124,  124,  331,  330,  329,  328,  327,  152,  152,
      152,  300,  300,  321,  124,  124,  124,  289,  289,  315,
      168,  314,  313,  312,  311,  310,  278,  278,  309,  307,
      302,  152,  152,  265,  265,  262,  262,  298,  296,  168,
      291,  168,   80,   80,  124,  124,   80,   80,   80,   95,
       95,  249,   95,   95,   95,   95,  109,  249,  246,  246,

      109,  109,  124,  287,  286,  285,  124,  124,  138,  284,
      283,  282,  281,  138,  138,  152,  280,  279,  233,  233,
      152,  152,  168,  168,  168,  168,  168,  168,  168,  189,
      189,  189,  189,  189,  189,  189,  210,  210,  210,  210,
      210,  210,  210,  230,  230,  276,  152,  152,  152,  214,
      214,  260,  124,  124,  124,  194,  194,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  173,  173,
      354,  228,  226,  152,  221,  152,  208,  206,  124,  201,
      124,  187,  110,  186,  185,  184,  181,  180,  179,  178,
      177,  174,  169,  166,   81,   78,  165,  151,  150,  149,

      143,  140,  139,  137,  123,  122,  121,  115,  112,  111,
      110,  108,  107,  106,  105,   96,   93,   92,   91,   85,
       82,   81,   79,   78,  354,   11,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354
    } ;

static yyconst short int yy_chk[777] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       19,   21,   22,   31,   22,   21,   29,   29,   31,   30,
       43,   30,   22,   19,   29,   30,   45,   46,  203,   46,
       45,  203,   55,   43,   22,   52,   52,   46,   52,   53,
       55,   53,   53,   52,   56,   53,   56,   54,  196,   46,
       50,   62,   54,   50,   54,  196,   50,   50,   50,   50,

       50,   50,   50,   57,   62,   50,   50,   50,   64,   57,
       74,   65,   64,   65,   71,   71,   85,   71,   74,  129,
      129,   65,   71,   72,   85,   72,   72,   73,   75,   72,
       75,   76,   73,   65,   73,   97,   85,   76,   50,   51,
      356,   97,   51,  202,   88,   51,   51,   51,   51,   51,
       51,   51,   88,  202,   51,   51,   51,   89,  104,   89,
      350,   90,   90,  115,   88,   90,  118,   89,  120,  120,
      104,  115,  120,  125,  118,  128,  127,  128,  349,   89,
       51,  125,  222,  115,  126,  127,  118,   51,   69,  126,
      126,   69,  222,  131,   69,  131,   69,   69,   69,   69,

       69,  133,   69,   69,   69,   69,  119,  134,  119,  134,
      136,  133,  143,  133,  146,  136,  119,  147,  317,  147,
      143,  155,  146,  153,  317,  148,  148,  147,  119,  148,
      155,  153,  143,  156,  146,  156,   69,   70,  323,  147,
       70,  157,  157,   70,  323,   70,   70,   70,   70,   70,
      154,   70,   70,   70,   70,  154,  154,  159,  161,  159,
      162,  164,  162,  167,  167,  195,  164,  167,  161,  348,
      161,  170,  171,  171,  191,  197,  171,  195,   70,  170,
      188,  188,  191,  197,  188,   70,  117,  117,  200,  117,
      117,  170,  192,  192,  191,  199,  192,  201,  205,  117,

      200,  205,  211,  199,  207,  201,  293,  207,  209,  209,
      211,  215,  209,  117,  212,  212,  293,  216,  212,  217,
      219,  220,  211,  215,  216,  347,  250,  217,  219,  221,
      250,  346,  117,  220,  117,  145,  145,  221,  145,  145,
      223,  145,  225,  223,  227,  225,  255,  227,  231,  231,
      247,  247,  231,  254,  247,  254,  259,  256,  255,  256,
      257,  271,  145,  257,  259,  263,  263,  266,  270,  263,
      270,  266,  272,  271,  272,  273,  345,  291,  273,  291,
      295,  145,  275,  145,  189,  189,  294,  189,  189,  295,
      275,  294,  296,  302,  296,  302,  304,  189,  305,  306,

      307,  319,  307,  305,  318,  318,  304,  325,  306,  319,
      344,  189,  324,  324,  333,  325,  333,  337,  343,  337,
      342,  341,  339,  338,  336,  335,  334,  332,  331,  329,
      189,  327,  189,  210,  210,  326,  210,  210,  322,  210,
      321,  320,  316,  315,  313,  312,  311,  309,  308,  303,
      301,  300,  299,  298,  297,  292,  290,  289,  288,  287,
      210,  285,  284,  283,  282,  280,  278,  277,  276,  274,
      269,  268,  267,  265,  264,  262,  261,  260,  258,  210,
      253,  210,  355,  355,  252,  251,  355,  355,  355,  357,
      357,  249,  357,  357,  357,  357,  358,  248,  246,  245,

      358,  358,  359,  244,  243,  242,  359,  359,  360,  241,
      240,  239,  238,  360,  360,  361,  237,  234,  233,  232,
      361,  361,  362,  362,  362,  362,  362,  362,  362,  363,
      363,  363,  363,  363,  363,  363,  364,  364,  364,  364,
      364,  364,  364,  230,  229,  228,  226,  224,  218,  214,
      213,  208,  206,  204,  198,  194,  193,  187,  186,  184,
      182,  181,  180,  179,  178,  176,  175,  174,  173,  172,
      168,  166,  163,  160,  158,  152,  142,  135,  132,  130,
      124,  114,  110,  107,  106,  105,  102,  101,  100,   99,
       98,   96,   87,   84,   81,   78,   77,   68,   67,   66,

       63,   61,   60,   58,   49,   48,   47,   44,   42,   41,
       39,   36,   34,   33,   32,   28,   25,   24,   23,   20,
       18,   17,   15,   13,   11,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "GenesisParser.yy.l"
#define INITIAL 0
#define YY_ALWAYS_INTERACTIVE 1
#line 11 "GenesisParser.yy.l"
// Word recognizer with a symbol table, C++ implementation
#include <iostream>
#include <fstream>
#include <setjmp.h>
#include "GenesisParser.tab.h"
#include "GenesisParser.h"


#    define lextoken(tok)   return(tok)
#    define lexchar(ch) return(ch)

/*
** C comment handling taken from ANSI C Lex specification published by
** Jeff Lee and Jutta Degener <jutta@pobox.com>.
*/
#define LIT 1
#define FUNCLIT 2
#define CCOMMENT 3
#define CPPCOMMENT 4

#line 36 "GenesisParser.yy.l"
/* I use this area to hold things that I might want back */

#ifdef COMMENT
<CPPCOMMENT>[^\n]*	Popyybgin();
"//"			Pushyybgin(CPPCOMMENT);

\\\n			continuation = 0;

<CCOMMENT>[^*\n]*	;
<CCOMMENT>"*"		;
<CCOMMENT>"\n"		;
<CCOMMENT>"*/"		Popyybgin();
"/*"/[^\n]*		Pushyybgin(CCOMMENT);
#endif
#line 656 "GenesisParser.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 52 "GenesisParser.yy.l"


#line 786 "GenesisParser.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 355 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 726 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 54 "GenesisParser.yy.l"
Ccomment();
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 56 "GenesisParser.yy.l"
;
	YY_BREAK
case 3:
#line 59 "GenesisParser.yy.l"
case 4:
YY_RULE_SETUP
#line 59 "GenesisParser.yy.l"
{
			  if (!continuation)
			      lexchar('\n');
			  else
			    {
			      continuation = 0;
			      lexchar(WHITESPACE);
			    }
			}
	YY_BREAK
case 5:
#line 70 "GenesisParser.yy.l"
case 6:
YY_RULE_SETUP
#line 70 "GenesisParser.yy.l"
{
			  if (!continuation)
			      lexchar('\n');

			  continuation = 0;
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 77 "GenesisParser.yy.l"
continuation = 1;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "GenesisParser.yy.l"
{
			  char	ch;

			  ch = (char)yyinput();
			  if (ch == '\n')
			    {
			      yyerror
			      ("Missing closing quote in string constant");
			      /* No Return */
			    }

			  if (yytext[yyleng-1] == '\\')
			    {
			      yytext[yyleng-1] = '"';
			      yyless(yyleng-1);
			      yymore();
			    }
			  else
			    {
			      yylval.str = (char *) strdup(yytext+1);
			      lextoken(STRCONST);
			    }
			};
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 103 "GenesisParser.yy.l"
{
			  sscanf(yytext+1, " %d ", &yylval.iconst);
			  lextoken(DOLLARARG);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 108 "GenesisParser.yy.l"
{ 
			  yylval.str = (char *) strdup(yytext);
			  lextoken(LITERAL);
			};
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 113 "GenesisParser.yy.l"
{ 
			  yylval.str = (char *) strdup(yytext);
			  lextoken(LITERAL);
			};
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 118 "GenesisParser.yy.l"
lextoken(WHITESPACE);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 119 "GenesisParser.yy.l"
;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 121 "GenesisParser.yy.l"
lextoken(INCLUDE);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 123 "GenesisParser.yy.l"
lextoken(ENDSCRIPT);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 125 "GenesisParser.yy.l"
lextoken(BREAK);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 127 "GenesisParser.yy.l"
lextoken(RETURN);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 129 "GenesisParser.yy.l"
lextoken(WHILE);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 131 "GenesisParser.yy.l"
lextoken(IF);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 133 "GenesisParser.yy.l"
lextoken(ELSE);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 135 "GenesisParser.yy.l"
lextoken(ELIF);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 137 "GenesisParser.yy.l"
lextoken(FOR);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 139 "GenesisParser.yy.l"
lextoken(FOREACH);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 141 "GenesisParser.yy.l"
lextoken(END);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 143 "GenesisParser.yy.l"
lextoken(FUNCTION);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 145 "GenesisParser.yy.l"
lextoken(EXTERN);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 147 "GenesisParser.yy.l"
lextoken(INT);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 149 "GenesisParser.yy.l"
lextoken(FLOAT);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 151 "GenesisParser.yy.l"
lextoken(STR);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 153 "GenesisParser.yy.l"
lextoken(LT);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 154 "GenesisParser.yy.l"
lextoken(LE);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 155 "GenesisParser.yy.l"
lextoken(GT);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 156 "GenesisParser.yy.l"
lextoken(GE);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 157 "GenesisParser.yy.l"
lextoken(EQ);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 158 "GenesisParser.yy.l"
lextoken(NE);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 160 "GenesisParser.yy.l"
lextoken(OR);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 161 "GenesisParser.yy.l"
lextoken(AND);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 163 "GenesisParser.yy.l"
lextoken(POW);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 165 "GenesisParser.yy.l"
{
			  Result	*rp;

			  if (!ReturnIdents &&
			      ((rp=SymtabLook(LocalSymbols, yytext)) != NULL ||
			       (rp=SymtabLook(&GlobalSymbols, yytext)) != NULL))
			    {
			      yylval.str = (char *) rp;
			      if (rp->r_type == FUNCTION)
				  { lextoken(FUNCREF); }
			      else
				  lextoken(VARREF);
			    }
			  else
			    {
			      yylval.str = (char *) strdup(yytext);
			      lextoken(IDENT);
			    }
			};
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 185 "GenesisParser.yy.l"
{
			  sscanf(yytext, " %d ", &yylval.iconst);
			  lextoken(INTCONST);
			}
	YY_BREAK
case 41:
#line 191 "GenesisParser.yy.l"
case 42:
#line 192 "GenesisParser.yy.l"
case 43:
YY_RULE_SETUP
#line 192 "GenesisParser.yy.l"
{
			  sscanf(yytext, " %lf ", &yylval.fconst);
			  lextoken(FLOATCONST);
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 197 "GenesisParser.yy.l"
{ Pushyybgin(0); lexchar('{'); };
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 198 "GenesisParser.yy.l"
{ Popyybgin(); lexchar('}'); };
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 200 "GenesisParser.yy.l"
lexchar(yytext[0]);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 201 "GenesisParser.yy.l"
ECHO;
	YY_BREAK
#line 1166 "GenesisParser.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LIT):
case YY_STATE_EOF(FUNCLIT):
case YY_STATE_EOF(CCOMMENT):
case YY_STATE_EOF(CPPCOMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 355 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 355 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 354);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}

void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 201 "GenesisParser.yy.l"





/*
** Lexer routines to push and pop the lexer begin state
** They have to be here rather than GenesisParser.cpp because certain
** ugly #defines are
** made by flex and referred to in these functions.
*/

void myFlexLexer::Pushyybgin(int start)
{	/* Pushyybgin --- Push to another lexer begin state */

	if (yybginidx == BGINSTKSIZE)
	    yyerror("Pushyybgin: lexer begin state stack overflow");
	    /* No Return */

	yybginstk[yybginidx++] = YY_START;
	BEGIN start;

}	/* Pushyybgin */


void myFlexLexer::Popyybgin()
{	/* Popyybgin --- Pop to previous lexer begin state */

	if (yybginidx == 0)
	    yyerror("Popyybgin: lexer begin state stack underflow");
	    /* No Return */

	BEGIN yybginstk[--yybginidx];

}	/* Popyybgin */


int myFlexLexer::nextchar(int flush)
{
	if (flush)
	  {
	    yybginidx = 0;
	    BEGIN 0;
	    yyrestart(yyin); /* flushes flex input buffer */
	  }

	return 0;
}
