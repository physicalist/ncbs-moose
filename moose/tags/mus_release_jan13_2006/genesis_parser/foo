/**********************************************************************
** This program is part of 'MOOSE', the
** Messaging Object Oriented Simulation Environment,
** also known as GENESIS 3 base code.
**           copyright (C) 2003 Upinder S. Bhalla and NCBS
** It is made available under the terms of the
** GNU General Public License version 2
** See the file COPYING.LIB for the full notice.
**********************************************************************/

#include "header.h"
#include <setjmp.h>
#include <FlexLexer.h>
#include "script.h"
#include "GenesisParser.h"
#include "GenesisParserWrapper.h"

Finfo* GenesisParserWrapper::fieldArray_[] =
{
	new ValueFinfo< string >( "shell",
		&GenesisParserWrapper::getShell,
		&GenesisParserWrapper::setShell,
		"string" ),
	new Dest1Finfo< string >( "readline",
		&GenesisParserWrapper::readlineFunc, 
		&GenesisParserWrapper::getReadlineConn, ""),

	new Dest0Finfo( "process",
		&GenesisParserWrapper::processFunc, 
		&GenesisParserWrapper::getProcessConn, ""),

	new SingleSrc1Finfo< string >( "echo",
		&GenesisParserWrapper::getEcho, ""),
};

const Cinfo GenesisParserWrapper::cinfo_(
	"GenesisParser",
	"Upinder S. Bhalla, NCBS, 2004-2005",
	"Object to handle the old Genesis parser",
	"Element",
	GenesisParserWrapper::fieldArray_,
	sizeof(GenesisParserWrapper::fieldArray_)/sizeof(Finfo *),
	&GenesisParserWrapper::create
);

//////////////////////////////////////////////////////////////////
// GenesisParserWrapper friend functions
//////////////////////////////////////////////////////////////////

Element* lookupEchoConn( const Conn* c )
{
	static const unsigned long OFFSET =
		(unsigned long) ( &GenesisParserWrapper::echoConn_ );
	return ( Element * )( ( unsigned long )c - OFFSET );
}

/*
Element* lookupProcessConn( const Conn* c )
{
	static const unsigned long OFFSET =
		(unsigned long) ( &GenesisParserWrapper::processConn_ );
	return ( Element * )( ( unsigned long )c - OFFSET );
}
*/

//////////////////////////////////////////////////////////////////
// GenesisParserWrapper utilities
//////////////////////////////////////////////////////////////////

char* copyString( const string& s )
{
	char* ret = ( char* ) calloc ( s.length() + 1, sizeof( char ) );
	strcpy( ret, s.c_str() );
	return ret;
}

//////////////////////////////////////////////////////////////////
// GenesisParserWrapper Builtin commands
//////////////////////////////////////////////////////////////////

void do_add( int argc, const char** argv, Shell* s )
{
	if ( argc == 3 ) {
		s->addFuncLocal( argv[1], argv[2] );
	} else {
		cout << "usage:: " << argv[0] << " src dest\n";
	}
}

void do_drop( int argc, const char** argv, Shell* s )
{
	if ( argc == 3 ) {
		s->dropFuncLocal( argv[1], argv[2] );
	} else {
		cout << "usage:: " << argv[0] << " src dest\n";
	}
}

void do_set( int argc, const char** argv, Shell* s )
{
	string field;
	string value;
	if ( argc == 4 ) {
		field = string( argv[ 1 ] ) + "/" + argv[ 2 ];
		value = argv[ 3 ];
	} else if ( argc == 3 ) {
		field = argv[ 1 ];
		value = argv[ 2 ];
	} else {
		cout << "usage:: " << argv[0] << " [element] field value\n";
		return;
	}
	s->setFuncLocal( field, value );
}

char* do_get( int argc, const char** argv, Shell* s )
{
	string field;
	string value;
	if ( argc == 3 ) {
		field = string( argv[ 1 ] ) + "/" + argv[ 2 ];
	} else if ( argc == 2 ) {
		field = argv[ 1 ];
	} else {
		cout << "usage:: " << argv[0] << " [element] field\n";
		return "";
	}
	return copyString( s->getFuncLocal( field ) );
}

void do_create( int argc, const char** argv, Shell* s )
{
	if ( argc == 3 ) {
		s->createFuncLocal( argv[1], argv[2] );
	} else {
		cout << "usage:: " << argv[0] << " class name\n";
	}
}

void do_delete( int argc, const char** argv, Shell* s )
{
	if ( argc == 2 ) {
		s->deleteFuncLocal( argv[1] );
	} else {
		cout << "usage:: " << argv[0] << " Element/path\n";
	}
}

void do_move( int argc, const char** argv, Shell* s )
{
	if ( argc == 3 ) {
		s->moveFuncLocal( argv[1], argv[2] );
	} else {
		cout << "usage:: " << argv[0] << " src dest\n";
	}
}

void do_copy( int argc, const char** argv, Shell* s )
{
	if ( argc == 3 ) {
		s->copyFuncLocal( argv[1], argv[2] );
	} else {
		cout << "usage:: " << argv[0] << " src dest\n";
	}
}

void do_copy_shallow( int argc, const char** argv, Shell* s )
{
	if ( argc == 3 ) {
		s->copyShallowFuncLocal( argv[1], argv[2] );
	} else {
		cout << "usage:: " << argv[0] << " src dest\n";
	}
}

void do_copy_halo( int argc, const char** argv, Shell* s )
{
	if ( argc == 3 ) {
		s->copyHaloFuncLocal( argv[1], argv[2] );
	} else {
		cout << "usage:: " << argv[0] << " src dest\n";
	}
}

void do_ce( int argc, const char** argv, Shell* s )
{
	if ( argc == 2 ) {
		s->ceFuncLocal( argv[1] );
	} else {
		cout << "usage:: " << argv[0] << " Element\n";
	}
}

void do_pushe( int argc, const char** argv, Shell* s )
{
	if ( argc == 2 ) {
		s->pusheFuncLocal( argv[1] );
	} else {
		cout << "usage:: " << argv[0] << " Element\n";
	}
}

void do_pope( int argc, const char** argv, Shell* s )
{
	if ( argc == 1 ) {
		s->popeFuncLocal( );
	} else {
		cout << "usage:: " << argv[0] << "\n";
	}
}

void do_alias( int argc, const char** argv, Shell* s )
{
	// Here we look up the command and check if it exists.
	// If so, we duplicate the command using AddFunc
	if ( argc == 3 ) {
//		alias( argv[ 1 ], argv[ 2 ] );
		// Make the aliases
	// } else if ( argc == 1 ) {
		// List the aliases
	} else {
		cout << "usage:: " << argv[0] << " orignal new\n";
	}
}

void do_quit( int argc, const char** argv, Shell* s )
{
	s->quitFuncLocal( );
}

void do_stop( int argc, const char** argv, Shell* s )
{
	if ( argc == 1 ) {
		s->stopFuncLocal( );
	} else {
		cout << "usage:: " << argv[0] << "\n";
	}
}

void do_reset( int argc, const char** argv, Shell* s )
{
	if ( argc == 1 ) {
		s->resetFuncLocal( );
	} else {
		cout << "usage:: " << argv[0] << "\n";
	}
}

void do_step( int argc, const char** argv, Shell* s )
{
	if ( argc == 2 ) {
		s->stepFuncLocal( argv[1], "" );
	} else if ( argc == 3 ) {
		s->stepFuncLocal( argv[1], argv[2] );
	} else {
		cout << "usage:: " << argv[0] << " time/nsteps\n";
	}
}

void do_show( int argc, const char** argv, Shell* s )
{
	if ( argc == 2 ) {
		s->showFuncLocal( argv[1] );
	} else if ( argc == 3 ) {
		string temp = string( argv[ 1 ] ) + "/" + argv[ 2 ];
		s->showFuncLocal( temp );
	} else {
		cout << "usage:: " << argv[0] << " [element] field\n";
	}
}

void do_le( int argc, const char** argv, Shell* s )
{
	if ( argc == 1 )
		s->leFuncLocal( "" );
	else if ( argc >= 2 )
		s->leFuncLocal( argv[1] );
}

void do_pwe( int argc, const char** argv, Shell* s )
{
	s->pweFuncLocal( );
}

void do_listcommands( int argc, const char** argv, Shell* s )
{
	s->listCommandsFuncLocal( );
}

void do_listobjects( int argc, const char** argv, Shell* s )
{
	s->listClassesFuncLocal( );
}

void do_echo( int argc, const char** argv, Shell* s )
{
	vector< string > vec;
	int options = 0;
	if ( argc > 1 && strncmp( argv[ argc - 1 ], "-n", 2 ) == 0 ) {
		options = 1; // no newline
		argc--;
	}

	for (int i = 1; i < argc; i++ )
		vec.push_back( argv[i] );

	s->echoFuncLocal( vec, options );
}


//////////////////////////////////////////////////////////////////
// GenesisParserWrapper load command
//////////////////////////////////////////////////////////////////

void GenesisParserWrapper::loadBuiltinCommands()
{
	AddFunc( "addmsg", do_add, "void" );
	AddFunc( "deletemsg", do_drop, "void" );
	AddFunc( "setfield", do_set, "void" );
	AddFunc( "getfield", reinterpret_cast< slifunc >( do_get ), "char*" );
	AddFunc( "getmsg", reinterpret_cast< slifunc >( do_getmsg ), "char*" );
	AddFunc( "isa", reinterpret_cast< slifunc >( do_isa ), "int" );
	AddFunc( "showfield", do_show, "void" );
	AddFunc( "create", do_create, "void" );
	AddFunc( "delete", do_delete, "void" );
	AddFunc( "move", do_move, "void" );
	AddFunc( "copy", do_copy, "void" );
	AddFunc( "copy_shallow", do_copy_shallow, "void" );
	AddFunc( "copy_halo", do_copy_halo, "void" );
	AddFunc( "ce", do_ce, "void" );
	AddFunc( "pushe", do_pushe, "void" );
	AddFunc( "pope", do_pope, "void" );
	AddFunc( "alias", do_alias, "void" );
	AddFunc( "quit", do_quit, "void" );
	AddFunc( "stop", do_stop, "void" );
	AddFunc( "reset", do_reset, "void" );
	AddFunc( "step", do_step, "void" );
	AddFunc( "le", do_le, "void" );
	AddFunc( "pwe", do_pwe, "void" );
	AddFunc( "listcommands", do_listcommands, "void" );
	AddFunc( "listobjects", do_listobjects, "void" );
	AddFunc( "echo", do_echo, "void" );
}

//////////////////////////////////////////////////////////////////
// GenesisParserWrapper Field commands
//////////////////////////////////////////////////////////////////

void GenesisParserWrapper::setShell( Conn* c, string s )
{
	Element * temp = Element::root()->relativeFind( s );
	ShellWrapper* shell = dynamic_cast< ShellWrapper* >( temp );
	if ( !shell ) {
		cout << "Error:GenesisParserWrapper::setShell: Element " << 
			s << " not found\n";
		return;
	}
	static_cast<GenesisParserWrapper *>( c->parent() )->
		innerSetShell( shell );
}

string GenesisParserWrapper::getShell( const Element* e )
{
	Shell* temp = 
		static_cast< const GenesisParserWrapper *>( e )->
			innerGetShell( );
	ShellWrapper* shell = dynamic_cast< ShellWrapper* >( temp );
			if ( !shell ) {
		cout << "Error:GenesisParserWrapper::getShell: shell not defined\n";
		return "";
	}
	return shell->name();
}
