/**********************************************************************
** This program is part of 'MOOSE', the
** Messaging Object Oriented Simulation Environment,
** also known as GENESIS 3 base code.
**           copyright (C) 2003-2006 Upinder S. Bhalla. and NCBS
** It is made available under the terms of the
** GNU Lesser General Public License version 2.1
** See the file COPYING.LIB for the full notice.
**********************************************************************/

class CaConc
{
	public:

	author: 
		Upinder S. Bhalla, 2006, NCBS
	description:
		Calcium concentration pool. Takes current from a channel
		and keeps track of calcium buildup and depletion by a
		single exponential process.

	field:
		double Ca = 0.0;
		double CaBasal = 0.0;
		double tau = 1.0;
		double B = 1.0;

	shared:
		single process( processIn, reinitIn );

	src:
		multi conc( double Ca );
	
	dest:
		multi current( double I ) {
			activation_ += I;
		}
		
		single currentFraction( double I, double fraction ) {
			activation_ += I * fraction;
		}

		multi increase( double I ) {
			activation_ += fabs( I );
		}

		multi decrease( double I ) {
			activation_ -= fabs( I );
		}

		multi basal( double value ) {
			CaBasal_ = value;
		}

		single reinit( ) {
			activation_ = 0.0;
			c_ = 0.0;
			Ca_ = CaBasal_;
			conc( Ca_ );
		}

		// Note that here we explicitly indicate messages going out.
		// If the user has a more complicated structure for their
		// function, they can rearrange the outgoing calls.
		single process( ProcInfo info ) {
			double x = exp( -info->dt_ / tau_ );
			c_ = c_ * x + ( B_ * activation_ * tau_ )  * ( 1.0 - x );
			Ca_ = CaBasal_ + c_;
			conc( Ca_ );
			activation_ = 0;
		}



	private:
		double c_;
		double activation_;
};
