MOOSE architecture introduction.

29 March 2007

Upi Bhalla

Overview.

The current (2007) version of MOOSE is a complete refactoring of the 2006
version. The 2006 version was a success, in that it was able to provide 
functionality for almost all aspects of GENESIS, including language
backward compatibility. It was also successful in defining the range of
functions needed to support both the old GENESIS functioning, and newer
core features such as solvers, parallelism, and flexible messaging.
An overview of this API is in the file MOOSE2006_API.

As MOOSE2006 was being coded, it became clear that its API was getting rather
baroque and it became harder to squeeze in new features (e.g., parallel
messaging) within the old framework. The old API included of 36 shell
functions, 8 message variants, 21 Field info classes (Finfos), and
11 variants on the Connection class. In addition, every new class was 
a doubly inherited class merging Element and the user's own class
definition. This involved rather ugly template-based set up of messaging
for each class. This was accomplished using a preprocessor which parsed
yet another higher-level class definition to generate a reasonably complete
class definition involving 3 files.

MOOSE2007 implements the same functionality with much less.
- The messaging is completely revamped, and it doesn't
make much sense to talk about message variants now. 
- There are currently 11 Finfo classes, which can do almost everything
that MOOSE06 did. 
- There is only one Connection class, and that is not going to expand.
- The user-class definition is now completely separate from the Element
definition. User class data is just a void* pointer on the Element class.
- Due to a vast simplification of messaging, we don't need to do much
templating during class definition. It is probably simple enough to
completely avoid the use of any preprocessing.

In addition, MOOSE2007 has several coding advances built into it from a very
early stage:
- Use of Doxygen for automatic documentation
- Extensive use of assertions
- Extensive and rigorous unit tests for the base code
- Compilation with Windows as well as Linux.
- Integration with SWIG as an alternative to the GENESIS parser.
	Currently the GENESIS parser is set up by default, but a substantial
	body of code with the Python module is awaiting merging.

This document will evolve to lay out the architecture and API of MOOSE.

Shell API calls:
These are calls that connect the parser to the system. They are independent
of the number of nodes and of the location of objects. They do not use pointers.
These calls are all encapsulated in a large SharedMessage between the 
parser and the shell. Currently the GenesisParserWrapper talks to the
Shell by default.

C++ API calls:
These are calls meant to be used _on a single node_. They handle Element
pointers. 

Object creation: Neutral::create( const string& type, const string& name,
	Element* parent );
Object destruction: set( Element*, "destroy" );
Message creation: Finfo::add( Element* source, Element* dest, const Finfo* destField );
Message destruction: Finfo::drop( Element* e, unsigned int msgIndex )
Message destruction: Finfo::dropAll( Element* e )
Sending messages: send0( Element*, unsigned int slot );
Sending messages: send1< T >( Element*, unsigned int slot, T value );
Sending messages: send2< T1, T2 >( Element*, unsigned int slot, T1 v1, T2 v2 );
Sending messages: send3< T1, T2, T3 >( Element*, unsigned int slot, T1 v1, T2 v2, T3 v3 );
Field assignment: set< T >( Element*, const Finfo*, T value );
Field assignment: set< T >( Element*, const string& fieldName, T value );
Field readout: get< T >( const Element*, const Finfo*, T& value );
Field readout: get< T >( Element*, const string& fieldName, T& value );

