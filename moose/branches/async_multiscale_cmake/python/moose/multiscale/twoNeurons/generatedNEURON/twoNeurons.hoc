//  ******************************************************
// 
//     File generated by: neuroConstruct v1.7.0
// 
//  ******************************************************

{load_file("nrngui.hoc")}

//  Initialising stopwatch for timing setup

{startsw()}

print ""
print "*****************************************************"
print ""
print "    neuroConstruct generated NEURON simulation "
print "    for project: /home2/dilawar/Work/github/neurons_sim/neuroConstructProjects/twoNeurons/twoNeurons.ncx "
print ""
print "    Description: This is a simple project with a single cell placed randomly in a 3D rectangular box."
print "    "
print "    Go to tab Generate, press Generate Cell Positions and Connections, and then to visualise the results, go to tab Visualisation and press View, with Latest Generated Positions selected in the drop down box."
print "    "
print "    If NEURON or GENESIS are installed, the cell can be simulated via tab Export."
print ""
print "    Simulation Configuration: SimConfig: Default Simulation Configuration "
print "    This is the default configuration of the Cell Groups, stimulations, plots, etc for this project "
print " "
print  "*****************************************************"

strdef pwd
{system("pwd", pwd)}
print ""
print "Current working dir: ", pwd

objectvar allCells
{allCells = new List()}


//  A flag to signal simulation was generated by neuroConstruct 

{nC = 1}


//  Including neuroConstruct utilities file 

{load_file("nCtools.hoc")}

//  Including neuroConstruct cell check file 

{load_file("cellCheck.hoc")}

//  Getting hostname

objref strFuncs
{strFuncs = new StringFunctions()}
strdef host
{system("hostname", host)}
if (strFuncs.len(host)>0) {
    strFuncs.left(host, strFuncs.len(host)-1) 
} else {
    host = "????" 
}


//  Simulation running in serial mode, setting default host id

{hostid = 0}


//  Initializes random-number generator

{use_mcell_ran4(1)}

{mcell_ran4_init(997172005)}


func isCellOnNode() {
    return 1 // serial mode, so yes...
}

//////////////////////////////////////////////////////////////////////
//   Setting up Python to allow loading in of NetworkML 
//////////////////////////////////////////////////////////////////////

nrnpython("import sys")
nrnpython("import os")


//  Adding current path to Python path

nrnpython("if sys.path.count(os.getcwd())==0: sys.path.append(os.getcwd())")
nrnpython("import neuron")
nrnpython("from neuron import hoc")
nrnpython("import nrn")

objref py
py = new PythonObject()

nrnpython("h = hoc.HocObject()")


//  Importing main Python file: twoNeurons

nrnpython("import twoNeurons")

nrnpython("twoNeurons.loadNetwork()")



//////////////////////////////////////////////////////////////////////
//   Setting initial parameters
//////////////////////////////////////////////////////////////////////

strdef simConfig
{simConfig = "Default Simulation Configuration"}
{celsius = 6.3}




proc initialiseValues0() {


//  Setting initial vals in cell group: SimpleCellGroup which has 1 cells


//  Giving all cells an initial potential of: -60.0

    for i = 0, n_SimpleCellGroup-1 {
        forsec a_SimpleCellGroup[i].all  v = -60.0

    }


//  Setting initial vals in cell group: PurkinjeCellGroup which has 1 cells


//  Giving all cells an initial potential of: -60.0

    for i = 0, n_PurkinjeCellGroup-1 {
        forsec a_PurkinjeCellGroup[i].all  v = -60.0

    }

}

objref fih0
{fih0 = new FInitializeHandler(0, "initialiseValues0()")}



//////////////////////////////////////////////////////////////////////
//   Adding 1 stimulation(s)
//////////////////////////////////////////////////////////////////////

n_SampleIClamp = 1 // number of individual inputs in SampleIClamp

objref spikesource_SampleIClamp[n_SampleIClamp]

objref synapse_SampleIClamp[n_SampleIClamp]
objref connection_SampleIClamp[n_SampleIClamp]
thresh = -20
delay = 0
weight = 1

access a_PurkinjeCellGroup[0].Soma 
spikesource_SampleIClamp[0] = new NetStim(0.5)

//  NOTE: This is a very rough way to get an average rate of 0.05 kHz!!!
spikesource_SampleIClamp[0].number = 500.0
spikesource_SampleIClamp[0].interval = 20.0
spikesource_SampleIClamp[0].noise = 1.0 
spikesource_SampleIClamp[0].start = 0 
synapse_SampleIClamp[0] = new DoubExpSyn(0.5) 

//   Inserts synapse 0.5 of way down

connection_SampleIClamp[0] = new NetCon(spikesource_SampleIClamp[0], synapse_SampleIClamp[0], thresh, delay, weight)



access SimpleCell_t[0].Soma

//////////////////////////////////////////////////////////////////////
//   Settings for running the demo
//////////////////////////////////////////////////////////////////////


tstop = 100.0
dt = 0.02
steps_per_ms = 50.0

//////////////////////////////////////////////////////////////////////
//   Adding 2 plot(s)
//////////////////////////////////////////////////////////////////////


//   This code pops up a plot of a_PurkinjeCellGroup[0].Soma.v(0.5)

objref PurkinjeCellGroup_v
PurkinjeCellGroup_v = new Graph(0)
{PurkinjeCellGroup_v.size(0, tstop,-90.0,50.0)}
{PurkinjeCellGroup_v.view(0, -90.0, tstop, 140.0, 80, 330, 330, 250)}
{
    PurkinjeCellGroup_v.addexpr("a_PurkinjeCellGroup[0].Soma.v", "a_PurkinjeCellGroup[0].Soma.v(0.5)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(PurkinjeCellGroup_v)
}

//   This code pops up a plot of a_SimpleCellGroup[0].Soma.v(0.5)

objref SimpleCellGroup_v
SimpleCellGroup_v = new Graph(0)
{SimpleCellGroup_v.size(0, tstop,-90.0,50.0)}
{SimpleCellGroup_v.view(0, -90.0, tstop, 140.0, 80, 330, 330, 250)}
{
    SimpleCellGroup_v.addexpr("a_SimpleCellGroup[0].Soma.v", "a_SimpleCellGroup[0].Soma.v(0.5)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(SimpleCellGroup_v)
}

//   This code pops up a Shape plot of the cells

objref plotShape
plotShape = new PlotShape()
plotShape.exec_menu("Shape Plot")

fast_flush_list.append(plotShape)


//////////////////////////////////////////////////////////////////////
//   This will run a full simulation of 5001 steps when the hoc file is executed
//////////////////////////////////////////////////////////////////////


//  Recording 2 variable(s)

objref v_time
objref f_time
objref propsFile

v_time = new Vector()
{ v_time.record(&t) }
{ v_time.resize(5001) } // true
f_time = new File()


//  Saving VOLTAGE on only one seg, id: 0, in the only cell in PurkinjeCellGroup


//  Creating vector for segment: Soma(ID: 0)

objref v_PurkinjeCellGroup_seg_Soma_v[1]
for i=0, 0 {
    { v_PurkinjeCellGroup_seg_Soma_v[i] = new Vector() }
    { v_PurkinjeCellGroup_seg_Soma_v[i].record(&a_PurkinjeCellGroup[i].Soma.v(0.5))} 
    { v_PurkinjeCellGroup_seg_Soma_v[i].resize(5001) }
}
objref f_PurkinjeCellGroup_seg_Soma_v[1]


//  Saving VOLTAGE on only one seg, id: 0, in the only cell in SimpleCellGroup


//  Creating vector for segment: Soma(ID: 0)

objref v_SimpleCellGroup_seg_Soma_v[1]
for i=0, 0 {
    { v_SimpleCellGroup_seg_Soma_v[i] = new Vector() }
    { v_SimpleCellGroup_seg_Soma_v[i].record(&a_SimpleCellGroup[i].Soma.v(0.5))} 
    { v_SimpleCellGroup_seg_Soma_v[i].resize(5001) }
}
objref f_SimpleCellGroup_seg_Soma_v[1]

strdef simReference
simReference = "Sim_3"



strdef simsDir
simsDir = "/home2/dilawar/Work/github/neurons_sim/neuroConstructProjects/twoNeurons/simulations/"


//  Note: to change location of the generated simulation files, just change value of targetDir
//  e.g. targetDir="" or targetDir="aSubDir/"

strdef targetDir
{ sprint(targetDir, "%s%s/", simsDir, simReference)}


//  Single simulation run...

strdef date
// Note: not showing date/time of start/stop of simulation. This requires Cygwin to be installed// which includes the "date" unix command. Install under c:\cygwin

setuptime = stopsw()

print "Setup time for simulation: ",setuptime," seconds"

print "Starting simulation of duration ",tstop,"ms, dt: ",dt,"ms, reference: ",simReference,""

{currenttime = startsw()}
//////////////////////////////////////////////////////////////////////
//   Main run statement
//////////////////////////////////////////////////////////////////////

{run()}

{realruntime = startsw() - currenttime}
print "Finished simulation in ", realruntime ,"seconds"

print "Storing the data..."

strdef timeFilename
nrnpython("import numpy")
nrnpython("import tables")

nrnpython("from neuron import *")


nrnpython("h5file = tables.openFile(h.targetDir+'Sim_3_.h5', mode = 'w', title = 'Generated via neuroConstruct')")


//  Saving VOLTAGE on only one seg, id: 0, in the only cell in PurkinjeCellGroup


//  Saving vector for segment: Soma(ID: 0)

print "Using HDF5 save mode: 4"
{nrnpython("allData = numpy.ones( (h.v_time.size(), h.n_PurkinjeCellGroup_local ) , dtype=numpy.float32 )")}
{nrnpython("time_data = numpy.array(h.v_time.to_python()) ")}
{nrnpython("allData = allData * -1")}
{nrnpython("print allData.shape")}

{nrnpython("columnsVsCellNums = {}")}

{nrnpython("columnIndex = 0")}

for cellNum=0, n_PurkinjeCellGroup-1 {
    { print "Adding data for cell number ",cellNum," in PurkinjeCellGroup on host ", hostid}
    { nrnpython("allData[:,columnIndex] = h.v_PurkinjeCellGroup_seg_Soma_v[int(h.cellNum)].to_python()")}
    {nrnpython("columnsVsCellNums[columnIndex] = int(h.cellNum)")}

    {nrnpython("columnIndex += 1")}

}

{nrnpython("print columnsVsCellNums")}

{nrnpython("group1 = h5file.createGroup('/', 'PurkinjeCellGroup', 'PurkinjeCellGroup')")}
{nrnpython("group1._v_attrs.Population = 'PurkinjeCellGroup'")}
{nrnpython("hArray = h5file.createArray(group1, 'VOLTAGE', allData, 'Values of VOLTAGE from cell group: PurkinjeCellGroup')")}
{nrnpython("hArray.setAttr('Variable', 'VOLTAGE')")}
{nrnpython("for columnIndex in columnsVsCellNums.keys(): hArray.setAttr('column_'+str(columnIndex), 'cellNum_'+ str(columnsVsCellNums[columnIndex]))")}

//  Saving VOLTAGE on only one seg, id: 0, in the only cell in SimpleCellGroup


//  Saving vector for segment: Soma(ID: 0)

print "Using HDF5 save mode: 4"
{nrnpython("allData = numpy.ones( (h.v_time.size(), h.n_SimpleCellGroup_local ) , dtype=numpy.float32 )")}
{nrnpython("time_data = numpy.array(h.v_time.to_python()) ")}
{nrnpython("allData = allData * -1")}
{nrnpython("print allData.shape")}

{nrnpython("columnsVsCellNums = {}")}

{nrnpython("columnIndex = 0")}

for cellNum=0, n_SimpleCellGroup-1 {
    { print "Adding data for cell number ",cellNum," in SimpleCellGroup on host ", hostid}
    { nrnpython("allData[:,columnIndex] = h.v_SimpleCellGroup_seg_Soma_v[int(h.cellNum)].to_python()")}
    {nrnpython("columnsVsCellNums[columnIndex] = int(h.cellNum)")}

    {nrnpython("columnIndex += 1")}

}

{nrnpython("print columnsVsCellNums")}

{nrnpython("group1 = h5file.createGroup('/', 'SimpleCellGroup', 'SimpleCellGroup')")}
{nrnpython("group1._v_attrs.Population = 'SimpleCellGroup'")}
{nrnpython("hArray = h5file.createArray(group1, 'VOLTAGE', allData, 'Values of VOLTAGE from cell group: SimpleCellGroup')")}
{nrnpython("hArray.setAttr('Variable', 'VOLTAGE')")}
{nrnpython("for columnIndex in columnsVsCellNums.keys(): hArray.setAttr('column_'+str(columnIndex), 'cellNum_'+ str(columnsVsCellNums[columnIndex]))")}

{ sprint(timeFilename, "%s%s", targetDir, "time.dat")}
{ f_time.wopen(timeFilename) }
{ v_time.printf(f_time) }
{ f_time.close() }

{savetime = stopsw()}

propsFile = new File()
strdef propsFilename
{sprint(propsFilename, "%ssimulator.props", targetDir)}
{propsFile.wopen(propsFilename)}
{propsFile.printf("#This is a list of properties generated by NEURON during the simulation run\n")}
{propsFile.printf("Host=%s\n", host)}
{propsFile.printf("RealSimulationTime=%g\n", realruntime)}
{propsFile.printf("SimulationSaveTime=%g\n", savetime)}
{propsFile.printf("SimulationSetupTime=%g\n", setuptime)}
{propsFile.printf("NEURONversion=%s\n", nrnversion())}
{propsFile.close()}

print "Data stored in ",savetime, "secs in directory: ", targetDir

{nrnpython("print 'Closing file: '+h5file.filename")}
{nrnpython("h5file.close()")}

//   This code pops up a simple Run Control

{
xpanel("RunControl", 0)
v_init = -60.0
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
t = 0
xvalue("t","t", 2 )
tstop = 100.0
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.02
 xvalue("dt","dt", 1,"setdt()", 0, 1 )
xpanel(80,80)
}

