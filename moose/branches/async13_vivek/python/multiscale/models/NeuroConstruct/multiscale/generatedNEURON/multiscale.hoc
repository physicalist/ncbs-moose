//  ******************************************************
// 
//     File generated by: neuroConstruct v1.7.0
// 
//  ******************************************************

{load_file("nrngui.hoc")}

//  Initialising stopwatch for timing setup

{startsw()}

print ""
print "*****************************************************"
print ""
print "    neuroConstruct generated NEURON simulation "
print "    for project: /home/dilawar/Work/NCBS/moose_multiscale_git_svn/neuroConstruct/multiscale/multiscale.ncx "
print ""
print "    Description: This is a simple project with a single cell placed randomly in a 3D rectangular box."
print "    "
print "    Go to tab Generate, press Generate Cell Positions and Connections, and then to visualise the results, go to tab Visualisation and press View, with Latest Generated Positions selected in the drop down box."
print "    "
print "    If NEURON or GENESIS are installed, the cell can be simulated via tab Export."
print ""
print "    Simulation Configuration: SimConfig: Default Simulation Configuration "
print "    This is the default configuration of the Cell Groups, stimulations, plots, etc for this project "
print " "
print  "*****************************************************"

strdef pwd
{system("pwd", pwd)}
print ""
print "Current working dir: ", pwd

objectvar allCells
{allCells = new List()}


//  A flag to signal simulation was generated by neuroConstruct 

{nC = 1}


//  Including neuroConstruct utilities file 

{load_file("nCtools.hoc")}

//  Including neuroConstruct cell check file 

{load_file("cellCheck.hoc")}

//  Getting hostname

objref strFuncs
{strFuncs = new StringFunctions()}
strdef host
{system("hostname", host)}
if (strFuncs.len(host)>0) {
    strFuncs.left(host, strFuncs.len(host)-1) 
} else {
    host = "????" 
}


//  Simulation running in serial mode, setting default host id

{hostid = 0}


//  Initializes random-number generator

{use_mcell_ran4(1)}

{mcell_ran4_init(1571241475)}

//////////////////////////////////////////////////////////////////////
//   Cell group 0: SampleCellGroup has cells of type: SampleCell
//////////////////////////////////////////////////////////////////////


//  Adding cell template file: SampleCell.hoc for cell group SampleCellGroup

{ load_file("SampleCell.hoc") }

//  Adding 1 cells of type SampleCell in region SampleRegion

{n_SampleCellGroup = 1}

{n_SampleCellGroup_local = 0 } // actual number created on this host

objectvar a_SampleCellGroup[n_SampleCellGroup]

proc addCell_SampleCellGroup() {
    strdef reference
    sprint(reference, "SampleCellGroup_%d", $1)
    a_SampleCellGroup[$1] = new SampleCell(reference, "SampleCell", "A Simple cell for testing purposes")
    allCells.append(a_SampleCellGroup[$1])
}

for i = 0, n_SampleCellGroup-1 {
    addCell_SampleCellGroup(i)
    n_SampleCellGroup_local = n_SampleCellGroup_local +1 

}


//  Placing these cells in a region described by: Rectangular Box from point: (0.0, 0.0, 0.0) to (100.0, 50.0, 100.0)


//  Packing has been generated by: Random: num: 1, edge: 1, overlap: 1, other overlap: 1

{a_SampleCellGroup[0].position(59.902466,37.614162,54.061)}

//////////////////////////////////////////////////////////////////////
//   Cell group 1: CellGroup_2 has cells of type: CellType_2
//////////////////////////////////////////////////////////////////////


//  Adding cell template file: CellType_2.hoc for cell group CellGroup_2

{ load_file("CellType_2.hoc") }

//  Adding 1 cells of type CellType_2 in region SampleRegion

{n_CellGroup_2 = 1}

{n_CellGroup_2_local = 0 } // actual number created on this host

objectvar a_CellGroup_2[n_CellGroup_2]

proc addCell_CellGroup_2() {
    strdef reference
    sprint(reference, "CellGroup_2_%d", $1)
    a_CellGroup_2[$1] = new CellType_2(reference, "CellType_2", "A very simplified cerebellar Granule like Cell for testing purposes only")
    allCells.append(a_CellGroup_2[$1])
}

for i = 0, n_CellGroup_2-1 {
    addCell_CellGroup_2(i)
    n_CellGroup_2_local = n_CellGroup_2_local +1 

}


//  Placing these cells in a region described by: Rectangular Box from point: (0.0, 0.0, 0.0) to (100.0, 50.0, 100.0)


//  Packing has been generated by: Random: num: 1, edge: 1, overlap: 1, other overlap: 1

{a_CellGroup_2[0].position(41.60247,5.54617,56.252583)}


//////////////////////////////////////////////////////////////////////
//   Setting initial parameters
//////////////////////////////////////////////////////////////////////

strdef simConfig
{simConfig = "Default Simulation Configuration"}
{celsius = 6.3}




proc initialiseValues0() {


//  Setting initial vals in cell group: SampleCellGroup which has 1 cells


//  Giving all cells an initial potential of: -65.0

    for i = 0, n_SampleCellGroup-1 {
        forsec a_SampleCellGroup[i].all  v = -65.0

    }


//  Setting initial vals in cell group: CellGroup_2 which has 1 cells


//  Giving all cells an initial potential of: -60.0

    for i = 0, n_CellGroup_2-1 {
        forsec a_CellGroup_2[i].all  v = -60.0

    }

}

objref fih0
{fih0 = new FInitializeHandler(0, "initialiseValues0()")}



//////////////////////////////////////////////////////////////////////
//   Adding Network Connections
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//   Adding 2 stimulation(s)
//////////////////////////////////////////////////////////////////////


//  No electrical inputs generated for: Input_0


//  No electrical inputs generated for: SampleIClamp


access SampleCell[0].Soma

//////////////////////////////////////////////////////////////////////
//   Settings for running the demo
//////////////////////////////////////////////////////////////////////


tstop = 100.0
dt = 0.02
steps_per_ms = 50.0

//////////////////////////////////////////////////////////////////////
//   Adding 0 plot(s)
//////////////////////////////////////////////////////////////////////


//   This code pops up a Shape plot of the cells

objref plotShape
plotShape = new PlotShape()
plotShape.exec_menu("Shape Plot")

fast_flush_list.append(plotShape)


//////////////////////////////////////////////////////////////////////
//   This will run a full simulation of 5001 steps when the hoc file is executed
//////////////////////////////////////////////////////////////////////


//  Recording 0 variable(s)

objref v_time
objref f_time
objref propsFile

strdef simReference
simReference = "Sim_1"



strdef simsDir
simsDir = "/home/dilawar/Work/NCBS/moose_multiscale_git_svn/neuroConstruct/multiscale/simulations/"


//  Note: to change location of the generated simulation files, just change value of targetDir
//  e.g. targetDir="" or targetDir="aSubDir/"

strdef targetDir
{ sprint(targetDir, "%s%s/", simsDir, simReference)}


//  Single simulation run...

strdef date
// Note: not showing date/time of start/stop of simulation. This requires Cygwin to be installed// which includes the "date" unix command. Install under c:\cygwin

setuptime = stopsw()

print "Setup time for simulation: ",setuptime," seconds"

print "Starting simulation of duration ",tstop,"ms, dt: ",dt,"ms, reference: ",simReference,""

{currenttime = startsw()}
//////////////////////////////////////////////////////////////////////
//   Main run statement
//////////////////////////////////////////////////////////////////////

{run()}

{realruntime = startsw() - currenttime}
print "Finished simulation in ", realruntime ,"seconds"


//   This code pops up a simple Run Control

{
xpanel("RunControl", 0)
v_init = -60.0
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
t = 0
xvalue("t","t", 2 )
tstop = 100.0
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.02
 xvalue("dt","dt", 1,"setdt()", 0, 1 )
xpanel(80,80)
}

