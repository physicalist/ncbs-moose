
//  ******************************************************
//
//     File generated by: neuroConstruct v1.7.0
//
//     Generally replicates hoc for Cell Type as exported from
//     NEURON's Cell Builder, together with some neuroConstruct
//     specific helper/info procedures, e.g. toString(), netInfo()
//
//  ******************************************************


begintemplate CellType_2

public init, topol, basic_shape, subsets, geom, memb
public synlist, x, y, z, position, connect2target


//  Some fields for referencing the cells

public reference, type, description, name
strdef reference, type, description, name


//  Some methods for referencing the cells

public toString, netInfo

public all

objref synlist
objref all
objref stringFuncs

public soma_group
objref soma_group
public axon_group
objref axon_group

proc init() {
    topol()
    subsets()
    geom()
    biophys()
    geom_nseg()
    synlist = new List()
    x = y = z = 0
    reference = $s1
    type = $s2
    description = $s3
    
    strdef indexNum
    stringFuncs = new StringFunctions()
    stringFuncs.tail(reference, "_", indexNum)
    while (stringFuncs.substr( indexNum, "_")>=0) {
        stringFuncs.tail(indexNum, "_", indexNum)
    }
    
    sprint(name, "%s", type)
}

create Soma
public Soma
create mainAxonSection
public mainAxonSection
create parallelFiberPos
public parallelFiberPos
create parallelFiberNeg
public parallelFiberNeg

proc topol() {
    connect mainAxonSection(0), Soma(0.5)
    connect parallelFiberPos(0), mainAxonSection(1.0)
    connect parallelFiberNeg(0), mainAxonSection(1.0)
    basic_shape()
}

proc basic_shape() {

//  Looking at segment number 0: Soma, section: Soma, SPHERICAL, ID: 0, ROOT SEGMENT, rad: 4.0, (0.0, 0.0, 0.0) -> (0.0, 0.0, 0.0) (FINITE VOLUME)
    Soma {pt3dclear() pt3dadd(0.0, -4.0, 0.0, 8.0) pt3dadd(0.0, 4.0, 0.0, 8.0)}

//  Looking at segment number 1: mainAxon, section: mainAxonSection, ID: 1, parent: Soma (0), FRACT ALONG: 0.5, rad: 0.6, (0.0, 0.0, 0.0) -> (0.0, 140.0, 0.0), len: 140
    mainAxonSection {pt3dclear() pt3dadd(0.0, 0.0, 0.0, 1.2) pt3dadd(0.0, 140.0, 0.0, 1.2)}

//  Looking at segment number 2: Axon_1, section: parallelFiberPos, ID: 2, parent: mainAxon (1), rad: 0.6, (0.0, 140.0, 0.0) -> (40.0, 140.0, 0.0), len: 40
    parallelFiberPos {pt3dclear() pt3dadd(0.0, 140.0, 0.0, 1.2) pt3dadd(40.0, 140.0, 0.0, 1.2)}

//  Looking at segment number 3: Axon_2, section: parallelFiberNeg, ID: 3, parent: mainAxon (1), rad: 0.6, (0.0, 140.0, 0.0) -> (-40.0, 140.0, 0.0), len: 40
    parallelFiberNeg {pt3dclear() pt3dadd(0.0, 140.0, 0.0, 1.2) pt3dadd(-40.0, 140.0, 0.0, 1.2)}

//  Looking at segment number 4: Axon_3, section: parallelFiberPos, ID: 4, parent: Axon_1 (2), rad: 0.6, (40.0, 140.0, 0.0) -> (80.0, 140.0, 0.0), len: 40
    parallelFiberPos {pt3dadd(80.0, 140.0, 0.0, 1.2)}

//  Looking at segment number 5: Axon_4, section: parallelFiberNeg, ID: 5, parent: Axon_2 (3), rad: 0.6, (-40.0, 140.0, 0.0) -> (-80.0, 140.0, 0.0), len: 40
    parallelFiberNeg {pt3dadd(-80.0, 140.0, 0.0, 1.2)}

//  Looking at segment number 6: Axon_5, section: parallelFiberPos, ID: 6, parent: Axon_3 (4), rad: 0.6, (80.0, 140.0, 0.0) -> (120.0, 140.0, 0.0), len: 40
    parallelFiberPos {pt3dadd(120.0, 140.0, 0.0, 1.2)}

//  Looking at segment number 7: Axon_6, section: parallelFiberNeg, ID: 7, parent: Axon_4 (5), rad: 0.6, (-80.0, 140.0, 0.0) -> (-120.0, 140.0, 0.0), len: 40
    parallelFiberNeg {pt3dadd(-120.0, 140.0, 0.0, 1.2)}
}

proc subsets() { local i


//  The group all is assumed never to change
    all = new SectionList()


    soma_group = new SectionList()

    Soma soma_group.append()


    axon_group = new SectionList()

    mainAxonSection axon_group.append()
    parallelFiberPos axon_group.append()
    parallelFiberNeg axon_group.append()


    Soma all.append()
    mainAxonSection all.append()
    parallelFiberPos all.append()
    parallelFiberNeg all.append()
}

proc geom() {
}

proc biophys() {
    forsec all cm = 1.0
    forsec all Ra = 30.0

}

proc geom_nseg() {
    // All sections not mentioned here have nseg = 1

}


proc position() { local i
    forsec all {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1+x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i))
        }
    }
    x = $1  y = $2  z = $3
}

proc connect2target() {   //$o1 target point process, $o2 returned NetCon


//  Using standard NetBuilder form. (Overly) simple assumption that first soma seg is trigger for AP...
//  Note: neuroConstruct does not use this func for creating connections (in serial mode!), but it can be useful when using generated files in NEURON's NetBuilder

    Soma $o2 = new NetCon(&v(1), $o1)
    print "connect2target called on ", name
}


//  This function is useful when checking what cells (aot sections) have been created. Run allcells() from nCtools.hoc...

proc toString() {
    strdef info
    sprint(info, "Cell ref: %s (%s), at: (%d, %d, %d)", reference, name, x, y, z)
    print info
}


//  This function is useful when checking network connections

proc netInfo() {
    strdef info
    sprint(info, "Cell reference: %s, type: %s", reference, type)
    print "--------  ",info
    print "    There are ", synlist.count(), " connections in ", synlist
    for i=0,synlist.count()-1 {
        print "        Connection from ", synlist.o[i].precell, " to: ", synlist.o[i].postcell
        print "        Pre:   Weight: ", synlist.o[i].weight, ", delay: ", synlist.o[i].delay, ", threshold: ", synlist.o[i].threshold 
        print "        Post:  ", synlist.o[i].syn(), ", gmax: ", synlist.o[i].syn().gmax , ", e: ", synlist.o[i].syn().e , ", rise time: ", synlist.o[i].syn().tau_rise , ", decay time: ", synlist.o[i].syn().tau_decay 
    print " "
    }
    
    
    
    print "--------  "
    print " "
}


endtemplate CellType_2

