7 Jan 2009

I have been playing around with a new messaging system, one that uses an
intermediate buffer. The big advantage of this sytem is that it should
simplify messaging in multithread and multinode systems. 

Sync messages begin to look a bit like the kinetics optimizations in 
GENESIS. 
Differing: The msg source uses 'send' to place the data in a safe buffer.
Similar: The msg dest scans list of ptrs to places in this buffer.
Similar: Will need an 'ACTION'-like mechanism for calling dest funcs from
clocks.
Possibly this will work a bit faster than existing MOOSE messaging.

Async messages are harder. Need to assemble all outgoing data on any given
thread into an expanding buffer for that thread. Data packets include src id.
These packets are transferred (issues here about selecting for targets).
On target thread, src id used to look up whatever part of the ConnTainer info
specifies the dest elements. Then the packet is delivered. Best if done through
a scan of dests, since that retains similarity with Sync messages. 

Need to introduce a mechanism for calling 'ACTIONS' directly.

=============================================================================
26 Jan 2009

send -> buffer
process -> lookup buffer
trigger -> call func. Could restrict to fixed set, or provide a func lookup 
	index. If fixed set could use virtual funcs.

Or, eliminate trigger and provide only process, proc2, and reinit.
	Would like to be able to call arb funcs.

SendBack, SendTo become harder.


Process op: well defined, clock ticked.
Proc2: ditto
Reinit: ditto.

Then: generic arrival op: Scan for op request. The memory location has
both the operation identifier and the arguments.

Or: build up scan list through messages... sounds like GENESIS.

Or: Alerting mechanism. 'SendTo' or 'SendBack' puts target id on queue

High traffic messages are scheduled.
	Synaptic input is scheduled even though it is sporadic. Total
	traffic is expected to be big.
Low traffic messages are polled by queue. When called, these are added
	to a queue for the target object.
Buffer info includes only data.
	For regular input, like conc and Vm, data only is the conc/Vm.
	For synaptic input the data includes source object info.
	For low traffic messages the data includes complete conn info, plus args
	For sendback messages like channelGates: It can be scheduled, so
		the data includes return info and the op must use this to place
		the response in the right location. Would be nice to do
		efficiently in array form.
	For field assignment: Regular low traffic
	For field readout: Data includes Id for field access object.
		This is a temporary from the command line
		It is a regular object for plots etc.


Design requirements:
- Thread safe
- Buffered data delivery for threading and for multinode operations.
- Very fast for scheduled operations, whether threaded or not.
- Connections remain fully traversible, 
- Connections remain usable bidirectionally by multiple messages.

Design desiderata
- Completely deterministic for single-thread case (consider real-time ops)

=============================================================================
30 Jan 2009
There is a problem to be sorted for any queued buffer messaging: Ensuring that
things go into the buffer without stepping on each others' toes. For
example, sending spikes. If we allocate a separate buffer per thread for
each target object, things get costly and messy. But that may be better 
than mutexes for writing into the buffer.

We expect single 'synapse' objects to manage many input axons, each connecting
with a distinct weight. Suppose 100 of these, so the convergence is up to 300.
Assume a 16-way system, we don't want to manage 16 buffers for each synapse.

Per-clock buffers: An extra step to unsort them. More info to put in to 
identify dest.

Thread-safe queue for writing: There is an extra overhead in mutex juggling
for every 'send', though the subsequent reads can be clean as they are done
on the object owning the queue. If we have per-object queues should be 
manageable.

=============================================================================
31 Jan 2009
A problem with the messaging concept: Can't put the message buf on the
target element, because the data may go to multiple targets. Instead
need the target element to manage ptr to the msg src(s) and read them.
Either that, or have src element push data into multiple target bufs.
Latter makes more sense, given that we may need to push data also into
an MPI buffer or so.
But by the same token data comes into the MPI Recv buffer and needs to
be dispersed. 
So, one way or another, the postmaster must be an active participant
in getting data in or out of the buffer.

Cost:
Pushing data:
Src needs addr for each buffer, N addrs.      Iterate N times.
Each Dest needs buffer, N * datasize.         N dests each 1 lookup.
Multhreading: No change, no need for any locks.
MPI: Push right into MPI buffer. At remote node need to do further push.
Sporadic Msgs: Push into queues of every target. No redundancy.
			: Push into a single queue, later push into target?
				No particular advantage.
Variant on Moose 1.1 approach: Target object guarantees thread-safe
	handling of incoming data... tricky. Need to put each incoming 
	arg into separate location indexed by msg src itself.

Pulling data:
Src needs single buffer, no iteration. 1 addr. No iteration.
Each dest needs addr of buffer: N* ptrsize    N dests each 1 lookup.
Multhreading: No change, no need for any locks.
MPI: Postmasters on src need to pull in data. At remote node usual pull.
Sporadic msgs: Push into a single queue, managed by msg. This
	subsequently needs to do multiple pushes anyway, unless there
	is a very high chance that each entry will be of interest to each
	receiving synapse.
	: Push into multiple queues, basically into the target object.

Seems like pulling data works better for scheduled messages.
Something like pushing needed for sporadic msgs. 
Like old GENESIS.

=============================================================================
1 Feb 2009
Now the location of the buffers.
sched data buffer
- On source object:
	+ No extra storage or management
	. Need to redirect pointers if objects are deleted or moved
	. Need to redirect pointers for zombies. But redirection needed anyway
	- Mixes message transfer with object representation.
- In a separate buffer managed by the Msg:
	+ Management relatively straightforward, set up at msg creation time.
	+ Deleting and moving objects managed along with messages.
	. Zombies could do a hack and reuse the same msg space.
	+ Separates message transfer from object representation.

async data buffers: Synaptic input.
- On dest objects:
	+ Clean synapse management.
	- Mixes message transfer with object representation.
	. Sender must scan through all dests.
	- Extra outgoing buffers.
- In multiple separate buffers managed by each of the Msgs:
	+ Again, management straightforward, set up at msg creation time.
	+ Separates message transfer from object representation.
	- Issue of additional data: weight, release prob, history, etc.
	. Many-to-many msgs have a possible economy of assignment.
	- All targets must scan through all potential sources
- Input Q on Msg, synapse-local Q on objects
	- Initial op: Get data from axon to Msg.
	- Option 1: push onto Msg Q, accumulate on Msg.
		- Thread locking needed.
		- Msg subsequently called on tick to clean input Q.
		- This could be a rare call if syn delay is large.
		- Now it shuffles data into synapse-specific Q.
			- Depending on update rate and convergence onto syn,
				this could be a single entry Q.
			- Multi-thread op here too, but very local.
		- This synapse-specific Q could also be the sorted event Q
		- Object scans base of event Q each timestep.
		- Note that we cannot do event queueing on the incoming
			APs, because of different delays to target.
	- Option 2: Immediately sort onto target synapse Qs.
		- Thread locking needed.
		- This op has to immediately do the shuffling into 
			synapse-specific Q, since otherwise full scan needed.
		- This synapse-specific Q could also be the sorted event Q
		- Object scans base of event Q each timestep.
	- When object pops event Q, it has to locate syn wt, prob, history, etc.
		- Option 1: Msg carries this info.
			+ These are features of projection pattern
			- Need to template whole Syn Msg structure
			+ Projection could compute on fly.
		- Option 2: Target obj carries this info
			+ Local calculations easier. Postsyn compt history too.
			+ No templating needed.
			- Need index in msg for target obj to look up info.

async data buffers: Sporadic input.
- On Dest objects:
	+ Clean data management
	- Need to send out to all targets (But # likely small )
	- Mixes message transfer with object representation
- On Src objects
	+ Single point of assignment
	- All targets must scan through all potential sources
	- Possible economy of assignment.
- On buffers managed by each Msg:
	- All targets must scan through all potential sources
	- Possible economy of assignment.

Seems like the best bet is to have Msgs manage the sync buffers.
The clinching point is that about separation of message data transfer
from objects.
(Added 15 Feb: Another issue overrides this, for async messages: data flow
should be unidirectional, that is, messages cannot be changed by their targets.
This would happen if the spikeQ was on the message rather than the target.)

Implemented a first pass test simulation using reacs and mols. Hard coded
in buffer info. Works. Helps set up requirements for messaging.

In this variant, the Element manages a vector< double* > that points to
the data buffers, and this in turn is referenced by a vector< unsigned int >
which converts the slots into the correct buffer location. The Element
provides some helper functions for doing individual msg data (double) lookup,
and others for taking sums and products of sequences: such ops are common.


Next:
	* Get svn working for this.
	+ Implement sporadic messages for field access
	+ Implement something that uses synaptic messages
	- Implement message setup framework
	- Implement field set/get
	- Array elements and messages
	- Scheduling
	- Multithreading
	- MPI
	- Implement distribution of elements (entries) on threads and nodes.
	- Benchmarking

=============================================================================
2 Feb 2009
Svn now working, the path is
https://moose.svn.sourceforge.net/svnroot/moose/moose/branches/Msg

For sporadic messages:
- Use indexing equivalent to Finfo definitions.
- Use a template for an adaptor function from char* args to the class-specific
	func. The adaptor func can also do the typecasting for the class itself.

Need also a queue for synaptic input. Scan on sched, but variable # of entries.
=============================================================================
8 Feb 2009
For async messages, no point in defining a specific class for the 
data packets. There will always be a FuncId but after that no telling 
what args to take.

Implemented a first simple pass at async messages for field access.
Checked in as revision 1009.

Trying to template it out. No luck.
=============================================================================
10 Feb 2009
After some more template contortions, it works. I'm not sure if this beast
will compile on other systems, though.
Checked in as revision 1010.

Siji tested it on Windows. Somewhat to my surprise, it works there too. Mac
is OK too.

=============================================================================
12 Feb 2009

First pass design for synaptic messaging, based on above description 
dated Feb 1 (though it has been updated since).

Upon tick at src:
src -> Msg -> scan through list of targets -> (threadlock) target-specific Q
Msg contains all the synaptic info, including weight, delay etc.
Msg also manages a Q for each target synapse object.

Upon tick at target synapse: Query Msg Q. Collect all data if event arrived.

=============================================================================
15 Feb 2009

Question: Should the Msg be const?
	- Gets messy with bidirectional data flow in plastic synapses.
		If we keep Msg const, then there are separate synaptic state
		variables needed on the target.
		If we allow it to vary, then the target has to write to Msg.
	- The synapse Q itself involves bidirectional data flow. Even if the
		Msg manages the pushing internally, the object has to tell it
		to pop. Not good.
	- These are issues with bidirectional data flow. However, it does
		not mean that Msgs have to be constant objects. For example,
		we could still have a projection as an object with regular
		Msg and other inputs, which could change during the
		simulation. But it would also adhere to the rule that it
		gets input from msgs, but does not affect the msgs.
Summary: 
	- Q cannot be on Msg.
	- A Msg is const from viewpoint of target: Unidirectional data flow.
	- A Msg can however be a normal variable element with a clock tick,
		and other incoming msgs.

Accessing Msg info:
	- A Msg is an edge between individual src and dest entries in arrays.
		Either src or dest entry can access through independent indices.
	- A Msg is also an edge between the array containers. Likewise.
	- A Msg may (should?) be an accessible object with fields. Name
		could be msg field name.
		setfield /foo/axon/projection[] delay 1e-3
		setfield /bar/GluR/incoming[23] weight 5
		showfield /bar/GluR/incoming[]/src
		showfield /foo/axon/projection[][dest=/bar/#/incoming] weight



Data structures for synapses:

* Fix up tests so they use assertions, not printouts
* Check in. Currently at revision 1012.
- Start setting up synapses.
	I have a skeleton in place now, in the uncompiled files
	Send.cpp, Msg.h. There are still-to-be-fixed changes to
	Element.h and Data.h to let us access Data::pushQ and
	to have indices into multiple data entries within Element.
	The threading stuff has to be dealt with at the Element.cpp
	level to lock out attempts to push onto the same Data.


A preliminary design for Elements and messages:
- All elements are array elements. 
	- The Data* d_ becomes a vector.
	- procBuf remains as is, but its range is looked up using
		indexing for element index.
- Conns are all many2many or equivalent all-to-all variants.
	- They all connect one element (the whole array) to another.
	- Typical sparse matrix implementation
	- Usually traversed only for async (spike) messages, so 
		bidrectional traversal is rare.
	- Element manages vector of vector of Conn*. 
		- First index for slot
		- Second index for various other targets.

=============================================================================
16 Feb 2009
Implemented a first pass at the framework for a lot of this stuff.
Compiles. Not in the test. 
Checked in. Currently at revision 1018.

=============================================================================
17 Feb 2009
First test for IntFire: directly insert synaptic events into its queue.
Confirmed that it responds correctly. Generates another time-series output,
need to set up to handle assertions.
Checked in as revision 1019.

Set up above test to use assertions rather than printout.
Checked in as revision 1020.

Implemented a recurrent spiking loop using messaging. Seems to work fine.
Checked in as revision 1021.

Next:
Attach sync messages also to the Msg data structure. Key issue is who
owns and manages the buffer. This has been discussed above on 1 Feb.
- Msg: Favoured because it separates data transfer from object,
	However it mixes data transfer with connectivity specification.
- (originating) Element: This also separates data transfer, easier to manage.
- Object: This has been ruled out.

Managing connection info in messages:
	- Can extract ptr info from the finfo + message, use to fill ptr bufs
		for sync messages
	- Message slots predefined only for small set invoked by Process or
		initPhase. Rest go via a map to look up entry in MsgVec.

Field assignment
	- Set inserts a request into the queue.
	- Get either needs formation of a temporary message...
		or: Inserts a request with additional info to tell where to
		send data back to?
=============================================================================
18 Feb 2009
How do we set up the locations to use in the data buffer?
The object knows ahead of time exactly what it has to place during
process and other calls. This is built into the Finfo for the msg
source. So at element creation time we can build the send buffer.
The only time this will change is if the element is resized or deleted.

=============================================================================
19 Feb 2009

Reconfigured Element to use vector of Data ptrs.
Some patching later, it compiles and runs again.

Next: Begin to set up the benchmarks for sync and async messaging.
	Look at memory and speed scaling as we do so.
	- run reac system with 1 to 1e8 Data entries
		- Ordered messages
		- Sparse matrix messages
		- Many individual elements.
	- run spiking system ditto.

Gear up with this for testing with multi-threading.

=============================================================================
20 Feb 2009

Checked in as revision 1023

Setting up a main.cpp::testSyncArray( unsigned int size ) function to
build a reaction model with a big test array for a reaction scheme

=============================================================================
21 Feb 2009
Compiled testSyncArray: OK. Ran it: Failed.

=============================================================================
22 Feb 2009.
Checked in as revision 1032.

Got the testSyncArray stuff to work. Did a little profiling. Spends
about 25% of its time in Element::sumBuf. 
Here are the timings of a single A <===> B reaction on this 1.4Ghz machine
(Lenovo X301), using O3:
syncArray10     ops=100000      time=0.057695
syncArray100    ops=1e+06       time=0.313191
syncArray1000   ops=1e+07       time=3.13012
syncArray10000  ops=1e+08       time=31.7042

Takes about 4 times longer with debugging and no optimization:
syncArray10     ops=100000      time=0.170935
syncArray100    ops=1e+06       time=1.18491
syncArray1000   ops=1e+07       time=11.4804
syncArray10000  ops=1e+08       time=115.368

For reference, genesis does:
completed 1000001 steps in 39.670479 cpu seconds 
(for spine_v59.g, which is a model with 104 mols, 55 reacs and 76 enz).
This is about 2e8 ops, so genesis is almost 2x faster. Amazing. This new 
messaging was supposed to go much faster.

Checked in as revision 1033.
Decide whether further optimization comes first, or the threading.

Did some minor tweaking to use const iterators. This gives about 
3% improvement, useful, but not too exciting.
Checked in as revision 1034.

Implemented skeleton code for threads: creates and joins threads only.
Compiles, runs.
Checked in as revision 1040.

For threading:
- simplest approach, probably not practical:
	Launch a thread for each processor on each clock tick.
	Thread computes process for subset of entries.
	Join threads after clock tick.
	Problem is that thread launches and joins are not cheap.
- Condition approach, trickier but maybe faster:
	Launch threads for each processor when calculations starts.
	Thread runs independent scheduling.
	At end of each tick:
	mutex to increment count # of threads completed.
		If all threads done
			signals to master thread/all other threads
		else
			cond_wait for count
	close mutex
	go on to next tick.
- pthread_barriers
	This is probably the cleanest. 
	Launch threads for each processor when calculations starts.
	Thread runs independent scheduling.
	At end of each tick, put a barrier.
	Problem is that pthread barriers are reported to be very slow.
	Let's see.
- busy-loop barriers
	Same as above, only don't use pthreads barriers. Instead do a
	mutex-protected increment of # of threads completed,
	close mutex
	and do a busy-loop barrier on the # of threads completed.
	
Working on pthread_barrier based implementation.

Well, it looks like it works. The thread advantage isn't huge on my
2-core laptop:
syncArray10     ops=100000      time=0.056823
syncArray100    ops=1000000     time=0.311645
syncArray1000   ops=10000000    time=3.16343
syncArray10000  ops=100000000   time=31.2464
Main: creating 2 threads
syncArray10     ops=100000      time=0.25066
syncArray100    ops=1000000     time=0.524708
syncArray1000   ops=10000000    time=2.19136
syncArray10000  ops=100000000   time=19.7902
Main: creating 4 threads
syncArray10     ops=100000      time=0.755361
syncArray100    ops=1000000     time=0.970983
syncArray1000   ops=10000000    time=2.61468
syncArray10000  ops=100000000   time=22.7247

However, I need to do a lot more testing, including confirming that it
gives the right answers. Do the current calculations go across threads?

Also I need to check if the 4-core opteron nodes do better.
Checked in as revision 1048.

Did check that calculations give the right answers.
Checked in as revision 1049.

=============================================================================
24 Feb 2009
Ran on 4-CPU opteron (2 chips x 2 cores each). 
Original( 1 thread ):
syncArray10     ops=100000      time=0.02312
syncArray100    ops=1000000     time=0.308771
syncArray1000   ops=10000000    time=3.13899
syncArray10000  ops=100000000   time=32.1735

Main: creating 2 threads
syncArray10     ops=100000      time=0.111654
syncArray100    ops=1000000     time=0.26688
syncArray1000   ops=10000000    time=1.77432
syncArray10000  ops=100000000   time=17.8221

Main: creating 4 threads
syncArray10     ops=100000      time=0.363325
syncArray100    ops=1000000     time=0.522495
syncArray1000   ops=10000000    time=2.02002
syncArray10000  ops=100000000   time=9.49299

Well, that is interesting. it goes 1.8x faster on 2 cores, and 3.4x faster on 
4 cores. Not linear scaling, but not bad either. But this is only effective
for large arrays. The barrier overhead looks pretty bad.
Successive runs on the same node cause marked improvements in single-node
performance, but not as steep for threading. For example, three runs later
we have:

1 thread:
syncArray10     ops=100000      time=0.023302
syncArray100    ops=1000000     time=0.274423
syncArray1000   ops=10000000    time=2.51467
syncArray10000  ops=100000000   time=27.6373

Main: creating 2 threads
syncArray10     ops=100000      time=0.141666
syncArray100    ops=1000000     time=0.263635
syncArray1000   ops=10000000    time=1.71346
syncArray10000  ops=100000000   time=17.0478

Main: creating 4 threads
syncArray10     ops=100000      time=0.315527
syncArray100    ops=1000000     time=0.420413
syncArray1000   ops=10000000    time=1.25926
syncArray10000  ops=100000000   time=9.42896


Trying now my own implementation of barriers. I would have liked to try it
on gj, but time to go and still debugging. 
Here is the status:
c0 thread=0, cycle = 0counter = 1
c1 Main: waiting for threads
thread=1, cycle = 1counter = 0
thread=1, cycle = 1counter = 1

Implies that we've gone through the barrier withough letting thread 0 do so.

Here is more info:
c0 thread=0, cycle = 0, counter = 1, tc[0] = 0, tc[1] = 0
c1 thread=1, cycle = 1, counter = 0, tc[0] = 0, tc[1] = 0
thread=1, cycle = 1, counter = 1, tc[0] = 0, tc[1] = 1

I fixed this by making the 'cycle' variable a volatile. But, at least on my
laptop, there is not much improvement:

1 thread:
syncArray10     ops=100000     		time=0.055594	0.0575	0.056	0.057
syncArray100    ops=1000000    		time=0.311743	0.3118	0.303	0.322
syncArray1000   ops=10000000   		time=3.07243	3.147	3.09	3.11
syncArray10000  ops=100000000  		time=31.0668	31.4	30.8	30.9
Main: creating 2 threads, pthreads barrier
syncArray10 	ops=100000      	time=0.241881	0.8	0.82	0.505
syncArray100        ops=1000000     	time=0.606399	0.57	0.78	0.66
syncArray1000       ops=10000000    	time=2.12019	2.03	2.51	2.06
syncArray10000      ops=100000000   	time=18.5136	18.2	19.5	18.1

Main: creating 2 threads, my barrier:
syncArray10 	ops=100000     		time=0.053082	0.032	0.07	0.08
syncArray100        ops=1000000     	time=0.294042	0.18	0.21	0.23
syncArray1000       ops=10000000    	time=1.85085	1.77	2.0	1.76
syncArray10000      ops=100000000   	time=18.137	17.6	19.5	17.5

more seriously, it fails if # threads > # processors. Why?
Tried making counter also volatile. Doesn't help.

One good thing is that MyBarrier seems to have much less overhead: its
speedup is respectable and consistent even for 100 entries in the array.
Based on the single-thread timings for 10 entries, I estimate it costs
around 0.05 sec / 10K ~ 5 usec per invocation on my laptop. The 
pthreads barrier is around 0.8 sec / 10K = 80 usec.

Let's see how it scales on the cluster nodes.

Well, that was entertaining. Two things to try:
- multithreading on the main MOOSE kinetic solver
	Looked at it. Should work reasonably well for bigger models with
	>100 molecules. But I'll have to write my own RK5 solver for multi
	threading because the GSL one has a monolithic driver for the 
	calculations that could be split between threads.
- contine with implementation for the synaptic input queue code.
	Looked at it. A major issue turned up: the 'process' call
	manipulates both target and source spike queues. The 'sendSpike'
	function after much indirection pushes the spike info onto all 
	target queues. The 'process' function examines and pops the local
	queue. I need to modify this so that the push and test/pop are on
	different clock ticks. This may well happen in more realistic
	neuron models. Here I can separate the harvesting of the spikes
	onto a different tick than the testing and sending spike msgs.
	With this fixed, I need to protect the spike msg handling.
	Mutexes are a blunt instrument here, because they protect code
	rather than individual data structures. Ideally I want only to
	protect the buffer(s) I am working on.
	I've suggested an approach to this in the Element::addSpike 
	function:
		// mutex lock
		// Check if index is busy: bool vector
		// Flag index as busy
		// release mutex
		// do stuff
		// ?unflag index
		// Carry merrily on.
	but this has many loose ends.


=============================================================================
25 Feb 2009
Checking it in so that I can run the tests on gj.
Checked in as revision 1055.
Oops, forgot to add MyBarrier.h
Checked in as revision 1056.
Now to run on gj.

One thread
syncArray10     ops=100000      time=0.023068	0.023	0.023	0.023
syncArray100    ops=1000000     time=0.235919	0.236	0.236	0.301
syncArray1000   ops=10000000    time=2.75227	2.46	2.61	2.52
syncArray10000  ops=100000000   time=32.2201	30.52	32.6	31.7
syncArray10000  ops=1e9		  				278.7

Main: creating 2 threads, pthreads barrier
syncArray10 ops=100000      time=0.123591	0.115	0.107	0.134
syncArray100    ops=1000000     time=0.330623	0.285	0.304	0.272
syncArray1000   ops=10000000    time=1.55576	1.74	1.727	1.76
syncArray10000  ops=100000000   time=15.2927	16.74	15.6	15.8
syncArray10000  ops=1e9	 					163.4

Main: creating 4 threads, pthreads barrier
syncArray10     ops=100000      time=0.309986	0.357	0.336	0.34
syncArray100    ops=1000000     time=0.521644	0.508	0.486	0.48
syncArray1000   ops=10000000    time=0.985141	1.842	0.989	1.38
syncArray10000  ops=100000000   time=8.70518	10.48	11.6	7.64
syncArray10000  ops=1e9						117

Main: creating 2 threads: MyBarrier
syncArray10 ops=100000      time=0.040132	0.043	0.040	0.042
syncArray100    ops=1000000     time=0.178236	0.179	0.178	0.194
syncArray1000   ops=10000000    time=1.63492	1.611	1.623	1.68
syncArray10000  ops=100000000   time=15.7017	16.7	16.6	16.4
syncArray10000  ops=1e9 					179

Main: creating 4 threads: MyBarrier
syncArray10     ops=100000      time=0.089063	0.249	0.076	0.132
syncArray100    ops=1000000     time=0.125938	0.130	0.139	0.161
syncArray1000   ops=10000000    time=0.835574	0.86	0.848	0.900
syncArray10000  ops=100000000   time=7.48444	8.17	8.33	8.31
syncArray10000  ops=1e9						114

Summary:
- MyBarrier works for 4 threads works on gj.
- The speedup is reasonable except for 10 entries in the array. 
- We're over 3.9 fold speedup on average, with MyBarrier on 4 nodes for
	10K entries. But for 1K entries and less the speedup is much smaller,
	possibly here we have cache considerations. This is confirmed by the
	last run with 100K entries. It goes very slowly here, less than 
	3x speedup, possibly because of cache contention? Perhaps it would
	work better to interleave the calculations of different threads,
	rather than to do them in separate blocks.

=============================================================================
19-20 Sep 2009
Dimensions of problem:
	Class management
		Initialization
	Element management
		Elements handle data struct management.
		Erefs do the ops that need index info.
		Elements in arrays: Already by default. Distribute over nodes
			Nested arrays: multiple child elements vs. clever lookup
		Field management: Extended fields? Child data as fields?
	Message management
		Definition at static init: sync for buf, async if hard-coded
		Creation, Deletion: Op on Msg, but sync needs extra work.
		Shared messages: Incorporated into piggybacking: below.
		Traversal
			Field access via messages
			Piggybacking onto messages
				Msg and func are just arguments to send().
			Using messages to scan for targets
			Open-ended messages? Floating messages: not on elms?
			Wildcards as message lists? On floating messages?
				+++Concept merging for connection maps.
				Must store original wildcard path in Msg.
			Iterating through messages and their targets
				Piggyback with returns instead of explicit iter
				Do we have to give return func an id? Nodes?
	Message use
		Process: Centrally called for computation. Also does ClearQ.
		ClearQ: Centrally called all the time.
		Sync: process->src->Data->buffer; process->dest->scan buffers.
		Async: send( Msg, func, args)->buffer; ClearQ->Elm->scan buffer.
		Do we separate spikes from other async (queued) msgs? No.
			Currently Data manages spike Q. Element will clear in
			Process/ClearQ.
		Passing arrays and other masses of data: Ptrs transform to mass
		Return messages?: Temp Msg made from Id of src.
		Functions and their ids: Sync across nodes. Expand dynamic? Bad.
		Would like to access Msg fields, specially dest list, like a
			wildcard. So make msg accessible like an object?
	Parallel stuff
		Threads: Element or index splits? Very sim dependent.
		MPI: Again, need sim manager to decide how to split.
		Object Id management: Master node hands out.
		Moving objects between nodes: Field-based expansion.
		Splitting Elements between nodes: Field-based expansion
	Simulation management
		Scheduling: Msgs from ticks, Special traverse func to call Proc.
		Solvers and objects: Take over Process. Element remaps FuncIds
			during clearQ. Replace Data with forwarding zombie obj.
		Solvers to each other: Messaging.
		Relation of objects to shell: As now.
		Relation of shell to parser: As now.
	Project management
		Unit tests: cxxunit or boost? Develop basecode using UTs
		Expectations for assertions:
		Expectations for documentation: Doxygen.

.............................................................................

I think I have a picture now of most of this framework. Now to design an
implmentation and testing process. Options:
1. Replace current Msg implementation with updated version.
	+ Will get rapidly to test key parts
	+ Smaller, more testable system.
	- Hands tied on heavier testing
2. Go into main MOOSE and begin replacement.
	- Horrible mess. Need to replace basecode part anyway.
	- Too tied into older forms.
	+ Get started on production use
3. Rebuild entire basecode with this design, plan to bolt old MOOSE computation
	modules on top
	+ Good idea for eventual upgrade.
	- Too much stuff to set up before serious testing on parallel stuff
	can begin.
	
Will go with option 1. the current revision is 1056.
Stages
	- Set up standalone Send for async.
		- Fix up Msg data structs to include original wildcard info.

=============================================================================

21 Sep
After some muddling, seems like the place to start is field access
(set/get) using messages. For context, assume that the operation is being
done between nodes. This forces the operation to be done in a general way.

set: Doesn't care about source, so current arrangement is fine. Here all the
	buffer needs to store is the field identity (given by funcId) and value.
get: Needs to specify source. Rather than use Id to do so, let's identify
	it by a message, since there may already be one used for repeat access.
	So we pass in the request to use the message in the access itself.
	This implies that even a transient message needs to register with the
	target Element. Should not be too hard now that we don't require
	argument checking. Messages will need to carry an Id identifying them
	on the src/dest. Otherwise we would have to put the entire Message info
	into the buffer.

	get(Id)->create temp object->locate target node->create temp message
	through to target Id->send data on temp message->target object gets
	message-> puts data onto message->back through postmaster->to 
	originating object->used in script->destroy temp object->destroy msg.

	Almost identical for single node

	This would work with little change for wildcards onto multiple nodes.
	Alternate approach is to ask the Shells to do this locally, and then
	transmit their data back to the originating shell.
	If I did not have to do the messaging, this would take somewhat less
	effort. However, if the messaging is standardized it would take less
	coding.
	
Things to do to get this to work:
Phase 1: Single node messaging
	- Code up MsgSet
	- Implement add and drop for msg.
	- Implement Cinfo that knows # and role of slots : predefined Msgs.
	- Implement scheduling and clearQ
	- Implement Finfo stuff to handle set/get functions.
	- Implement some set/get functions
	- Test above, and valgrind
	- Implement with wildcards: multiple targets.
	- Implement for tables, with predefined Msgs.
	- Implement delete of one of the msg ends.

Phase 2: Multinode messaging
	- Implement cross-node data transfer with hardcoded messages.
	- Implement cross-node message setup. Add, drop, valgrind.
	- Test single field access
	- Test massive tangled data flow.
	

Working from the middle out. Trying to implement a set/get function using
this supposedly clean approach. Current issue: Suppose we have a many->one
projection, e.g., to a channel lookup table. The get function needs to go
back to the originating object.
=============================================================================
22 Sep 2009
Finally some implementation. Goal is to figure out how to specify a single
object for a return message. Need to do the regular messaging first.
The current idea is to have the target Element itself do the final iteration
among target indices. This means that each buffer entry has the function,
its arguments, and a range of indices to which these are applied.
Efficient because the function and arguments are generated only once, saving
both space and time. The key thing is that the range of target object indices
is supplied for now by the Msg.

As far as value return is concerned, we want to tell the system to ignore
what the Msg says, and return the value only to the originating Element index.

=============================================================================
23 Sep 2009
Slowly taking shape. I need to factor in the presence of proxy elements. These
will be pretty real in the case of elements whose objects are distributed.
They may be virtual for elements that only represent their off-node actual
data. I don't know about even having proxy elements for ones that have neither
data nor any messages to the local node.

Looking into using streams to put values into the buffer, rather than the
ugly typecasts currently in use. Two things to do here:
- See how to attach streams to existing char buffers.
- Benchmark it to see if it is as fast as custom typecasting

Tried to do the stream stuff. Total pain.  Forget it for now.

Looking at messages coming to MultiNodeElement and MultiThreadElement
(the combination of the two will be worse).

Unless we precalculate the remapping, things will be hideous. We need to
work out how the range of the message splits up onto different threads or
nodes. So we need to go through all message entries (one range) and 
partition according to the local and remote ranges. At the message level,
this precalculation should result in formation of distinct sets of Ranges,
one per target node or thread.

=============================================================================
24 Sep 2009

Analysis continues. Hamstrung by lack of experience with prior implementations.
Here we have a design decision about when to expand the Range:
- During the final iteration on the target Element. The queue just stores an
	identifier for this message, and the index of the originating object.
- When we put the message on the queue. This means that the queue doesn't
	know about the message: a problem with returns. It will also put a
	lot of stuff repeatedly on the queue.

Seems clear we expand the Range only during final iteration. This means we
need to refer to the Msg on the target element by some Id.

So, another decision: Organizing Msgs. We have a 2-level organization: one is
for individual Msgs, which are maps between entries on single Elements. The
other is for conceptual connections, which are groups of Msgs and also store
the original constructor/wildcard strings for higher-level analysis. Options:
- Make a Connection class for the concepts, which manage Msgs internally.
	- Problem with identifying Msgs in the queue. We would like to do a
	single index lookup to find the Msg, rather than have to look up
	connection then Msg.
	- Problem is that the Conn index may change during setup, if there
	ever are any message deletes.

- Have a vector of Msgs, and a separate vector of Connections. Each Connection
	points to a group of Msgs.
	- Problem is that the Msg index may change during setup, if there
	ever are any message deletes.

After some pen/paper scribbling, it looks like I actually should set up a
3-layer structure:

Msg: Lowest, most specific. From single src Element to single dest Element,
	manages arbitrary indices. Implement as virtual base class with many
	subclasses for different cases of connection patterns. Stored as
	pointers. Shared between src and dest. 

Connection: Next level up. All targets from a single src Element, including
	a vector of Msgs. Equivalently, all srcs into a single Dest.
	Called by Send operation. Includes Func information.
	Also used in Wildcards. Can store original
	Wildcard info. Overlapping but not equivalent on src and dest.

Map: Highest, most general. All the conceptually related interconnections
	between groups of elements. What the GENESIS createmap command would
	build. Stores arrays of src and dest connections. Also stores the
	creation command and parameters in high-level form. Is itself an
	Element, and in due course will have
	capabilities to manipulate the Connections that are its fields.

=============================================================================
25 Sep 2009
Worked through control flow for different aspects of messaging by writing
function sequences. Mostly there, but need to figure out two related things:
- How to deal with specific info lookup for synapses
	This is simple enough. Use the target indices. Have a separate
	target index for each synapse, so that there is only one input coming
	into each. Local info solved.
- How to return data to caller, i.e., SendTo a specific target.
	The s->sendTo function does it by going straight to Element::addToQ.

=============================================================================
27 Sep 2009.
Starting re-implementation with Element. Did svn update to revision 1345.
=============================================================================
28 Sep 2009.
Compiled first pass skeleton version. Many things to do:
- Sort out FuncId stuff and how Slots are to set them up when messages are 
	added.
* Form of OpFunc: I think the size of args should be passed in, not worked
	out in OpFunc. Needed, for example, for off-node stuff.
	Fixed with creation of Qinfo.

- Handle creation of Elements and associated data
- Set up unit tests.

=============================================================================
29 Sep 2009.
FuncId stuff.
Option 1: Unique FuncId for every func. 
	- Simple and consistent.
Option 2: FuncId is semi-unique. Derived classes share FuncIds with their
	parent classes, for overridden functions.
	- We will have to maintain two sets of records: One for each unique
		OpFunc, and another for OpFuncs grouped by class FuncIds.
	- This helps with many inherited functions, such as reinit
	- This helps with zombie functions, which have to transparently replace
		the originals.
	- Helps with Slot/Conn design, since we lessen need to do separate
		Slots for multiple targets.
	Further options:
		- Use function name to determine overlap. Don't bother about
		inheritance, but do carry out RTTI checks during setup to
		ensure that the arguments match. Do not permit overlap without
		this.
			- This effectively sets up global functions.
		- Use function name plus inheritance to determine overlap.
		Do RTTI checks.
			- No globals, but will need to be careful about
			ensuring inheritance where we need it. E.g., reinit.


Trying to compile. Relevant file is Cinfo.h
=============================================================================
30 Sep 2009
Working on Ftype2.h. Also need to fix up OpFuncs and Ftype.h
Created a Dinfo class, to handle information and utility functions for the
Data type.
Struggling with Cinfo::create function. look in Neutral.h

Got it together, compiled.  Checked in as revision 1352

Next: 
	create a neutral *
	do some 'send' tests.
		Began with explict call to stuff data into buffer.

=============================================================================
2 Oct 2009
Working on most basic tests.
I'm now at the point where func requests have gone into the buffer, and the
element is doing clearQ. The execFunc fails because at this point I have no
Msgs on the Element, which is needed to farm out the function calls.
Examining how to handle sendTo calls here. Needed for table lookup like calls.
We need a way of specifying one target Data index in the Element.
Options:
	- Encode index also in Qinfo. Could make FuncId and MsgId shorts,
	and have a full uint for Data index.
		- Wasteful, as use of sendTo is very limited.
			- Table lookups
			- Solver controlling slaves.
		- Will need special messages too, since we need to encode
			the special request into the Qinfo.
	- Encode it as a flag on one bit of the msgid, using the rest of the 
		msgid as the data index. Use Msg # 0 as a
		special one which looks up this one index for its exec call.
		- Really ugly.
	- Ignore for now.
	- Encode SendBacks as an Element-level consolidation either way
		into vectors.
	- Encode SendBacks as individual Msgs.
	- Define special SendBack Msgs that read extra info in args.
	- Use sync msgs for this sort of thing.
The conclusion of all this is that if I need a SendBack capable message, I
have to set up a special msg.

There is a good bit of cleanup needed for the buffers, both for safety
and efficiency.
Safety:
	- Should do as a vector, with expansion as needed
Efficiency:
	- Align on ints or doubles?
	- Use sensible sizes for fields in Qinfo.
	- Map data directly to lookup structures like Qinfo, rather than
		doing a copy.
	
Got it together, compiled.  Checked in as revision 1353

One clarification: We have to pass in the SrcIndex for every call: many of the 
Msgs use it. For example, the OneToOne and the SparseMsg both use it to look
up targets. So Qinfo needs another field.

Also it is desirable that we should be able to use SendTo with regular
messages. Perhaps the added field for the SrcIndex in Qinfo can be used for
this?
Instead I think the data buffer should be used for the return index. Let's
have it so that if needed one can always write an OpFunc that can see the
src MsgId and src index (which together let us figure out the source Element).
These are there in the args, it is just a case of using the additional 
fields in Element::execFunc, or passing in a reference to Qinfo.
What remains is a way to tell the Msgs to use the extra index in the
args to determine the target of SendTo. Best to use the regular OpFuncs,
so this means that the Msgs also juggle the args.

Implemented it, tested the second part of it by stuffing the queue directly
and then calling clearQ. That part works.
Checked in as revision 1356

Next: 
- Get the 'send' part to work
- Do a valgrind cleanup. 
	- Figure out how to delete the data part cleanly.
	- Msg deletion cleanup.
	- Serious tests for memory leaks, lots of deletes and creates.
- Sort out message setup including type safety 
- Utility function (using messages) to 'get' field values.
- Heavy traffic tests
- Sync messages
- Start to play with nodes and threads.
- Optimization: buffer alignment, clean up management, use in-place rather than
	copy.

=============================================================================
3 Oct 2009
Before going into the above, doing a cleanup of memory allocation. 
Valgrind helped track things down.
Checked in as revision 1360: Major stuff cleaned.

Another round of cleaning up, this time mostly stuff from class initialization.
Now I have it so Valgrind is completely happy.
Checked in as revision 1361.

Implemented the 'send' operation using a hand-crafted Slot object. 
Ran through it with valgrind, good first pass.
Checked in as revision 1362.

=============================================================================
4 Oct 2009.
Look at message setup.
I've had a big simplification by separating the functions from the Msg.
For the existing MOOSE messaging concept, though, the idea is that in Process
or in response to a function call, an object should send data on a Message
specifically set up for the purpose. Using this message, the object calls
specific target functions whose type is predefined, and whose identity 
is set up at the same time as the messages themselves.

There is no room for slop: precisely the right # and type of target functions
must be known.

In the present design, the Slot does the job of tying Msg to function.
At compile time we know what the Slot type is for all slots we can use.
At Element creation time we can create predefined Slots for fast function calls.
	Has to be then, since we want to hardcode Slot identity into
	e.g. process functions.
At Message setup time we can attach a ConnId and a FuncId to these slots.

At compile time we know the ConnId for all precompiled Msgs.

Instead of a separate Slot class, let's use SrcFinfos for the slots. 
All SrcFinfos sharing a common Conn (Shared messages) just store the
index to this Conn.
The SrcFinfos/Slots do NOT store the FuncId, since they are static and the 
FuncId is defined at setup time or even runtime. Instead they index a vector of
FuncIds somewhere. This will be a fixed (statically defined) index, so we
know the starting size of the vector. Options:
	- On the Conn:
		- Should keep Conn just for the connection info
		- Clean association of Funcs with appropriate Conn
	- As a separate vector on the Element
		- A bit more economical, as it is a single vector for all the funcs.

Note that run-time defined Slots could either directly hold the FuncId, or
do this index stuff.
Note that in this design we do not need to have anything special for the
destinations in shared messages. The correct types have to exist, is all.

In many cases the shared messages had MsgSrc on both sides. Often these 
were for send-back situations. Also for bidirectional data such as 
reaction-Molecule data transfer. Options:
- Ignore this. Go back to GENESIS style where two messages had to be set up.
- Implement as a higher level op, that results in two distinct messages
	being formed, one each way, 
	- Can we put both on the same Msg?
		- This has some restrictions on there being matching conns.
		- Really only a minor matter for the msg creation func to handle
		- As at present, it could be symmetric or asymmetric.
- Try to do as a single conceptual Msg.
		- Don't see how it would work.

=============================================================================
8 Oct 2009
Target elements should decide which func to use for a given message?

Issue is having multiple possible target funcs from same SrcFinfo
e.g., mol conc going to plot, to MM enzyme and to channel.
Possible implementations:
Category 1: SrcFinfo has static-init defined conn Id and FuncIndex.
	Option 1:
		- connId looks up entry on Element::vector<Conn>
		- FuncIndex looks up entry on Element::vector<FuncId>
		- Conn marches through Msgs, using same FuncId for all.
		- Target finds OpFunc from FuncId using Cinfo::funcs_[FuncId]
		Issues:
		- Can't handle multiple kinds of target funcs, only derived.
	Option 2:
		- connId looks up entry on Element::vector<Conn>
		- FuncIndex looks up entry on Conn::vector<FuncId>
		- Conn marches through Msgs, using same FuncId for all.
		- Conn is a linked list, and next conn has next FuncId.
		- Target finds OpFunc from FuncId using Cinfo::funcs_[FuncId]
		Issues:
		- Ugly. Need to manage linked list, but only occasionally.
		- Puts Func info on Conn.
		- Costly. Each Conn manages a vector of FuncIds.
	Option 3:
		- connId looks up entry on Element::vector<Conn>
		- FuncIndex looks up entry on Element::vector<FuncLookup>
		- Conn marches through Msgs, using same FuncId for all.
		- Target finds OpFunc from FuncId using Target::funcs_[FuncId]
		Issues:
		- Need to set up vector of funcs_ on each target Element
		- Passing around and setting up a dynamic FuncLookup. Too cute.

Categorey 2: SrcFinfo has static-init defined conn Id and SrcFinfoId
	Option 4:
		- connId looks up entry on Element::vector< Conn >
		- SrcFinfoId plus specific, per msg index, to specify tgt.
		- Conn marches through Msgs, using same FuncId for all.
		- Target Cinfo has relatively small list of possible targets
			for a given SrcFinfoId, based on type matches.
			specific index pins it down.
		Issues:
		- Still problem with multiple kinds of target funcs on Conn.
Category 3: SrcFinfo has static-init defined MsgId, using Msg link lists.
	Option 5:
		- MsgId looks up entry on Element::vector< Msg* >
		- March through linked list of Msg* (all on vector)
		- Each Msg has a matching entry in vector funcs_< FuncId >.
		- Target Cinfo has relatively small list of possible targets
			for a given SrcFinfoId, based on type matches.
			specific index pins it down.
		Issues:
		- Still problem with multiple kinds of target funcs on Conn.
Category 4: Exception handling. Assume that a single FuncId will normally
	work, and treat other cases as rarely-used exceptions.
	Option 6:
		- connId looks up entry on Element::vector<Conn>
		- FuncIndex looks up entry on Element::vector<FuncId>
		Normal case: FuncId in range:
			- Conn marches through Msgs, using same FuncId for all.
		Exception: The FuncIndex is out of range
			- FuncIndex identifies vector of FuncIds
			- Conn marches through Msgs, using different FuncId
				for each, from vector of FuncIds.
		- Target finds OpFunc from FuncId using Cinfo::funcs_[FuncId]
=============================================================================
10 Oct 2009
Compiled implementation. runs up to part way, then croaks on uninitialized
variables.
=============================================================================
11 Oct 2009
Fixed croaking problem: I had redefined some private fields in SrcFinfo. 

Remaining issue with setting up the FuncIndex. This is something to be done
by Cinfo::init().

Fixed testSendMsg issue with setting up FuncIndex. 

Converted both to doing almost silent unit tests.

Implemented and cleared testCreateMsg, cleared valgrind. Need to make it silent.

Also it is unable to find the 'set' field for the field assignment part,
which is fine as I haven't yet defined it.

For doing 'set':
- Create Element explicitly, not using Create function
	Pass in a ptr to the field to be set/get? not needed.
- Create Msg using regular msg func.
- Call asend directly



Need to revisit all opfuncs to pass in Qinfo and Eref.
Done.

Need to revisit Conv<A> to return a reference or something similar, to avoid
alloc etc.

=============================================================================
12 Oct 2009.
Put the Qinfo into the OpFunc. Runs, clears.

I have two variants of the OpFunc, perhaps premature optimization. One of them
ignores all the additional info available, such as Qinfo and target eref.
The other is also derived from OpFunc, but its func takes the reference to
the Eref and the ptr to the Qinfo as additional args.

Still to set up.

Checked in as revision 1368.
=============================================================================
13 Oct 2009.
Implemented EpFunc, which is a variant of OpFunc that passes in the
Eref and Qinfo along with other args. This is needed whenever we have a 
function that manipulates the Element, or needs additional data about the
incoming message.

Checked in as revision 1370.

=============================================================================
14 Oct 2009.
Implemented testSet unit test. Seems OK, but need to clean up memory leaks.
Checked in as revision 1372.

Working on memory leak. Unexpected major problem with whole approach: the
allocated message m is needed during the clearQ, after the set command
has returned. So we have a dangling message.
Related problem: We will have clearQ after Set has returned. So script
command sequencing cannot be guaranteed, unless we tell the script execution
to hold off till clearQ. This gets worse with 'get'.

Working on 'get'. I have the skeleton in place.
=============================================================================
15 Oct 2009
More implementation on 'get'. 
- Msg leak issue could be handled if the msg is permanently stationed on the
	SetGet object (due to be the Shell). Its far end can dangle, and be
	connected to targets as needed.
- Would want to refine this to deal with wildcards, so want a Conn, not just a
	single Msg.
- Would want to do cleanup and continuation of script function on the
	SetGet::handleGet. This function is triggered only when the 'get'
	call returns. A bit fragile, will want a timeout.
- If we have multiple targets for 'get', we will need an index to go out to 
	each target, and come back with the data, so that it can be organized
	into a vector. The recipient function will then have to keep track of
	how many have returned.
- Do we need multiple 'get' buffers and funcIds? If the effective utilization
	is serial, should be OK to have just one.

After a day of implementation and debugging, seems to work.
Checked in as revision 1375.

This is leaking memory copiously. Next step is to organize set and get
through the SetGet object/shell, of which there should be just one instance.
In the current test run there were 100. This should allow us to reuse the
Msg from the SetGet object, and avoid the memory leaks.

Next Steps:
- Clean up Set/Get
- Heavy traffic tests
- Sync messages
- Start to play with nodes and threads.
- Optimization: buffer alignment, clean up management, use in-place rather than
	copy.
- Incorporate unit tests into cinfo
- Provide message tree diagnostics.

=============================================================================
17-18 Oct 2009.
Replaced SetGet with Shell. Set up automatic creation of Shell as /root,
during runtime init. Still leaks memory.
Checked in as revision 1384.

Working on handling Msgs from Shell. Need still to clear out old msgs during
Set.

Although it works now, valgrind picks up a nasty situation. When a dest
Element is deleted, Msgs on it need to be deleted too. Msgs know how to 
remove themselves from the src element, but not from Conns, which also
have pointers to them. Options:
1. Do a grungy search for Msg ptrs on all Conns. Deletes are rare so should
	be OK.
2. Store an extra index or two in each Msg for identifying parent Conn(s)
3. Conns do not store Msg pointers, but lookup indices for them on the Element.

Let's do #1. 
Done. This completely fixes the memory leaks that afflicted the 'set' function.
At some point I'll have to benchmark to figure out how much
of an impact the message deleting has on the overall performance.

=============================================================================
20 Oct 2009.
Also moved the 'get' function to use the Shell element.
Next I need to generalize both set and get to handle arbitrary types.

Trying to find a suitable place to do this. In the process I found that
Send.h and Async.h are no longer used. Removed them.
Checked in as revision 1388.
=============================================================================
26 Oct 2009.
Implemented Set and Get operations in a new templated SetGet class. Better
typechecking. Compiles but it doesn't yet work.
Checked in as revision 1404.

=============================================================================
31 Oct 2009.
Finally got to do some debugging. Fixed problem, now works, clears
valgrind. 
Checked in as revision 1422

* Need to test with doubles and other types. Done. Did a partial 
	re-implementation of IntFire, and did set/get on one of its 
	fields of type double.

Checked in as revision 1424

There are several issues with a full implementation of IntFire, most notably
that the design now requires there to be a distinct target Synapse object for
each incoming message. In the earlier version we had some extra info 
figured out by the system to identify the target SynInfo. here I just want
to use the index of the traget Eref. This is good, but now the destination
IntFire needs to juggle some subset of the target Synapses, which are
independent objects presumably on a child element.
For efficiency, the IntFire would like to have target Synapses as internal
fields.
For indexing synapses, we want each to be an individual array entry in a
big array of Synapses.

Assume we'll handle allocation etc within the parent IntFire.

How to set up indexing? 
	- Give each IntSyn the same #, which is the biggest # of syns on 
	any one. 
		- This needs us to be able to allocate an array of Data with
		holes in it. Easy to do if we have an indirection step on
		the Element, but as built the Element won't do it.

	- Set up precisely as many IntSyns as are needed.
		- Indexing and relating IntSyns to parent are both hard.

	- Explicitly make it look like a 2-D array, with variable length
		sub-indices.
	
	- Make it look like an array of Elements each with an array of
		Synapses.
=============================================================================
1 Nov 2009
Synaptic info options.
1. Separate SynInfo or Synapse objects. Each receives input from only
	one axon. The whole lot are in the same Element.
	Spike operations:
		- Spike arrives on a Synapse. 
		- Synapse sends Msg to parent Element, with delay etc info.
			It needs efficient orgn of the messaging to parent.
			Even with optimal organisation, this is costly, 
			going through entire msging again.
		- Parent Element updates its pendingEvents queue
	Process operations:
		- Check if queue is due. If so, handle event and pop queue
		- Check if Vm exceeds thresh. If so, send spike, and reset Vm.
			Otherwise do exp decay calculations on Vm. 

	This has an unpleasant extra messaging step from Synapse to parent.
	However, there may be efficiencies in the first msg from axon to
	Synapse as we guarantee a single input.

2. Messages are directed to Synapses but are processed directly by
	IntFire.
	Can't do this without some juggling of target index. See next.

3. Messages are directed to parents of Synapses. Munge the indexing of the
	target Element so that part is used for indexing it, 
	and part to index the correct Synapse.
	This could be a special case of an ability to index 2D arrays.
	But where does one stop?
	Or, the extra info could just be something that messages can generally
	do.
	This arrangement deals with the threading.
	It also eliminates the issue of passing info down to parent.

4. Give the Synapse a pointer to its parent Element or IntFire.
	Issues with threading.
5. Special OpFunc to munge index.
	- Create Element that deals with individual synapses, but points
		to the parent IntFire (or ReceptorChannel) Element.
	- OpFunc munges destIndex in some efficient manner. Bitmap may be
		best, using top n bytes for specific synapse index.
		For IntFire, we may need 2 bytes for synapse, leaving only
		2 for target IntFire. Insufficient.
	- OpFunc is class-local, so we can set up some reasonable subdivision.
	- Pass in synapse index as additional arg to the func encapsulated
		by the OpFunc.
	- Can generalize to other fields of Synapse
	- Can generalize to arbitrary arrays using templated 
		ArrayOpFunc with dimensions?


To test scalability, let's do this:
- Make a speed reference using a sparse matrix and customized code to replace
	messaging, as a recurrent network with N neurons and P probability
	of connections. Goal is to do N >= 1e5, P ~0.1.
- Make the equivalent network in MOOSE
- Profile, look at bottlenecks.
- Repeat with multithreading
- Repeat with multinodes


Let comp load of IntFire processing be I.
Let comp load of Synapse processing be S.
Let spiking occur every T timesteps.
N and P are defined above.
Let # of synapses per neuron = #

If we ignore communcations cost,
total load per timestep = I * N + N * # * S / T
Some numbers
N	#	I	S	T	Load	Notes
1e5	1e4	1	2	100	2e7	zero messaging cost
1e9	1e4	1	2	100	2e11	zero messaging cost
1e9	1e4	1	10	100	1e12	medium messaging cost
1e9	1e4	1	100	100	1e13	high messaging cost

Now we go down 10x smaller timesteps.

1e9	1e4	1000	2	1000	1e12	Realistic neuronal models,
						zero messaging cost
1e9	1e4	1000	10	1000	1.1e12	Some messaging cost.
1e9	1e4	1000	100	1000	2e12	High messaging cost.
					
Main points:
- in IntFire networks synaptic comput and messaging are overwhelming
- in realistic neuronal model networks, the costs are comparable.

Overall, efficiency does matter for spike messages.

we may need 13 digits x3.3 = 43 bits. Too much for even an int.

=============================================================================
2 Nov 2009
Working out implementations for accessing array fields, such as synapases 
on an IntFire.
See ArrayOpFunc.h::ArrayOpFunc0

The array of synapses should act just like any other array in terms of 
field access, adding messages, and so on.
	This means that the Eref::data() function has to behave the same way
	as for any other Element, and look up the correct Synapse without
	further effort.
When there is a need to do operations through the parent Data, then we use 
	Eref::data1() to return the parent data.
	Eref::index() has all information needed to look up synapse from data1.
To handle these cases, we have a separate set of OpFuncs that operate on
	data1 and pass in the index. This is the UpFuncs.
To do these seamlessly we need to make DataVec a virtual base class, and
	have 1D, 2D, 1D+field and similar options. The DataVec handles 
	deleting of data too, so if we need to have more than one Element
	refer to the same data, then suitable DataVecs have to be defined for
	each element, and only one may delete the data.
	Alternatively, we should have the Element itself be a virtual base 
	class.

Stages:
* Put in DataId for all Eref indices.
* Replace Data with char* in Element::data
* Make Element a virtual base class.

Checked in as revision 1425

Next:
* Derive off Element for Synapses on IntFunc. Checkin 1427.
* Do Synapse and SynElement implementation. Checkin 1428.
* Come up with special element creation options to set up this element. 1429
* Check that field access works with it	Checkin 1431.
+ Send spike messages to it
* Sort out how to handle its clearQ.
* Fix up sub-fields within DataId.
* Clean out const A& argument in OpFuncs. Should just pass argument, as most
	of them will be doubles. Will need separate classes for strings and
	things. Checked in as 1429, except for string stuff.

Sending spike Msg seems OK, need more tests.
=============================================================================
4-5 Nov 2009
working on testSendSpike. Runs but doesn't seem to make sense. After some
debugging got it to work, sends the spike info. Much of the problem is due
to the ugly handling of DataIds. Checkin 1433.

Need to fix that next. Fixed. Checkin 1434.
Also valgrind is very unhappy with the allocations. Need to fix that too.
	Fixed, it was a simple matter of deleting the IntFire element. 1435.

Next: 
- Implement a sparse matrix Msg type and use it to build a serious
	feedback network of IntFires.
- Clean up scheduling a bit so that we can see the data flow over multiple
	cycles.


Working on sparse matrix. In order to fill the synapse indices, I need
to fill the transpose of the matrix to start, and then transpose it.
Transposition of the sparse matrix:

Start with 

[	1	0	0	0	2	]
[	3	4	5	0	0	]
[	0	0	0	6	7	]

N_ =  1234567
Col = 0401234
rowStart = 0257

Transpose is:
[	1	3	0	]
[	0	4	0	]
[	0	5	0	]
[	0	0	6	]
[	2	0	7	]

N_ =  1345627
Col = 0111202
rowStart = 023457

To transpose.
Step 1. Sort N_ by col to get N_T
Step 2. Convert rowStart to row# for each entry, so, 
	0257 becomes
	0011122
	Sort this by col = 0401234 to get new set of cols:
	0111202
	Note that this sort needs to retain original order of otherwise equal
		numbers. So the first 4 comes before the last one.
Step 3. Sort the col itself to get the new sequence for row#s:
	0401234 becomes 0012344
	Then put row starts on each, whenever the value increments:
	02345
	and wrap it up with a 7.

Implemented. Compiles, not quite there with the unit tests.
=============================================================================
6 Nov: Fixed up, now does correct transposition.
Checked in as Revision 1436.

Next step is to do tests with messaging.
Working on it. An issue comes up with randomConnect: In the function I
set up the messaging to synapses, but the target object has not yet allocated
the synapses. Good, we can do this correctly after setting up. 
Bad, because we don't have a general way to tell objects that a specific
field needs to be assigned. It is numSynapses in IntFire, but could be
one or more different other fields.

=============================================================================
7 Nov.
Approach taken to allocate synapse memory, which is generalizable to other
kinds of array fields:

- We will usually have to access these other fields as part of the setup
	command. For example, setting synaptic weights.
- The messaging command itself passes input to a named field. More to the
	point, the SynElement is on a specific array. Should be able to
	provide info to it generally to define values in this array.
	- The UpFuncs serve this task in the Cinfo. However, we need this
	feature in the SynElement type classes quite generally. So it has
	to be something that the compiler enforces.
		- UpFuncs in the SynElement constructor?

- Remember that messages were to be the equivalent of wildcards. We should
	use the created message itself to assign fields, including setting
	up the weights and the allocation of synapses.
	- Setting weights: Implement a
		setrandom<double>( const Msg* m, const string& field, 
			double lo, double hi, bool isLog );
		function.


OK, hacked it in for now as hard-coded access functions within the SynElement.
Compiled stuff and cleaned up old printf testing, now uses assertions as
part of unit tests. Checkin 1438.

Successfully created a 10000 X 10000 sparse matrix with 10% connectivity.
So about 1e7 entries. Expect memory use to be about 1e7 * 8 bytes. The
transposition would have used about 1e7 * 12 bytes more.
Oddly it used over 1.5 G, perhaps would be less if I
reserved the space rather than fill it with push_back calls. 
For unit tests I'll use 1000X1000 as it is much faster.

Valgrind is not amused: an error somewhere. 
The size of rowStart() is 1 smaller thn it should be.
This was quite nasty. I put in assertions that should have caught it but
did not. I checked the web for odd interactions between assertions and
templates. Finally I realized that SparseMsg.o did not depend on SparseMatrix.h
in the makefile. So the SparseMsg was not seeing any of the updated code.
Fixed, compiled, reran, clears valgrind. Checking 1440.

=============================================================================
8 Nov 2009
Would like to implement a vector 'set' operation.
For now stay focussed on the sparse messaging.

I had a difficult bug in field assignment that only materialized after a very
large number of assignments. After a lot of meandering, turned out that the 
problem was that I was not clearing old messages out. In the absence of this
garbage collection, the system was correctly assigning new msgids as it went
along. In due course the system overflowed the 'short' field range.
Solution, of course, is to fix up the garbage collection of old messages,
or rather, the slots allocated to them.
Implemented it. Works. Valgrind takes several minutes to chew on it, but
eventually it too passes.  Checked in as revision 1441.

This is as thorough a test of set/get as any i
I've done so far. The vector 'set' operation would help.

Now working on synaptic delivery. The system is taking up over a gig of
RAM to store the pending synaptic events for just one timestep.

# of synapses = 1e3 * 100 = 1e5.
Should not happen even if every single synapse fires.

I wonder if the buffer keeps getting extended as the process call is done..
No, should have a cleanly separate eventq.

Tracked it down, the SparseMsg dispatcher was sending out stuff to all
targets regardless of the originating Eref. Fixed. Lots of tinkering later,
we have a reasonable IntFire network. It goes into saturation rather
quickly above a certain threshold of connectivity, otherwise decays.
Also it scales pretty well in terms of speed and memory. 
Need to do benchmarking.
Checked in as revision 1442.

Tried to do a profile. Failes outright in the optimization compile mode,
with or without profiling. Clears valgrind in debug mode. So I am confused.
Managed to track it down to very first unit test, was an innocuous array 
allocation. Fixed and now works.

Profiling shows that the most time is spent doing the field allocation.
Silly. Let's set up vector assignment.
Done, checked in as 1443.

Now did the profiling with a long (1000 timestep) run of the IntFire
network. The results are gratifying: By far the largest time is spent in the
heap operations for the synapse. All told, under 10% of the time is spent in
messaging.

  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 56.83     18.49    18.49 102317402     0.00     0.00  void std::__adjust_heap<__gnu_cxx::__normal_iterator<Synapse*, std::vector<Synapse, std::allocator<Synapse> > >, long, Synapse, std::less<Synapse> >(__gnu_cxx::__normal_iterator<Synapse*, std::vector<Synapse, std::allocator<Synapse> > >, long, long, Synapse, std::less<Synapse>)
 17.09     24.05     5.56 103414264     0.00     0.00  IntFire::addSpike(DataId, double const&)
  7.84     26.60     2.55 103414264     0.00     0.00  Synapse::Synapse(Synapse const&, double)
  4.95     28.21     1.61  1012617     0.00     0.00  SparseMsg::exec(Element*, char const*) const
  3.78     29.44     1.23  1024002     0.00     0.00  IntFire::process(ProcInfo const*, Eref const&)
  2.06     30.11     0.67 103414264     0.00     0.00  UpFunc1<IntFire, double>::op(Eref, char const*) const
  1.20     30.50     0.39 103414264     0.00     0.00  Eref::data1()
  0.86     30.78     0.28 102317402     0.00     0.00  Synapse::getWeight() const
  0.71     31.01     0.23 103340378     0.00     0.00  Synapse::getDelay() const
  0.65     31.22     0.21 104896327     0.00     0.00  Eref::Eref(Element*, DataId)
  0.61     31.42     0.20                             GetOpFunc<Synapse, double>::op(Eref, char const*) const


Checked in as 1445.
Now to change it so it is more like a unit test.

Calculations: 1024 * 102 synapses ~1e5
Towards the end, it was saturated: always firing. So rate = refractory
period = 2 timesteps.
# of timesteps = 1000.
So 5e7 synaptic events were transmitted, in about 30 sec. ~1.3 million/sec.

Back on 1 Nov, these were the planned steps:
To test scalability, let's do this:
- Make a speed reference using a sparse matrix and customized code to replace
	messaging, as a recurrent network with N neurons and P probability
	of connections. Goal is to do N >= 1e5, P ~0.1.
* Make the equivalent network in MOOSE
* Profile, look at bottlenecks.
---> Implement scheduling
- Repeat with multithreading
- Repeat with multinodes

I've done a couple of these. The next step is to do the standalone version
without messaging, to get a tighter estimate of the messaging overhead.
Then I need to insert a stage where I implement scheduling, before going
on to the multithread stuff.

=============================================================================
9 Nov 2009.
Made another branch, based on moose/Msg. In:

/home/bhalla/moose/IntFireNetworkNoMsg

Munged the IntFire and related code
in it to directly call functions instead of message passing.

=============================================================================
10 Nov 2009
After some debugging, managed to get the code to work. There is very little
difference with the profiling: 30.2 sec for the message-less version, as
compared to 32.54 sec for the messaging version.

Ran using 'time' a few times with optimization but no profiling.
messaging	non-messaging
37.3		33.7
37.1		33.5
37.1		33.7

So the difference is about 3.5 sec, or a bit over 10%. This is outstandingly
good.
Checked in the IntFireNetworkNoMsg stuff as the end of its branch. This is
revision 1448.

Then deleted the branch from my local machine. Still sits on SourceForge.

Now on to scheduling and threading.

The scheduler has to send messages for process and clearQ.
During runtime:
	process and clearQ alternate strictly. Many threads to coordinate.
	Shell has to be blocked, but with an option to halt runtime thread.
		Ideally this could be done reversibly.
	Graphics has to continue on yet another thread.
During setup:
	clearQ must run in coordination with the thread of the Shell.
	- Cannot be on the same thread, since we may need to hold up the shell
	while completing queued calls.
Graphics and the other threads
	- Graphics sits on a separate thread.
	- I need a separate channel for data to go from process to graphics.
		This is both for the OpenGL graphics, and for Qt.
		Looks like a thread-safe queue here. 
		Will need graphics first and computation first policy options.
	- Qt and OpenGl events will probably be handled by Python.

I'll use the recently implemented stuff for array fields to do the clock ticks.
Also I'll use priority queue to manage it, rather than the customized version.

=============================================================================

Need to call Erefs by value in EpFunc.h
Issue with having ticks as ArrayFields: they need to be sorted. If the
sort order is changed, then the messaging will have to be remapped accordingly.
This is do-able but involves a possibly messy extension of messaging functions.
The alternative is to have them as separate Elements, which is messy in other
ways.

=============================================================================
13 Nov
Working on Clock.cpp.
=============================================================================
14 Nov.
Put in skeleton of Clock and Tick, compiles.
=============================================================================
15 Nov.
Setting up unit tests. Need to define calling framework.
- Creation of ticks
	- Could create a certain # explicitly, like I do with Synapses.
	- Could have an 'addTick' function on the Clock. Would need dropTick.
		- the addClock function works better with this.
		- Messiness if I drop a tick in between the defined set.
	- Could create say 10 clocks by default, but manange only the
		set in the TickPtr vector.
	- Could get rid of 'stage' field by considering index on the Tick 
		vector. But there is no rule about ordering clocks by dt
		(though it is implicit somehwat in GENESIS for clock 0)

Anyway, now that I am back online, checked in a large backlog of changes
as revision 1455.

Went through the unit tests, converted the massive printouts into assertions.
Did a little cleaning using valgrind. Now OK. Checkin 1456

Starting up with a template for the TickElement. yet to compile.
=============================================================================
16 Nov
Now trying to compile.
=============================================================================
22 Nov.
Resuming work after IMMMI. Compilation works for the FieldElement template
to handle arrays of fields. Checked in as 1457.

Now worked through replacing SynElement with the FieldElement template.
Works, clears unit tests. Checked in as 1458.

Setting up clocks and ticks. Issue: How will ticks be added? Seems like
the safe thing to do is that any change at all in any of the tick
parameters (dt, stage, or # of ticks) should invoke a rebuild.

Implemented much of the Tick scheduling stuff. Checked in as 1459

Will need an UpValueFinfo: assignment of fields get diverted to parent.
Will need to sort out calling of Process and clearQ. Consider Reinit too.

=============================================================================
23 Nov.
Ways to approach the Tick field assignment stuff:
Pedantic: 
	The tick field access functions themselves ensure updates of the Clock.
	- Can do as a special case by making an UpValueFunc which calls
	the parent clock to do the field assignment, and handle updates.
	This is clean enough, a little tedious and ugly for the field funcs.
	- Can do as a general case by making all array field assignment calls
	into calls to the parent. Ugh.
	- Can do as a general case by providing extra args so that the function
	can work out who the parent is. Can ignore this stuff if not needed.
	Also somewhat ugh.

Pragmatic:
	Tick field access just updates fields locally. We need another call
	to the Clock to rebuild the schedule.
	The wrapping Shell functions for handling clock ticks does this.
	- This would allow calls to change ticks without having an effect
	on scheduling. Could be surprising.
	- There may yet be other cases which need to do similar things.

Hacks:
	- Provide ValueFinfo with an auxiliary SetFunc
	- Provide ValueFinfo with an auxiliary trigger func for whatever
		other operation is needed on parent when a field changes.


I'll use the UpValueFunc, which is what I had originally planned.
Checked in as 1460.
Implemented, tested for one field. Works OK. Valgrind also happy. 1461.
Implemented for second field as well. 1462.

Set up unit tests for setupTicks(). Looks good. 1463.
Called 'start'. Hangs, looks like infinite loop.

Implement getVec

=============================================================================
24 Nov.
Working on scheduling.
Algorithm:
Current time = 0
While (currrent time < end time)
	Sort all tickPtrs in order of nextt and stage.
	Execute the first in sequence.
		Current time becomes the nextt of the just executed tick.
		nextt is incremented.

Minor fix to this, since we want each tick to be called just as the system time
advances. So the first call on tick0 (with dt = 1) is at t = 1.
Checked in as 1464.

Next: handle process and clearQ alternately. This is a job for the Ticks.
To call all process then all ticks:
	No, the idea of the different stages is that a complete calculation
	can be sent on during the same overall timestep, comprising several
	ticks with the same dt but different stages.
So, assume we call process and clearQ alternately.

What to call first:
	Process:
	- ClearQ will have been called ahead of time by the system. For example,
	reinit will already have been called, and we have values ready to use.
	- If there were earler stages within this overall timestep, then 
		we will not have a way to access data passed in.
	ClearQ: 
	- This will allow a given tick to handle incoming data and deal with
	it, and pass it on in Process.
So, call ClearQ first.

Do we call ClearQ strictly alternating, or should stuff be cleared more often?
	- More often clearing adds compute cost
	- More often clearing might lessen queue length.
	- Never need stuff till Process.

So: Better to strictly alternate with Process.

Do we have multiple Process calls?
	- Several GENESIS type calculations need a separate 'init' stage then
	a 'process' stage. For example, the compartment uses
		- init: previous_state = Vm
		- process: traverse messages, do integration.
		If two compartments A and B exchange Vm, then they need to 
		exchange previous_state in order to avoid asymmetry.
	- In MOOSE, with the clearQ arrangement, this would not be an issue.
	The data exchanged will always be previous-state, due to the sequencing
	of clearQ and Process.
	Seems like I never use it in other contexts.
So, don't need multiple Process calls.

Almost there with the implementation, stuck because the 'advance' call
needs the correct Tick Eref as an argument.

=============================================================================
25 Nov.
One possible hack is to dual-derive Ticks from Msg. I don't like it.
Another is to store the Element for the Ticks in the Clock. Might be OK
if it is a child. Better if it is found from a Msg.
Separate from this, is how to rapidly access the list of Msgs from the Ticks.
	- have a distinct Conn for each Tick. They could have the same index. 
=============================================================================
26 Nov. Avoided hacks, got the TickElement from a message.
Set up a distinct Conn for each Tick, using the same index as the Tick's
own index.

Many changes needed to get all the pieces to work together. Compiles, 
yet to get it to work.

OK, now works. Cleaned out the scheduling test so it isn't verbose anymore.
Also valgrind is happy. Checked in as 1466.

Back on 1 and then 8 Nov, these were the planned steps:
To test scalability, let's do this:
- Make a speed reference using a sparse matrix and customized code to replace
	messaging, as a recurrent network with N neurons and P probability
	of connections. Goal is to do N >= 1e5, P ~0.1.
* Make the equivalent network in MOOSE
* Profile, look at bottlenecks.
* Implement scheduling
- Repeat with multithreading
- Repeat with multinodes
Now we add:
- Redo messaging with sync messages
- Make a good test case, say the signaling network again?
- Profile, look at bottlenecks
- Do multithreading
- Do multinodes.

=============================================================================
28 Nov.

Multithreading.
- Need to guarantee that clearQ is element local, and all outgoing
	messages emerge only at Process.
	- Otherwise we might add stuff to queues at the same time
	as we read from them.
	- Alternatively, have to maintain a separate queue for clearQ input
	vs output.
	- Or we could do a mutex to grab control of the target queue for the
	time we need to put data into it.
- Use a separate queue on each Element for each thread.
	- Alternatively use thread-safe queues. Less memory, more mutexes.
- Barrier after clearQ and after Process.
- Process is easy to multithread as it is data object-local.
	- separate sub-parts of data among threads.
- clearQ is hard to multithread as each msg in the queue could refer to many
	data objects, and there can be many msgs. 
- How to multithread the clearQ

Scaling up to huge numbers of threads: This should use the same decomposition
as scaling up to a similar huge number of nodes.

Suppose I have 1024 threads in my simple network example.
1. Single or multiple schedulers?
	- Do I want them to run out of sync? I'll need barrier synchs
		in either case.
2. Explicit Element Data splitting or implicit (and even dynamic) as per
	thread indexing?
	- Explicit would simplify the queueing model: It would still be the
	same as single-threaded, as each thread would manage one queue.
	- How to access stuff with explicit data splitting? Reference Element
		will have to keep track and if needed, redirect. But this
		can't be done for all messages: they will need to reshuffle.
	- Dynamic would do good things for load balancing.
3. Message structuring.
	- Explicit Element data splitting will put a separate queue request
	in for each Element proxy on each thread. So the clearQ can become
	single threaded, cleanly, but filling the queue requires thread 
	juggling.
	Note though that the queue is typically much fewer calls than the # of 
	calls needed when clearing it, since the target Msg distributes queue
	calls to many Data destinations.
	- At send time put messages through a crossbar that knows which
	threads need to receive each msg. So originating thread A has
	holding queues for threads A-Z. After barrier, we now access the queues
	by destination thread.
	- Simple implementation would be that each originating message just
	goes to each target thread holding queue. Clearly need to structure up
	this to only deliver a given message to the queues that really need it.
	Note that this is exactly what I would have had to do for multinode 
	stuff. 
		- This looks like a SparseMsg.
		- The target thread gets one big fat queue, rather than one
		per Element. Not hard, just need to add dest Id to Qinfo.
		- Alternative to one fat queue is for the message delivery
		crossbar to direct messages already into the correct Element.
	- another approach: give each Message a unique id for the entire
	simulation. When sending info, we don't now need src or dest Element,
	as this is all in the Msg. So a single fat queue is possible for
	each thread.
		- Qinfo already holds a MsgId, but it will have to become
			an unsigned int rather than short.
		- Will need a boolean to indicate msg direction.
		- Will need to expand srcIndex to be a full DataId.
		- funcId, and size remain.
		- Would like a way to cleanly handle tgtIndex for SendTo.
=============================================================================
29 Nov.
Current design looks like this:
- Single queue per thread, rather than one per Element. To be more precise,
  each thread has one incoming queue for each thread (including itself) and
  one outgoing queue for each thread (including itself).
  	- We could in principle replace this with a single pair of in and out
	queues per node, if they were individually thread-safe. Tradeoff in
	memory and speed. Probably dreadful for many threads.
		- Suppose a given thread wants to put data out at a fraction
		F of total time, and there are T threads. Then the fraction of
		time any thread is blocked by this thread is F/T.
		So the total fraction of time that any given thread is blocked
		is F again.
		- Suppose we provide a further number Q of queues per thread,
		to subdivide the total set T. Now the fraction of time
		any other thread is blocked is F/( Q * T ), so the total
		blockage fraction is F/Q. This may help, but gets messy.
		- Can we do the same for internode calls? Yes, there is an
		mpi_any_source option in recv. One can narrow things down
		by using tags for groups of messages.
	- Some object operations (like 'get calls' ) put stuff right back
	onto the queue. This will cause problems especially when we have a
	single queue per thread. Dual queues?
	- Also consider sched interleaving, where we do one set of objects 
	first so as to get their data ready for transfer. Again, dual queues
	needed. These could be the input and output queues for MPI.
	- In some cases would want a broadcast queue. If the # of target
	threads is more than half the total, for example, may as well send
	data once to all. Huge savings in memory too.
- Messages now have a unique system-wide Id. Qinfo refers to this, so queue
	knows (through Msg) which is target Element.
- Msg::addToQ is the function which puts packets onto the Queues. This
	is now expanded to decide which threads should receive each packet.
	For example, a large SparseMsg might use one SparseMatrix for the queue
	loading, and another on each thread, for clearing. The setup of this
	large SparseMsg will be the key step in thread/node decomposition.
- What happens to different clocks?
	- Some kinds of data transfer do not have to occur each dt: spike msgs.
	Want to accumulate them.
	- Sometimes we simply have two very different clocks going. Should we
	simply send data with the first available?
	- Sometimes we have small (fast) dt clocks within a thread, and can
	get by with slower dt clocks between threads. How to do?
		- Just check queue size for inter-thread data?

I think the next step is an implementation. Too many unknowns here.
- Rebuild current stuff as just a single queue. Benchmark.
- Set up simple implementation: one queue on each thread, for each target
	thread. So a 4-thread system would have 16 queues. Then there are the
	outgoing queues too.
	- Benchmark
- Set up more economical implementation: Each thread manages a thread-safe
	input queue, and is its only consumer. 
	Need 4x2 queues for a 4 thread system.
	- Benchmark.
- convert from threads to MPI.
=============================================================================
30 Nov.
Just for reference, the starting version is 1466.
We need to put a queue on each thread. Where should it reside?
- Clock. This definitely knows about the queues.
	But it requires that the scheduling be set up before even simple
	messages can be handled.
- Shell. This will be replicated on each node, but not necessarily for each
	thread.
	I already have a Shell dependency for set/get ops using msgs.
- ProcInfo.
- Static field of Element

call stack for addToQ:
Eref::asend: Creates Qinfo. calls Conn::asend.
Conn::asend: iterates through Msgs. Each calls addToQ. Qinfo is passed in.
Msg::addToQ: Checks which is src and which dest Element. Calls addToQ on 
	non-calling Element. Qinfo is passed in.
Element::addToQ: calls Qinfo::addToQ on the passed in qinfo. Passes in queue.
	This actualy does the queue juggling.

So perhaps the Queue should be on Qinfo as a static. if so, the call sequence
would be:
Eref::asend: Creates Qinfo. calls Conn::asend.
Conn::asend: iterates through Msgs. Each calls addToQ. Qinfo is passed in.
Msg::addToQ: Checks which is src and which dest Element. Fills in direction
	flag on Qinfo. Figures out the target Queue. Calls Qinfo::addToQ with
	the chosen queue index.
Qinfo::addToQ: does the queue work.

So it looks like want to put the queues on Qinfo. This seems like a sensible
place.

=============================================================================
5 Dec.
Need to work out relationship between global Msg vector, and managing msgs on
individual Elements.

Currently Element manages a vector of Msg ptrs. Element also manages
a vector of Conns. The Conns too manage a vector of Msg ptrs. To top it all,
each Msg keeps track of its index in the Element::Msg vector.

We need the fast lookup only for Conns, and there too it is a very tiny part
of the comp load. May as well always use MsgIds.
This may let us separate them... use MsgIds only for incoming, Conn only
for outgoing. Problem with bidirectional msgs.

Now we have to separate the MsgId as the index of the Msg on the Element,
from the MsgId as the universal Id for the Msg.
Note that we never seem to use either Msg::mid1() or Msg::mid2(). 
Likewise, the only time we ever use Element::getMsg is in clearQ.

Working on Qinfo::addToQ

Old call stack for clearQ:
Tick::advance: calls its conn::clearQ
Conn::clearQ: goes through all Msgs, calls 
Msg::clearQ: calls e2->clearQ. Why e2? because e1 is the Tick.
Element::clearQ: goes through its own queue, calls execFunc for each entry.
Element::ExecFunc: This figures out if it is a sendTo or regular msg.
	sendTo: figures out target, Qinfo works out op func, calls op.
	regular: calls Msg::exec on buf
	Msg::exec: figures out direction, traverses all targets calling op.

New version:
Tick::advance: calls Qinfo::clearQ with the appropriate Qid.
Qinfo::clearQ: goes through its own queue. Looks up for each entry, calls
Msg::exec( figures out direction, traverses targets calling op.

Working on Msgs.
Need to modify Elements so that they maintain a vector of Mids rather
than of pointers to Msgs. Likewise Conns.
Need to fix Element::dropMsg


=============================================================================

8 Dec
Still trying to compile, but enough done that a checkin is needed. 1476.
Compiled. Crashes. Checkin as 1477.

Currently stuck in testSendSpike around line 385. The message has been
added successfully, but in the IntFire::process when we try to send data,
there are no Msgs in the conn.

OK, turns out that the msg is deleted on the 'set' call.

=============================================================================

9 Dec. 
Got unit tests working up to testSendSpike. Checkin as 1479.

Ran into an issue where it seems like every time I do a set/get call,
it clears out all pre-existing messages. Happens at testAsync.cpp:567.

Fixed. Now it runs through the unit tests, but it does not like the old
values for Q size in testSparseMsg. I'm not sure if this is an issue with
ordering of the random number usage, or if it is fundamental. The output
looks reasonable.

Valgrind is happy with it first pass.

OK, checked out the old 1466 and tested for unit tests. Works fine, so
nothing has changed with the random number generator.

OK, put in a cout to check order of values. Order is correct and
matches with the old version.

Compared the printout of activation: turns out they were identical all along.
With this sorted it is easy to see that the difference in Q size was just 
because Qinfo is now 32 rather than 24 bytes. With this fixed, the unit
tests all clear. Valgrind is happy too. Checkin as 1481.

A bit of benchmarking: Ran using 'time' after enabling the unit tests in
main.cpp, and setting #runsteps to 1000 from 5.
36.22, 36.19, 36.17 sec are the times. Marginally faster than earlier even
though I have a bigger Qinfo. Good. Checked in as 1482 for reference.

Now I can go on to serious stuff with threads and the like.

Putting data onto Queues:
- Data goes to queue for local thread: 
	- Easy to send data
	- Emptying queue is messy.
- Data goes to separate queue for each dest thread
	- Need thread safety for filling queues.
	- Can pre-balance the incoming stuff on each thread.
	- Msg needs initial stage for dispersal of data.
	- Works well with multinode systems.
		- Want to have outgoing queue per node, not per thread on
		node. But this is just a matter of subdividing at target.
Emptying Queues:
- Each thread has its own incoming queue (option 2 above)
	- Msg pre-separates the sparse matrix per thread basis. Could be costly,
		requiring substantial duplication of msg per thread.
	- Need some care to handle msgs put back on queue as it is being
		cleared.
- Shared queue between threads
	- Need to ensure that any given object is handled by only one
		thread at a time.
	- Could do dynamic load balancing: just hand out targets as threads
		request them.
	- Could also partition based on object DataId. OK only if there
		are many target objects.
	- Something like this needed for async msgs arriving on a node.

Just implement a PsparseMsg and see what happens.
=============================================================================
10 Dec 2009.
Parallel sparse Msg and other Msgs.

Potential output queues: 
	- global: to go to all threads and nodes.
	- local: to go to specific threads and nodes
	- group: to go to groups of threads and nodes.

For a typical neural network with 10K randomly assigned targets per synapse:
	- If # nodes serving network is < 1K, we will usually want to
	send spike events to all the nodes/threads handling the network,
	as there will usually be one or more target neurons on each node.
	- Here we want each of the process threads to dump msgs into its own
	output queue, and later merge all the queues for processing.
	- Each process thread will have its own sparse matrix to handle the
	correct subset of synapses.

For a more 'clumpy' network where data goes to a small subset of threads,
	typically from within the small subset:
	- We want comms to be global within the subset. See above.
	- All other comms should be node specific. See below.

For a particularly sparse network, where any given Msg goes to a small random
	set of other threads:
	- Have thread-safe queues for each dest thread
	- Msgs know which target thread to go for.
	- Each 'send' call is directed by the Msg to the appropriate queue
	- When done, each local thread scans its input queue.
	- Msgs are set up with suitable subset of targets for the thread.

SUMMARY:
If we merge the 'global' with the 'group' cases, we need to maintain only
as many queues as there are threads + groups.
	- Threads within a group:
		- each thread has its own 'output' queue for data to go 
			within the group.
			- No special threading stuff for adding to queue.
		- Each group as a whole maintains an 'input' queue for
			stuff coming into the group from other groups.
			- This queue has to be thread-safe.
	- Threads outside any group:
		- Maintain only the thread-safe 'input' queue as above.

Any given Msg is between two Elements. We will assume that this pair is 
always in only one of the categories above: within a group or outside a group.

Data transfer of 'group' queues, from perspective of each thread.
	- During process, put off-group stuff into off-group queues.
		- on-node other threads; and off-node data each have queues.
	- During process, put in-group data into own 'output' queue.
	- When Process is done, consolidate all in-group 'output' queues.
	- Send consolidated in-group queue to all nodes in group
	- off-group, on-node queues are handled by their owner threads.
	- Send off-group, off-node queues to target nodes.
	- Receive consolidated queues from on-group nodes.
		[further consolidate?]
	- Receive mythread input queue from off-group, on-node threads
	- Recieve anythread input queues from off-group off-node
		[Consolidate input queues ?]
	- Iterate through consolidated queue for in-group, on-node.
	- Iterate through consolidated queue for in-group, off-node.
	- Iterate through input queue for off-group, on-node
	- Iterate through input queue for off-group, off-node.
		- Each thread will have to pick subset of entries to handle.

Data transfer of 'non-group' queues, from perspective of each thread:
	- During process, put off-group stuff into off-group queues.
		- on-node other threads; and off-node data each have queues.
	- During process, put own stuff into own input queue.
	- off-group, on-node queues are handled by their owner threads.
	- Send off-group, off-node queues to target nodes.
	- Receive mythread input queue from off-group, on-node threads
	- Recieve anythread input queues from off-group off-node
		[Consolidate input queues ?]
	- Iterate through input queue for off-group, on-node
	- Iterate through input queue for off-group, off-node.
		- Each thread will have to pick subset of entries to handle.

This is surprisingly messy. NEURON assumes everthing is in same group,
and broadcasts everything. Single group is probably sensible also for any
simulation run on a multicore single node system. However:
	- graphics threads will typically be off-group
	- Parser, systems setup and control threads will be off-group.
	- Could treat each solo thread as a one-thread group, thus reducing
		the problem.
	- On a single node, the overhead with consolidating everything into
		a single queue and scanning through that on all threads is
		not too bad. Main issue is skipping uninteresting msgs.

From the Msg viewpoint within a group:
	- addToQueue: Dump all outgoing stuff into the local thread queue.
	- Then by magic all queues are consolidated
	- Qinfo::clearQ: goes to Msg,
		- Msg decides what it should do on current thread.


- If Msg has < 100 targets, just do it on any given thread (depends on weight
	of each target func)
- If Msg has lots of targets, split by # of threads.

=============================================================================
12 Dec 2009.
Thread management. How does each msg know which thread it is on?

Clearing Q:
Clock, therefore Tick will know threadId.
Qinfo::clearQ could take an argument for the threadId
Msg::exec currently only takes buf as an argument, could also take threadId.
	Do we want to insert thread id into Qinfo? No, the buffer is shared.
	Options:
		- single Msg for all the targets, and it picks targets by thread
		- multiple Msgs, one per thread
	We need to be able to rebalance the targets. Also need a single point
	of reference for properties of msg. So use single Msg, pass in threadId.

Sending msgs:
Tick::advance( ProcInfo* )
Conn::process( ProcInfo* )
Msg::process( ProcInfo* )
Element::process( ProcInfo* )
Data::process( ProcInfo*, Eref )
SrcFinfo::send
Eref::asend, Eref::tsend
Conn::asend
Msg::addToQ
	While we have ProcInfo, we can put threadid into it.
	At this point the send functions do not handle thread info in any way.

Do we want to pass in threadId or qId?
	- threadId combines with internal Msg info to work out queue.
	- qId would be more explicit but would need some logic that depends
	on internal Msg info anyway.

Do we keep track of threadId within the node or for the entire system?
	- Related: is there a global we can access for the node Id?
	Well, we can pass ProcInfo around everywhere and it can keep track of
	thread as well as node id. Assume all is known.

Where do we assign and create threads?
	- Clock::start creates threads that last till end of run. 
		- Calling thread (from Shell) goes to sleep till run done.
		- each Tick advances through the sim schedule taking the 
			threadId.
		- We need to manage barriers or conditions to ensure thread 
			sync, within each Tick::advance.

OK, went through and implemented passing in of ProcInfo ptr into all 'send'
functions. Now we have thread info everywhere. If ProcInfo also holds node
info that too is present. Lots of changes. Would like to check in here but
am off net.

Valgrind: is happy.

Next step: start off simulation with optional # of cores. There really should
be a system call to find # of CPUs. We would typically use 1 thread on 
Shell, assorted threads for GUI, and then as many threads as there are 
cores for the simulations.

Minor addition to command line so moose can start up on specified # of cores.
moose -cores <n>
Default, of course, is 1. Would like to autodetect.

Implementation.

Shell should have a 'start' function which sets off the clocks.
This should be on thread 0, and it should block. 
Issue 1: We currently do not allow multiple shells. If we do, we will 
be in trouble because of assumptions about the thread with the shell,
and the use of static globals on it.  Defer for now.
Issue 2: Pthread_create( thread, attr, start_routine, arg)
	This is a bit awkward with C++. I will want to write a static function
	that goes to the appropriate Clock (there may be more than one) and
	identifies the appropriate thread. So my arg will have to identify
	both the clock and the thread. 
	

Need 2 barriers per tick: end of clearQ and end of Process.
Is there an efficient way to do this?
Condition variables: Each worker increments barrier count, this goes
on until it reaches # of threads available. Then send a signal to all to
proceed. This may well be what barrier does.

For now, just plug in the barriers. Later we can try for efficiency.

Do we make one clock+ticks set for each thread?
	- Barriers means that any calculations on them are redundant.
	- With one set, how would we call Tick::advanceThread?
	- We could have just thread0 manage the Clock juggling of threads
	- All the other threads do the 'advanceThread' call, but with
		a distinct procInfo.

=============================================================================
17 Dec 2009
Various options for handling threads and scheduling.
- Use current format, have the FIRSTWORKER thread advance and sort the 
	ticks. The other worker threads go through the same loops but don't
	alter any ticks. 
	The call sequence remains the same. 
	- Starting simulations: This is a bit tricky. 
		- clearQ calls will block, leaving entries dangling.
		- Other threads may want to addToQ or clearQ.
		- Note that this issue also needs handling for single-thread
		 	processing. Will also come up when rebuilding messaging.
			Need to shunt all such calls off to a local queue,
			but how do we clear it? Probably in Process.

- Make separate clocks and ticks for each thread.
	Easier call sequence, but tricky managing all the objects.

Let thread 0 be the parser thread. 
	- In single thread mode, parser has a non-preemptive event loop.
	This calls the GUI, the TTY and then the clearQ and Process
	for the shell, directly. Has to call clearQ because we may have info
	going to different programs, and for symmetry with multithread mode. 
		- The shell calls start on the clock, and does so directly:
		Not through the clearQ mechanism.
		- The shell knows the disposition of threads, and decides if it
		should call the regular start or just set off new threads.
	- In multithread mode, we run GUI, TTY and parser on separate threads.
	The parser is thread 0 and does a similar event loop with clearQ and
	process, except that it does not have to handle the GUI and TTY.

Likely threads: Parser, Python, TTY, GUI, then workers etc.

=============================================================================
21 Dec 2009.
Checked in 1491 with initial arguments to main() to select threading options. 

Starting sims: Where to create threads?
	- On Shell:
		- It knows all about the threading/node structure
		- Needs to call a Clock function directly: unpleasant
		- It has a clean way to separate 'start' calls away from clearQ
	- On Clock:
		- It has to ask Shell about threading.
		- It can deal with the clock functions internally.
		- No clean way to separate 'start' from clearQ.
		- Conceptually, the separate of clock calls is a scheduling
			not a shell function.

Looks like the Shell is the way to go.

Checked in as 1492.


Need to Fix up Ids to only handle Elements. Let Erefs deal with indices.
=============================================================================
22 Dec 2009.
Set up Shell::start which calls single thread or multithread versions of the
scheduling.

Setup seems to work, I create threads and harvest them. Now to actually get
them to do some work. Checked in as 1494.

Implemented threads through to TickPtrs.
Working on compilation.

Compiled, OK. Working on testing threaded clock tick sequencing. A little
tangent to implement setClock in Shell. Stuck in checkGet/checkSet,
which for some reason wants to prepend set_ onto the field name. This should
only be done in ValueFinfo, not in any of the others.
I see what happens: SetGet is quite independent of Finfos. 
I should separate out a SetField and GetField templated function from
the basic SetGet1< type >.

Done. Now we have Field<type>::set and Field<type>::get for doing fields,
which puts in the set_ and get_ prefixes. The others all use the regular
names of the field.
After some more work this now goes some way into the barriers before crashing.


=============================================================================
27 Dec 2009

Incremental progress on getting threaded scheduling to work. The usual
pthread pains.
At this point I have the system sometimes giving the correct sequence with
2 or 3 threads. 
checked in as 1498.
Rather reliable hang at 4 threads.
Seems like thread 0 has gotten one step ahead of the rest, and is hence
clearing the barrier instead of thread 2.

=============================================================================
28 Dec 2009
Turns out that this same problem (thread 0 getting one step ahead) can also
happen even with 2 or 3 threads, only less often than with 4 threads.

Sprinkled lots of barriers around in Clock::tStart. This fixed it. Works
for as many as 32 threads. Now to clean up. Checked in as 1501.

Trying to set up using mutexes. But how to set up the flag for the mutex?
=============================================================================
29 Dec 2009
Wrote a much tighter version of the Clock::tStart function that uses a
mutex and a counter variable to manage sorting and looping for all threads.
Compiled. Clears with 32 threads, but I'm a bit dubious about the 
stepping. Look at the sequence of output here:
Advance at 7 on thread 0
Advance at 7 on thread 0
Advance at 8 on thread 1
Advance at 8 on thread 0
Advance at 9 on thread 1
Advance at TickPtr::advance: post barrier2 at time = 9 on thread 1
Advance at 9 on thread 0
Advance at 9 on thread 1

=============================================================================
30 Dec 2009.
Analyzing sequence
1. Not reaching final tick. Stops at t=9.
2. The tick sequence is OK except that the barrier needs to be in the
	ticks, not the tickPtr.
3. The tStart routine goes through its while loop sometimes without
	movement on the TickPtr::advance. This seems to be due to the 
	nextTime_ field not really advancing, and hence a dummy attempt to
	get TickPtr to advance. Need to check. Confirmed. Turns out it happens
	even with the single-thread scheduling. Inefficient but the end 
	sequence is still OK. Let's fix. After analysis, looks OK.
4. Does too many steps as reported in "Advance at <time> on thread <t>"
5. Can we eliminate the second barrier on TickPtr::advance?
	- It is safe to assign nextTime_ when the first thread emerges, since
		all threads will have crossed the only reading of nextTime_.
	- When the first thread emerges, it should be safe to sort the 
		TickPtrs. Probably should use separate mutex.

	
There is a nastier problem with the threading case, in TickPtr::advance.
The issue is that I use thread 0 to advance nextTime. If thread 1
happens to emerge first nextTime is not incremented, so the thread is
able to go around the loop till the barrier again. Need to protect
nextTime using a barrier, or to have one independently for each thread.

Brute force implementation using a barrier works. But there is still oddness
in the sequencing of 'Advance'. Checked in as 1506.

Some cleanup by way of eliminating barriers in TickPtr::advance. More to go.
Checked in as 1507.

Figured out why the "Advance at <time> on thread <thread>"
sometimes does an extra round for one thread or another. The cout is
called after the function emerges from TickPtr::advance. If the second
thread to emerge does so after the first thread has done the sortTickPtrs,
then nextTime_ will already have been incremented. So the second
emerger reports a different time. No functional impact.
Item 4 above has the same issue, and can also be ignored.


Next steps:
- Implement item 5.
* Move barrier into Tick.
* Implement thread sched test as unit test.
- Set up real calculation, check values
- Benchmark
- Implement condition_wait instead of barrier.
- Benchmark with condition_wait instead of barrier.

=============================================================================
31 Dec 2009.
Moved barrier into Tick. Compiles, seems to work. Need to convert the printf
debugging of the threaded scheduling into a unit test.
=============================================================================
1 Jan 2010
Some cleanup of printf debugging. Checked in as 1515. 
I want to try to eliminate the remaining 'barrier' call in TickPtr::advance,
and replace it with a simple mutex. This did not work. I need to come back to 
it.

Implemented thread sched test as a unit test.
Done. Works. Checked in as 1516. Valgrind isn't happy though. Perhaps I need
to free some more barriers and things. Did so. Still isn't happy.
Checked in as 1517.
Turns out this is a known bug/feature of pthreads on Linux. See 
https://bugzilla.redhat.com/show_bug.cgi?id=483821
The discussion indicates that pthread_exit doesn't quite clean up, and
that it isn't likely to be fixed. So I'll leave it at this. It is only 56 bytes.

Onward now to setting up a real calculation. First phase is to totally
mess up the queue handling system. For now I've gone for a double-buffer
arrangment, but perhaps this is a false economy. For multinode stuff I'll need
to memcpy data onto the MPI outgoing buffer, anyway.

=============================================================================
3 Jan 2010
Is memcpy thread-safe? That is, if I have two adjacent segments of memory
into which I copy data, can I do this on different threads and be sure that
they will not step on each others' memory at the boundary?

Need a bit more general handling of mergeQ/readQ/clearQ/addToQ.

mergeQ is supposed to take writable per-thread Qs, combine them into another
	Q, and clear the per-thread Qs.
readQ is supposed to march through a Q performing operations as it specifies,
	perhaps by many threads at once. The Msg::exec function does the
	operation. For example, Tick::advance calls readQ on many threads.
	Each Msg::exec selects some range of Msg targets to scan through with
	the operation, set by the combination of threadId and Msg target list.
clearQ is supposed to zero out the Q contents.
addToQ puts data into the specified queue. We need to separate this function
	into the thread-unsafe version, which is called by Msgs operating
	within a group, and the thread-safe version, which is called when
	Msgs send data outside their own group.

Should I separate out the input and output queues, that readQ and addToQ 
	work on, respectively?
	- It will make it OK to allow immediate operations that affect Qs,
		during readQ. For example, the 'get' function needs to put
		data into a queue.
	- Still does not eliminate issue of thread safety in cases where
		many threads must write to same Q.

Group: has one inQ, and as many outQs as there are threads. These outQs
	do not need to be thread-safe, they are protected by the scheduler so
	they only get input from their own thread.
	The inQ is thread-safe. Data typically comes into it only during
	'process'. During 'read' and 'clear' it is blocked for write access.
	During 'process' it uses mutexes to protect data coming in. The
	Tick also does a mergeQ which takes data from a set of outQs and
	combines them into the inQ. This step looks like it has to be serial,
	which is unfortunate.

	- When doing MPI: Each group wants to 'send' all local info 
	to all other nodes working for the group. So it will want to do a 
	'send' on the inQ. This can happen on one thread while the worker
	threads clear the inQ on their own. However the MPI man page suggests
	that one should not access the contents of the send buffer till the
	send completes. See below for how to put these together.

Structural options with threads vs MPI:
	1. Always use MPI, never use threads. Suggested by a couple of people,
		also compatible with BlueGene machines.
	2. Always use threads, and use MPI only in virtual shared-memory mode.
		Never heard this option, sounds dubious.
	3. Use threads on local node whenever multicore, use MPI between nodes
		whenever multinode.
	4. Use threads on local node whenever multicore but no MPI, otherwise
		use MPI both for local cores and for other nodes.

For now, and based on the MPI analysis below, it looks like #1 would
be terribly slow. Worth benchmarking though.

For pure MPI, there are a couple of options:
	1. blocking vs non-blocking calls. Blocking is slower and prone to
		locks. Non-blocking requires extra buffers
	2. Async vs sync. Much better comm/comp balance if async. If we provide
		a guarantee that the async does not slip too far, we're OK.

For now, assume non-blocking and async.

For pure MPI, this is how data would go:
	1. Local node has a single outQ and one inQ. It has separate extQs,
		one for each group in the simulation.
	2. During Process, it adds data into outQ, and into each of the 
		extQs as per message targeting.
	3. At end of Process, each node sends a special message with currTime
		to node 0. Node 0 also sends info about the most laggard
		currTime.
	 	On all nodes it then copies outQs onto inQ. InQ goes into
		a 'send' buffer. Each mpiQ goes into its respective buffer.
		All these buffers go out using iSend calls.
	4. System always keeps an irecV posted for 'world'. 
		Whenever a 'test' clears and data has arrived, it grabs 
		data and pushes it into inQ, and posts another irecV.
		Could use memcpy or double buffering.
	5. At regular intervals throughout clearQ, it checks for arrival of
		data, and does 4 if so. Since the inQ is circular, it could
		clear up data as it goes along.
	6. On node 0, when the special Msg with the currTime arrives, it
		analyzes that and decides about load balancing. At the least
		it would send out a message to the way-ahead nodes to throttle
		back. If throttling, any given node, 
		it continues in the clearQ loop from 4 till node 0 sends to say
		to resume.  This won't be needed if we have a
		step lock for sync data.
	7. At end of clearQ, it zeros out the queue.
	8. At regular intervals throughout process, it checks for arrival of
		data, and does 4. if so. Note it does not do clearQ, just 
		accumulates data.

From the viewpoint of Queues, what we take from this is that if each node
is multithreaded, the queues needed are:
	One thread-safe inQ for each group on the node
	One non-safe outQ for each thread (i.e. all within-group threads)
	One thread-safe extQ for each non-self group in the simulation, 
		including on and off-node.
Buffers needed:
	One for catenation of all outQs
	one for each extQ

So the Queue has to also have info about groups. 
	Each group is known by: 
		# of local threads
		Group start index to index outQs
		list of external nodes or
		COM of external nodes?
	
So the indexing of queues is:
InQ: group #
outQ: groupStart + outQ #

So the inQ and the extQs are in the same set of indices, and the groupStart
begins at #groups for group 0 and goes up accordingly.

Actually this doesn't work, since it would involve renumbering queues when new
groups are added. So the current structure is:
InQ: first available #, in other words, groupStart.
outQs: Next set of numThreads #s.

When we do a mergeQ, we identify the group# and the rest happens internally
based on the Queue grouping.

Implemented, compiled, doesn't run. But many things have changed so I'll 
check it in. 1522.

=============================================================================
5 Jan 2010
Added a line in the unit test for Ticks : Qinfo::addSimGroup. This fixes up
the system, it clears the unit tests for many threads. But now there is a
problem that the unit tests will mess up subsequent scheduling. So I need
to put in a function to clear out old sim groups too. This will be tricky,
as all messages have to be recomputed. Should be responsibility of the 
Shell.

Implemented a stub function for Shell::loadBalance. It is called at init, and
can be called later. This replaces the deprecated Qinfo::setNumQs
Runs, clears unit tests with up to 16 threads. Valgrind is also OK with it
with the same caveat about 56 bytes.
Checked in as 1524.

=============================================================================
22 Jan 2010
Finally back to work after a bad spell of meetings and other duties.

Minor cleanup of headers. 
Did explicit seeding for the random number generator for the matrix unit tests.
Checked in as 1541.

Working on framework for a proper test. Given the current structure, the
remaining step is to assign workloads to the appropriate thread. 
Tick::advance( e, ProcInfo* info)
	if ( info->isFirstThread() )
		Qinfo::mergeQ( info->groupId );
	Qinfo::readQ( ProcInfo info ); // threadId also identifies outQ index.
		extract the Qinfo from the outQ buffer using info->threadId,
			which also identifies outQ index.
		sometimes: do hackForSendTo. This will require care about outQ
		Normally: extract msg from Qinfo
			m->exec( buf, info )
			Msg::exec needs two kinds of info from the ProcInfo.
				- a way to pass threadId to the op,
					in case it does output
				- A way to decide which subset of events to 
					operate on, based on the thread#
					within the group. Note that this cannot
					be the threadId, as the threadId may
					be reassigned.

This is OK for within group messaging. Need to work out how to pass
messages to other groups: they will have their own InQs which will typically
be busy during clearQ. 
	Options:
		- Do not allow messages to go out during clearQ
			- But we already have a return message in get()
				which is messy as it uses the Shell ProcInfo.
		- Have a thread-safe inQ buffer for each group, for messages
			coming in from outside.
	Do this later, after testing the within-group messaging.


Did the first phase from Tick::advance till Msg::exec. Lots of cleaning up
of code, went well. Compiles but doesn't clear unit tests.

=============================================================================
23 Jan 2010
Fixed, clears unit tests. Checkin 1543.

Setting up the ProcInfo to pass the right values in. Croaks. Turns out
that we have added two SimGroups: one for the shell, and one for everything
else. However, this fails because the # of threads is just numCores, whereas
the shell is assumed to be on another thread.

Went through and fixed up the non-threaded calculations. moose -s.
Now clears unit tests with this. Checkin 1544.
Now got it to work with different numbers of threads. Checkin 1545.
Next step is to build matrix using threading to decide which messages to
send where.

Some work to do in defining what Elements/Messages belong in what group.
	This determines which threads they are on, as well as numerous other
	things. 
For now I need to get the system to work just enough to do the IntFire network
	test.

=============================================================================
24 Jan 2010
Working through getting the IntFire network to be scheduled through threads.
Current problem: the Qinfo:mergeQ( groupId) function in Tick::advance.
How do we know which groupId to use? The ProcInfo holds the thread# in the
group, but perhaps it should also hold the group#. Done.

Difficult patch. Converting the original single queue array into inQ and outQ.
Much cleanup. Compiles but crashes.
=============================================================================
25 Jan 2010
Struggling with bugs. Cleared first one in mergeQ. Checkin as 1547.

Next one is stuck with the 'get' function in testGet():207.
=============================================================================
26 Jan 2010.
A lot of struggling later, turns out that the issue was that now I have
separated inQ and outQ, and the data was still waiting in the outQ. So it
just needed another clearQ call.

Having cleared that test, now on to the next one: testSetGet().
Same issue here: I need a double clearQ. With that in place, it clears all
the unit tests except the last one, using the -s option.
Checkin as 1548.

Fixed a bug in setting up number of threads in each queue. With that done, the
system clears all but the last unit test for various # of threads.
Checkin as 1549.

Narrowed it down to the SingleMsg between the clock tick and the 
IntFire element.

Replaced the ad-hoc message creation with SingleMsg::add. This took a bit
of work on setting up the message stub in IntFire, but it worked for single-
thread mode as well as up to 4 threads. Doesn't yet do partitioning of the
workload, but it clears unit tests.
Checkin as 1550.

=============================================================================
27 Jan 2010.
Further progress, got it to call the IntFire::process, which seems to be
happening in the correct sequence over all threads. Still crashes at the
end of it, and not clear yet if it is doing the right calculations.
Also I can now see a problem with the scheduling in moose -s (single-thread)
mode. 
Checkin as 1551.

The crash at the end of the run is due to left-over data in outQ_[0].
However, outQ_[0] should be reserved for the SimGroup0, which is used by the
Shell, and not touched by the runtime calculations.

Bypassing for now, working on PsparseMsg and its compilation.
Checkin as 1553.

=============================================================================
28 Jan 2010
Put in a unit test for the load balancing function in PsparseMsg. Works.
Tried out PsparseMsg in the testThreadIntFireNetwork. Still doesn't do what
it should.
Checkin as 1558.

Fixed up thread partitioning in Element::process. Currently hard-coded
in, doesn't look pretty, but clears tests till the final queueing segv.
Still need to sort out the threaded message inputs.
Checkin as 1559.

Minor hack to patch the final queueing segv by clearing the queue manually.
Still to properly track down, but at least it now clears unit tests.
Fix to the Element::process subdividing target Element indices.
Checkin as 1560.

The potential in IntFire does not cross threshold as we init it, so the 
network does nothing.
Looks like the initialization of IntFire isn't right.
=============================================================================
29 Jn 2010
Fixed a problem with the Qinfo::addToQ, which was putting everything into
outQ_[0]. Now there are some events coming through to the IntFire in the
thread test, but not as many as there should be.

With more debugging it gets messier. Most (usually all) of the first round
of spike messages go into just one thread. No subsequent messages emerge.

Lowered threshold so that all neurons will always fire.
Now all outQs hold the identical # of requests, all steps.

Raised threshold a bit to 0.1. Earlier was 0.2. Now we have
variable firing, but firing happens on all outQs. Except first step,
	where again almost all output is on a single queue.

Crashes occasionally, more often with more threads.

Checked Vm. That was it. It is only being set on one of the threads, the
first one.

Closer check. Turns out Vm is set correctly on all objects, right up to the
line before Shell::start in testThreadIntFireNetwork(). Something else
happens to zero it out on all but one thread.

Is there an issue with field access by indexing? Something odd about the
addresses of the IntFires.

Tracked it down to a silly pointer assignment error in Element::process.
With that fixed, it looks like the whole things works, including the 
numerical values of the Vm on different IntFires.
Also I'm not seeing crashes.

Checkin as 1562.

Some benchmarks. Increased runsteps to 1000 in testThreadIntFireNetwork(),
compiled with O3.

Previous	./moose		./moose -c 2	-c 4		-c 8
36.22		35.8		42.6/21.9	41.2/21.9	40.2/21.2
36.19		35.7		42.8/22.1	41.3/21.9	40.1/21.2
36.17		35.8		42.7/22.0	41.3/21.8	40.1/21.3

Surprising scaling with more threads. I really need to do profiling on this
to see where the loss in efficiency comes. 
I suspect in memcpy, as more threads don't seem to matter.

Made profile files:
profile.1thread
profile.2thread

I don't really see any difference. Not sure how to handle gprof with multiple
threads.
=============================================================================

2 Feb
Trying to set up unit tests for IntFire in scheduling, independent of #
of threads. Uses Vm as the calculated quantity. Currently doesn't even
come out.

TickPtr is a mess. Should just have the pointer to a Tick, as the TickPtr
gets sorted and hence shuffled all around. Instead it has a vector of 
pointers, and other nasty stuff.

Also the sort function should get rid of Ticks that lack targets.

Also the selected Conn should be specific for the tick, not a generic one.

What has happened in this bug is that there are two Ticks with small enough
dts to be called: tick0 (set to dt = 0.2) and tick1 (legacy set to 1.0)

The message to the targets was hard-coded to be on slot 10.

The Tick::advance doesn't care which tick it is, it just calls the Conn on
slot 10. 

Clearly need to do some designing here.

Step 1: Setting up messages from Tick to target Elements.
Alternatives:
	- Original idea had been to have a separate conn for each tick,
	indexed by the Tick index. Traversal efficient.
	. Issue is that the regular Msg::add function assumes the ConnId from
	the SrcFinfo, which is hard-coded. 
	. I can fudge this using a special Msg::add variant, but then the 
	SrcFinfo information does not agree with what is on the Msg. This
	may confuse traversal functions.
	. I can fudge this too using a series of 'process' SrcFinfos, one
	for each tick. This is easy but a hack.
	- Alternative: use regular messaging. 
	. Issue is that we will need to serially traverse the msgs in the Conn
	till we find the one(s) that have the target Elements for this Tick.
	All the targets will sit on the same Conn.
	- Alternative: Separate Elements for each Tick.
	. Issue is the use of pointers to other Elements within the Clock.
	# This really comes back to the bigger pending issue of multilevel
	object indexing.
Decision: Use the simple option of having a series of 'process' SrcFinfos

Step 2: Ticks and TickPtrs. 
	- Original idea: Ticks are separate array entries in the Clock.
	TickPtrs were supposed to have managed these in a lightweight manner so
	that sorting of TickPtrs is cheap. Furthermore, we should not have to
	manage unused Ticks at all.
	. Issue: TickPtrs are now heavy, with vectors in them. Bad to sort.
	. Issue: Unused Ticks are currently still managed. Can solve this
	using info about which ticks are connected to targets.
Decision: I've removed a couple of fields from TickPtr. I think the rest,
	including the vector< Tick* >, are OK for now.

Step 3: SetClock, UseClock, Resched, rebuild: High-level control functions.
	- Original idea: Genesis BC options, would like not to have to do this
	at all.
	. Issue: need automatic scheduling.
	. Issue: We need to use SetClock anyway as display needs it.


Step 4: Automatic scheduling of elements.
Alternatives:
	- Predefine certain ticks for each kind of object. For example,
	t0, t1 should be for all neuronal modeling objects.
	. Issue: Solvers. Do we have a separate tick for each solver type?
		Worse, if we have two identical nonuniform dt solvers, do we
		need two ticks for them? Or do the ticks only define external
		update times?
	. Issue: Different solution methods. Suppose we do some mols using
		Gillespie, and others using RK5.
	- Assume we will always have a SimManager of some kind. This does
		load balancing, scheduling, and so on. The default one
		knows about solvers for neuronal and signaling models.
		This doesn't deal with any of the higher-level funcs, and
		instead sets up suitable messages directly.
	. Issue: Where do we go to set plot dts? Separate, unlocked thread?


Checkin as 1566 prior to starting work on these.

Implemented step 1. This already fixes up the problem with 
testThreadIntFireNetwork() in testScheduling.cpp.
Checkin as 1567.
Step 2 has also already been done.

Cleanup of unit tests. Clears up to 17 threads (more gets too big for the
SparseMatrix limit).
Checkin as 1568.
Valgrind is happy, up to the last 56 bytes.

Fixed the bug with the simulation duration in -s mode. May need to revisit.
Checkin as 1569.

Ran the benchmarks again on a 4-node machine (gj: AMD Opteron 2.4 Ghz)

./moose		./moose -c 2	-c 4		-c 8
41.1		36.7/19.1	39.8/11.2	43.8/12.4
41.5		43.8/24.1	40.8/11.1	44.0/12.4
41.3		39.2/20.5	42.1/11.5	43.4/12.4

So it looks like the scaling on these machines is far better than on the
laptop. Almost linear speedup with # of threads. Unclear why it is so much
better scaling than the laptop was.
Laptop: Intel(R) Core(TM)2 Duo CPU     U9400
GJ node: Dual Core AMD Opteron(tm) Processor 280
Anyway, it is reassuring because I had been wondering how to do benchmarking
to find out why the laptop wasn't scaling well.

Next steps:
- Test on 8-core machine.

- Set up MPI-based parallel calculations
	- Shell::create and 'add'
	- MPI picks up and sends out appropriate inQs.
	- Polling iRecv for incoming stuff
	- Figure out which queue to put the incoming stuff.
	- One thread broadcasting Shell commands to all nodes.
	- Hard-code setup of IntFire test.
	- Parallel Element creation
	- Parallel Message creation
	- Deferred object instantiation at time of Shell::loadBalance
		- may not work, because typical scripts do field assignment
		right away.

=============================================================================
2 Feb continued.

Ran the benchmarks again on an 8-node machine
(ghevar:  Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz)

./moose		./moose -c 2	-c 4		-c 8		-c 16
25.0		22.9/11.9	21.6/5.9	22.2/3.2	31.4/3.2
28.0		22.9/12.5	22.0/6.0	23.5/3.8	30.1/2.9
28.1		22.8/12.4	21.6/6.1	23.6/3.8	31.5/3.1

Also moose -s seems to go quite a bit faster: ~23.5 sec 
Unfortunately the -c segvs with some of the higher core numbers: 15, 17.
Overall, looks pretty linear. The hyperthreading is occasionally helpful,
in some other runs I've gotten it as low as 2.4 sec on 16 'cores', which means
hyperthreading on all 8 cores. There is a lot of variability.

=============================================================================
5 Feb 2010
Put in hooks for Shell::create and Shell::add functions. Involved making
4-argument OpFunc, SetGet and SrcFinfo.
Checkin as 1583

=============================================================================
14 Feb 2010
Working on Shell::create. Compiles, crashes on test.
Turns out to be a fairly fundamental problem with argument conversion in
messaging, specifically for strings.
I need to extend the Conv<T> class to return a pointer to the desired 
object, which will normally be a direct cast. For strings, I need to be
clever to handle the conversion. Perhaps the way to go is to create an
instance of the Conv<T> object, which typically is just the desired ptr.
But for strings it does a local allocation etc.
Will need to do benchmarking after all this to ensure we don't slow things
down massively.


Some design thoughts regarding interaction between parser and shell.
3 options:

Option 1:

	Node 0				Node 1
	Parser
	  ^ |
Regular	  | |
funcs	  | V
	Shell::interface funcs
	(Handles sync)
	  ^
Msg	  |-------------------------------|
funcs	  |                               |
	  V                               V
	Shell::msg funcs		Shell::msg funcs

- Needs ptr to shell in parser, or static interface funcs.
- Shell::interface funcs are blocking so that the msg funcs return
- Needs 2 layers of funcs in Shell (interface vs msg)
	OR
  Needs separate interface class.


Option 2:

	Node 0				Node 1
	Parser
	  ^
Msg	  |-------------------------------|
funcs	  |                               |
	  V                               V
	Shell::msg funcs <------------>	Shell::msg funcs
			  Sync and merge

- Needs parser to talk to the msgs, as it goes out to all nodes.
- Sync and merge looks messy.



Option 3:

	Node 0				Node 1
	Parser
	  ^ 
Msg	  |
funcs	  V
	Shell::interface funcs
	(Handles sync)
	  ^
msg	  |-------------------------------|
funcs	  |                               |
	  V                               V
	Shell::msg funcs		Shell::msg funcs

- Needs either ptr or msg interface on parser. But both of them are
	awkward, since parser funcs would like to call a func and get a
	return value. The Msgs don't do that.
- Needs 2 layers of funcs, only both are msg type.
- Which level is blocking?  Presumably the first level of Msg funcs.

.......................................................................

Option 2 is silly. Option 3 is awkward and will munge the current parser 
framework. Option 1 it is then.

Some use cases:
create
addmsg
start
init


=============================================================================
15 Feb 2010
Working on cleanup of conversions. This has cascaded down to OpFunc (done)
and SetGet. SetGet is a bit confusing and I suspect it may be ripe for
cleanup. There is a regular 'set' command which does appropriate type
checking and type conversion. Then there is an iSet command, used only in
the iStrSet. iStrSet itself is never used. The iSet does a lot of things
redundantly with the simple 'set' command.

Commented all the body of the iSet and iStrSet out. 
Got the whole thing to compile.
Surprisingly, works all through and clears unit tests. The new test for
Shell::create bails out but doesn't crash. Need to tighten.
Checkin as 1602.

=============================================================================
20 Feb 2010
Not sure why previous compile worked, perhaps I didn't do a make clean.
Anyway, I had to fix up a EpFunc and OpFunc to also use the new Conv syntax.
And it still fails in Shell::create.

Much struggling later, realized that the apparent bad passing of arguments
through OpFunc into Shell::create was just a gdb bug/limitation. Valgrind
was OK with it. The real problem was that new Cinfos were not being put
into the cinfoMap.  With that fixed, it clears unit tests and valgrind.
Checkin as 1609.
Oops, there is a small new leak.

That is probably because I don't delete the test Element.
Working on delete. Now I run into the framework issues I had deferred
- I need to have a parserCreate function that is blocking and runs on the
	parser thread.
- I need to pass the Id of the new Element to all nodes
- I may need to set up arbitrary array dimensions.

I could do this in one messaging call if I expand to 5 arguments, and put the
dimensions of the array in a vector< unsigned int > argument. Or I could
have a separate redimensioning call and do that separately.

Struggling a little now with formalising SrcFinfos and corresponding slots.
Idea is that slots should identify a communications channel. Each SrcFinfo
has a funcIndex, which looks up the Element::targetFunc_ array for the
funcId of the specified Msg.

Items still to formalise:
- Fix up SrcFinfos to use Conv.
- How is a shared message set up?
	- All the funcsIds get assigned. The size of the targetFunc_ array has
		to handle all the possible SrcFinfos even if they are 
		never used.
- How do we handle the typechecking?
	- Need a SharedFinfo much like before. It does all the individual
		typechecks during the 'add' function, which will be moved
		into Shell. See below.

- How do we handle cases where the same 'send' deals with different
		SharedFinfo message targets?
	See below. The SrcFinfo provides a distinct FuncId for each Msg in
	its Conn.
- For that matter, even with non-sharedFinfo targets, what do we do when  a
	single SrcFinfo has distinct FuncIds to call on different targets?
	- Note that the SrcFinfo has a single funcIndex to look up the
		targetFunc.
	- Currently, the target Conn is part of the SrcFinfo.
	: Put the extra info in a relay or hub if needed.
	: Put it back in the Conn, where it was in the earlier MOOSE.
	 	- Drawback: 
			- Conn ceases to be only a wire, now it has func info.
				It has dependencies on what goes over it.
			- If I want to do a piggyback msg I need to add a hack,
				such as making a new temporary msg.
			- For each entry in the MsgId vector in Conn, I need
				a whole vector of FuncIds, one for each
				dest entry in the sharedFinfo target.
			- Multiple SrcFinfos may point to the same Conn. So it
				should be the SrcFinfos who manage funcs, not
				Conns.
		- Positive: Conn now carries all msg info, and can be examined
			like old GENESIS.
	: Do the extra ones on the fly. Then where do I store the dest funcids?
	: Put an array of targets for each entry in targetFunc_.
		- How do I figure out which entry to look up?
	: Make duplicate dummy SrcFinfos. Nah. How would I call, manage, etc?
	: Linked list of SrcFinfos. But SrcFinfos are readonly statics.
	: in Eref::asend, pass funcIndex rather than targetFunc Id into Qinfo.
		- This goes to Conn::asend
		- This goes to Msg::addToQ
		- This goes to Qinfo::addToQ, but at this point the identity
			of the callerElement is lost.
		: I think Conn::asend is the one place where I know that there
			are multiple msg targets. I could successively look up
			Element::targetFunc for each of these targets. The
			Qinfo::FuncId could be set here.
	: Turn Conns into a virtual base class, having one or more Msgs.
		- This is only to make the scanning go a little faster, doesn't
		help with the function lookup stuff.
	: Turn targetFunc entries into virtual base classes, allowing 
		iteration for successive Msgs. Again, only an optimization hack
		and it will be fine to have the targetFunc_ entries just be
		vectors of FuncIds.
	SUMMARY: Conns unchanged. Element::targetFunc_ entries are now arrays
		of FuncIds. Pass not FuncId but SrcFinfo::funcIndex into
		send functions. Resolve FuncIds at Conn::asend, so when we scan
		through each Msg, we lookup Element::targetfunc_ and
		scan through target FuncIds.

- Is the backward direction from one target of the one-to-all Msg a one-to-one?
	Yes.

- How do we specify which type of message we want?
	- Should have an argument (string?) to specify type
		- Set up a static init for each msg to fill name-type mapping.
	Yes.
	- 'add' function needs to be incorporated in the Shell
	Yes.
	- Needs to be taken out of Message.h and Message.cpp
	Yes.
	- Create Message classes

=============================================================================
22 Feb 2010
Clearing the decks before the major rewrite for shared messages.
Compiles, but doesn't clear unit tests.
Checked in as 1610.
=============================================================================
23 Feb 2010
Fixing up the unit tests: turns out that there were issues with testGet
because of implicit assumptions both on the slot used for gets
(require requestGetSlot = 0) and also on the sequence of initialization
of SrcFinfos (require requestGet to be first, so that it has a ConnId of 0).
A bit more cleanup and it now clears unit tests.
Checked in as 1611.

=============================================================================
24 Feb 2010
Implemented the array of FuncIds for each funcIndex. This makes it messier
to delete messages. We need to:
- Scan through all Conns to find which holds doomed Msg. Get Msg index.
- Scan through all SrcFinfos that talk to the affected Conn.
	- erase/remove the FuncId at the affected index.

=============================================================================
25 Feb 2010
Thinking about this. We have a problem with funcIds, because the ability to
completely recreate a message is now compromised. In other words, the mapping
from message creation call to the simulation is now dispersed among
Conn, Msg, SrcFinfo, and the vector< vector< FuncId > > Element::targetFunc_
Points:
- Every SrcFinfo in a SharedFinfo points to the same Conn. Can we create the
	Msg with a subset of the SharedFinfos, even one SrcFinfo?
- Is every Conn accessed by exactly one SharedFinfo at most?
- A complex regionConnect call might decompose into multiple msgs on a Conn,
	but not all of them. For example, we have a projection to all subtypes
	of mitral cell from ORN, but another projection to all subtypes of PG
	cell. This would be fiendish to reconstruct from the outcome. If we
	do store setup info on the Conn, how do we store multiple such 
	regionConnect calls?
- If we have a separate entity storing the original messaging call,
	how do we relate back and forth?
- For economy, we may not want there to be permanent ConnIds or FuncIds
- For speed we do want to have permanent Conn and FuncIds.

All ugly. Deleting Msgs has also become ugly. I want to get back to single
funcId.

Try this:
- Eliminate Conn, Element::c_, Element::targetFunc_
- class SrcFinfo { unsigned short index };
	- If index < msgInfo.size() follow the msg.
- class MsgInfo { MsgId mid_; FuncId fid_; ushort next_ };
	- The next_ field points to a separate vector than the original msgInfo
		Or even pointers.
		Or even make MsgInfo a vector and eliminate next_
- SrcFinfo::send combines ops of Eref::asend and conn::asend, and
	iterates directly through the series of MsgInfos to put stuff in Qs.
- To delete a Msg we now need to just find the Msg on the MsgInfos.
- We may end up having multiple MsgInfos point to the same MsgId. Need to
	do reference counting so we kill it only when all ptrs go.
	Actually it is usually the other way around: msgs themselves are deleted
- MsgSpec lives in a separate indexed vector.
	- Each MsgSpec refers to its subordinate Msgs and SrcFinfo.
	- Each Msg (MsgInfo?) refers to a given MsgSpec ?
- The index off SrcFinfo also points to an entry in MsgSpec?
	- No, since we may have multiple MsgSpecs using the same SrcFinfo.
- Deletes are done at the MsgSpec level, not the low level of messaging.
- Multiple MsgSpecs may refer to the same Msg, for example, in a SparseMsg.
- Multiple Msgs may be referred to by the same MsgSpecs.
- SrcFinfo[0] is the parent->child msg
- SrcFinfo[1] is the Element->msgspec msg

=============================================================================
28 Feb
Suppose we have a SharedMsg with bidirectional func calls. Then both sides
have individual SrcFinfos indexing into their respective msgBinding vectors.
Nothing special needs to be done for the arriving msgs.

After much fiddling with the call sequence, I am now working on compilation.
Lots of templates have to be redone. I have eliminated a lot of
intermediate functions and the system just goes from SrcFinfo::send to
Element::asend to q::addToQ.
In SrcFinfo::send calls there is some work to be done to optimize and to 
perhaps use Conv rather than direct conversions. But there is an extra
data copy involved with the current form.
Need to implement BackSrcFinfo1 etc.

Now working on the SrcFinfo1::sendTo. Issue is that there are multiple
possible target Elements or MsgIds.
=============================================================================
2,3 Mar 2010
SendTo is used when sending data back to src, and when sending data to a 
completely specified target. In both cases the target elm is known.

Cleaned up Id to just have an index to the elm.

SendTo is currently a  problem. In the general case it has to provide the target
elm. So it now requires pretty much everything that the message creation 
itself requires, It may as well do what Set does: create a
temporary message and send data along it. Differences:
- If message already exists then verification not needed.
- May need to scan through target Msgs on msgBinding_ vec to find one that 
	matches. Usually only a few.

Cost of making new message probably bigger, but anyway, this is awkward.

Putting in a new Qinfo::addSendToToQ to put the data in the right place 
=============================================================================
4 Mar 2010
Now grinding through the compilation and cleanup process. Since so much
has been done, time to do a checkin. V1617.

=============================================================================
5 Mar 2010
Compilation grind. Currently fixing up OpFunc.h:GetOpFunc return values.

=============================================================================
6 Mar 2010

Still grinding through compilation. Now into Shell.cpp
=============================================================================
9 Mar 2010.
Compiled through basecode directory. Others pending. Checked in revision 1622.
Compiled entire thing. Doesn't clear unit tests. Checkin 1623.

Fixed minor bug. To my utter astonishment the thing now does clear unit tests.
Checkin 1624.
Also clears valgrind, with the usual caveat about pthreads.

Now to step back and look at the status with respect to multinode testing
* Redo benchmarking.
- Get Shell commands to work for basic functions
+ Get Shared Messages to work
	- Redesign ValueFinfos to be more like an automatic SharedMessage.
- Get Shell Messages to work for basic functions


Benchmarking on gj (opteron 2.4 GHz)
./moose		./moose -c 2	-c 4		-c 8
45		36.7/19.3	43.4/12		44.5/13.0
This is marginally slower than earlier, under 10%.

Minor shuffling to put Shell stuff in a separate directory. Will be handy
as the # of functions handled by Shell increases.

=============================================================================
11 Mar 2010
Two immediate things to sort out:
- Making a SharedFinfo for shared msgs
- Implement node-directed messages for shell operations.
	- Master to all nodes including self
	- Slave back only to master
	Also need harvester routine to check that all slaves have reported back.

Need to work out whether regular addMsg commands exist at all, or if they
are hidden under the MsgSpec ops.

Possible separate steps:
validateMsg: Checks that the src and destfields are compatible. 
	Only needs to go to master node.
createMsg: Makes Msg of specified type and specified MsgId, between 
	src and dest Elements
	Goes to all nodes, master waits till all ack.
	At this point this is a bare Msg, no functions associated.
assignMsgParms:
	Separate step where the Msg-type specific functions, e.g., 
	randomconnect or add_one_target, get called. Node-specific 
	setup stuff may happen here.
bindFuncToMsg: Binds the functions to the Msg, uses Element::addMsgAndFunc.
	May need to deal with a vector of FuncIds for shared Msgs.
	Goes to all nodes, master waits till all ack.
	Once this is done the Msg is live.
instantiateMsg: Fills in values. may want to have this as a wrap-up step
	so that the data allocation, node stuff and RNGs get done here.

These are all elementary functions. They will be coordinated by the function
that sets up the MsgSpecs. Shall that be the only one that the Shell exposes?
OK, let's try it that way.

Id Shell::addMsg( FullId src, string srcField, FullId dest, string destField, 
	);

Id Shell::addMsg( IdList src, string srcField, IdList dest, string destField );
Id Shell::addMsg( IdRule src, string srcField, IdRule dest, string destField );
Id Shell::addMsg( File mapping, string srcField, string destField );


Working on SharedFinfo, and how to validate messages with it.
=============================================================================
12 March 2010
Working on compilation of SharedFinfo. The current stuck point is 
message validation. Existing approach is to use the name of the FuncId.
This is a hack, done because ValueFinfos define two FuncIds: 
	set_<fieldname> and get_<fieldname>
May work out if I instead treat ValueFinfos as a shorthand for entering
two DestFinfos. Maybe SharedFinfos can set up all their contents? In
which case ValueFinfos are just a special case of SharedFinfo.
However, I don't want to exclude the possibility of connecting to just one
of the components of a SharedFinfo.  

Implemented the SharedFinfos and also a new scheme for validating match
for the purposes of setting up message.

Working on the create command. 
- The new elements Id:
	- In theory each node should keep track of everything and this should be
	unambiguous if we just increment the Id each time an Element is created.
		- Assumes fixed sequence of messaging - should avoid.
	- We could get the id on the master node and send it around to all.
		- Safer, let's do this.

=============================================================================
13,14 March 2010.
Compiled, runs, but valgrind not happy. Trying to clean up. Fixed. 
Checkin 1632.

Next steps:
	* Shared Msg between Shells should be set up. Checkin 1633, 1634.
		Issues again with message direction. If we have a reciprocal
		msg, the direction info is only from the calling Elm.
		Added isForward = 1 default arg to SrcFinfo<>::send calls.
		Checkin 1635.
		- Need to change Msg types between Shells so it isn't
		reciprocal: that is just too messy. It is a fairly obvious
		command/ack pair.
		Checkin 1638.
	* Unit test for SharedMsg. Things got too messy with the Shells.
		Checkin as 1636, still to clear tests.
		- We have a mess with registerOpFuncs for SharedFinfos.
			Fixed, now it registers each dest in the SharedFinfo.
		- We have a mess with registerBindIndex across the board.
			Fixed.
		- We still have a mess with isForward. Should not need user
			input at all, should figure out from elms.
		Clears tests, but isForward still a problem. Checkin as 1637.
	- The InterNodeMsg type should be defined, specially so that Shell
		can send stuff to itself and get back acks to master node.
	* Shell::doCreate should do a 'send' on an internode Msg to all Shells.
		It should wait till ack from all nodes.
		- Should the ack return success?
			- If it fails, what do we do to handle?
	- Shell::doDelete likewise
	- Test on MPI.
	- Set up Shell::warning, Shell::error as a stream.
	- Cleanup: go through and eliminate Message.cpp and its standalone 
		messaging functions. The Shell now handles it.

=============================================================================
15 March 2010
Working on msg-based doCreate. Goes into infinite loop. Hard to debug.
Working on implementing a showMsg. This regresses back to Cinfo::init
handling SharedMsgs to init all the entries.
Put in printf debugging fron tests. Compiles, but still stuck in loop.
=============================================================================
16 March 2010
Some sloppiness in handling Finfo registration has caught up with me, and
it is a spiral of problems. So I have to go right back to fixing this.
It will break a lot of the unit tests. Sigh.

Cinfo::init 
	- Copies out parent class Finfos.
		To what extent must we retain base Finfo and func indices?
		- How do we access them? If through name, no problem.
		- Can we always plop a derived class in? We do not have the
			concept of FinfoId. So should be safe.
		- But if we want to replace a class by its derived
			version, what happens? Need to rebuild linkages,
		-> will have to do so by name.
		- Can use a hint in the Finfo to say if it should be 
			registered with a predefined BindIndex. This is
			only to keep the preallocated bind_ vector small,
			useful when we have lots of SrcFinfos. But then why
			would we have a SrcFinfo if it isn't to be preallocated?
			The fields are what will proliferate, and those are
			only destFinfos.
	- To clone or to use original ptr?
		- Clone seems safer
		- Clone requires me to put in an op in all templated SrcFinfos
			as well as OpFuncs. Not on.
		- To use original ptr I'll have to use static creation of
			all Finfos, rather that 'new' allocation in each object.
		- Cinfo will no longer have to clean up Finfos when it is
			deleted.
		- Cannot now overwrite BindIndex and other Finfo fields.
		- Decide if to reuse old Finfo BindIndex. For now, do not.

	- Adds in current class Finfos. If there is a duplicate, free old one
		and plug in new one.
	- scans through Finfo map, registering each one.

Begun implementation. Compiles through to the testAsync.cpp.
Checkin 1640.

Compiles through all basecode files. 
Checkin 1642.

Compiles through Shell and IntFire. In sched there is an old hack come back
to haunt me: in Tick::advance, it uses the tick index_ to look up 
the msgBinding. With the more structured and automated scheme now in place,
this has to be done differently.
	- Set up an array of process SrcFinfos
	- Use the Tick::index_ to look up this array
	- Find the bindIndex from the identified SrcFinfo.
	- Use this bindIndex for calling process.
Done.

Need to deprecate Message.cpp, Message.h, SetGet.cpp, SetGet.h

Now compiles the whole project. Doesn't run yet. Checkin 1643.

Deeper into the murk. I was unable to debug the first unit test, insertIntoQ,
so I wrote a new one to just print out Element Finfos. That compiles but
also crashes.

Fixed issue with Finfo registration. Now clears first two tests. Checkin 1645

Now clears all unit tests except the last one, where I was earlier: using
messaging to request the create call. The problem is that the messaging is
trying to create two elements. Checkin 1646.

Clears all tests. The double create was because I had set up two identical
messages.
Valgrind is still not happy. Tracked most of it down to the Finfo definition of 
Synapse, which was still using heap rather than static Finfos. Fixed this,
also found another leak in testAsync.cpp. Now valgrind is happy. Checkin 1647.

Next steps: pending from 13 March.
	* Shell::doDelete also set up through messaging.
	- Test on MPI.
		- Start up MPI
		- Create Shell and basic Elms on both nodes.
		- Set up default Msg between shells
		- Figure out scheduling
	- Set up basic set of commands as do<Command> with messaging.
	- Set up numerical test with IntFire network.
		- Benchmark
	- Set up Shell::warning, Shell::error as a stream.
	- Cleanup: go through and eliminate Message.cpp and its standalone 
		messaging functions. The Shell now handles it.


=============================================================================
18 March. Put in wrapper stuff for parallel running using MPI. Checkin 1654.
Oops, added in the parallel directory and files. Checkin 1655.
=============================================================================
21 March.
MPI and MOOSE.
First, which parts of the unit tests do what:
- testAsync: Works fine, does more unit tests than the rest put together.
- testScheduling: Croaks badly with segv
- testShell: Doesn't croak, but never terminates either.

testShell:testCreateDelete: OK
testShell::testParserCreateDelete: hangs. This is now clear: it wants 
	as many acks as there are nodes. Currently we don't get acks off-node.
	Hence the hang.
testScheduling.cpp:setupTicks(): OK.
testScheduling.cpp:testThreads(): Croaks.
testScheduling.cpp:testThreadIntFireNetwork(): Croaks.

Fixed the issue in testScheduling: I was making a SimGroup for every node,
but actually each node makes its own. So I commented out the loop and the
testScheduling worked. testShell still hangs. Checkin 1658.

Now again looking at queue handling with MPI. See 3 Jan 2010.
Since threading is always (except for the BlueGene arch) going to be part
of such systems, lets do as follows:
- We maintain a single recv buffer. 
	- Use MPI_irecv to scan for incoming stuff, on the MPI thread. This
		goes on all the time. May need another thread than the 
		Shell thread, if Shell ops are likely to block.
	- Put GroupId in the MPI_tag. It is an unsigned short.
	- Append the received msg into the mpiQ of the specified Group.
- We also have to figure out when we can send the messages. The two options
	are to interleave with MPI_irecv, or to use the the master thread of
	each group. Problem 
	- If we use isends on thread0 within simGroup, we will need to do an 
	MPI_wait on this thread 
	before using the buffer again, to ensure the data is gone. This is
	not so bad, because we can do the iSend as soon as we have filled up
	the inQ, and then do the MPI_wait when the inQ processing is complete.
	Issue of thread safety.
	- If we use iSends on a separate MPI-thread, it will have to be told
	which SimGroups are ready to send stuff, and those simGroups have to
	block from returning (and hence touching the inQ_) till the iSend
	is done and also till the corresponding MPI_wait says the buffer is
	clear. At first we will just have two simGroups: the shell, and the
	processing group.
		- The MPI thread keeps in a loop 
			- test for iRecv, if it has come, assign it to mpiQ
			of appropriate SimGroup defined by tag.
				- A combined mpiQ for all external data is not
				practical for huge numbers of nodes.
				- Use a separate mpiQ for each of the nodes
				contributing to the SimGroup. Test for receipt.
				- As each extnodempiQ comes in, set a 
				mutexed flag to inform owner process thread.
			- check for flags indicating that a SimGroup is
			ready to send its inQ. Not sure if flag needs to be
			mutexed, perhaps volatile will do.
			- sends stuff if ready.
			- check for any sends having completed. 
				- Reports to SimGroup.
			- Check for flags from process threads to call iRecv
			for any completed mpiQs.
		------ repeat loop.------------
			- If a SimGroup is ready, the MPI thread does an
			iSend of its inQ. 
				- It puts in a flag to indicate that the
					process thread has to wait till the
					inQ is sent.
				- It adds the MPI_request to its list,
				and continues on its loop.
			- The MPI thread calls the MPI_test command or its
			variants to check on one or more requests at a time.
			- As soon as the MPI_request is cleared, the thread
			reports back to the process thread of the SimGroup that
			owns the inQ, and liberates it from a condition_wait. 
		- in Tick::advance, after Qinfo::mergeQ, the simGroup sets
		a Mutexed flag to tell the MPIthread to send the inQ. 
		The Tick continues on to process the local-node stuff.
			- After local-node stuff is done, the Tick checks
			if any off-node mpiQs have been received. It goes
			through them.
			- When each off-node mpiQ is done, a mutexed flag is
			set to tell the MPI thread to put them back on iRecv.
			- When all off-node mpiQs are serviced, use a 
			condition_wait to check if the inQ was sent yet.
			- continue with Tick process.
		

		

Unfortunate amount of data juggling here. Would be nice to have a list
	of buffers that we can rotate where needed. Later optimization.
Seems like the way to go is to have a separate set of mpiQs, indexed by
groupId.
Can we direct MPI messages to specific groups? Yes, there is the MPI-tag
which is currently an unsigned short, which will do.

Is MPI thread-safe? This appears to be implementation-dependent. OpenMPI
claims it is, but it is slightly ambiguous about whether this is here or a
goal still. MPI-LAM is not thread safe. I suspect we cannot rely on it for 
now.

=============================================================================
23 March
Working on implementation of above. Instead of regular MPI-sends/recvs
(of which I'd have to do one per node, on each node, I could do an 
MPI-broadcast on each node, but then I'd have to do one per node to receive
the broadast data. Or even more compactly, MPI_all_to_all and its variants
send info everywhere in one step. The bare MPI_all_to_all expects uniform
size buffers, but since I don't know ahead of time what the sizes are
going to be, and since they change each timestep anyway, I may as well
use it with the max likely size.

If we use the MPI_allToAll, then the loop becomes simpler:
mpiThreadFunc:
	Check that inQ is ready: condition_wait perhaps, or maybe barrier.
	AllToAll transmission.
	clear condition_wait for the Tick::advance. Perhaps barrier is better,
		as there are multiple threads to permit.
	repeat loop
Tick::advance:
	mergeQ // This gets inQ all set
	barrier// This is for processing threads, but could add mpiThread too?
	clear the condition_wait for the mpiThreadFunc.
	Start the local processing on inQ. Keep busy while the AllToAll happens.
	condition_wait for mpiThreadFunc to finish. Again, perhaps a 
		barrier is better.

Barriers:
	- We need a separate barrier for each SimGroup
	- We do NOT want to go into a SimGroup if it is not being Processed.
		- The Shell SimGroup is always being processed - or we have
			shell in both sim groups.
		- Can we put the Shell in both its own SimGroup (0) and also
		the numerical SimGroups? 
			- This would halve the need for AllToAll calls, also
			halve the barriers.
			- Will need to create the barriers at the same time
			as we create the SimGroups. So they may as well sit
			in the SimGroups.
			- But we really want the Shell comms to be out-of-band
			wrt the computational ones, so comput can start/stop
			whenever.
=============================================================================
24 March.
Is it good to have the Tick directly coordinate the mpiThreadfunc? Or
even have the mpi steps handled directly by Tick::advance?

If we have a rigid blocking call in the data exchange, then it is simpler
to put the mpi steps in Tick::advance. But we will need another barrier to
get the MPI_alltoall handling thread to complete.
The problem with doing this is that the blocking call should really sit and
wait on one thread while the local inQ is being cleared on other threads.
So we still want it on another thread.

Also another issue emerges with doing the alltoall: If the # of nodes is
large, then this takes a long time and brings in lots of data. This
means that the nodes do only communication during alltoall, and only 
computation once the data comes in. Will need to benchmark to test.


=============================================================================
25 March
Stages:
	- Get mpiThreadFunc to synchronize with Tick::advance
	- Figure out how to coordinate with shell::process.
	- Try out flaggable implementations for alltoall, broadcast, isend.
	- Benchmark.

Got the whole mess to compile again, begun process of implementing
Shell::mpiThreadFunc. Checkin 1661
Added in the mpiThread. It promptly stalled. I need to have a loop of the
correct number of cycles through the barriers. Perhaps better to be informed
about how long the calculations continue, rather than do the ugly stuff that
the ticks do.

Here we run into one of the issues with barriers. They are really designed for
lockstep calculations, and don't allow one to keep going around even if the
computation has stopped.

Hacked in a flag in Shell to indicate that the simulation is still running.
When the Clock finishes, it sets this flag to 0 as well. Seems to work.

Now on to extending the mpiThreadFunc with another barrier to clear up
the mpiQ. This compiles but fails unit test.

Passes unit test, but doesn't engage second or any further threads. They do
seem to form, though.
After a lot of messing around it transpires that all was OK, I just didn't run
the multithread calculation for long enough to see the other thread in
action. Just changed the runsteps from 5 to 50 in testScheduling.cpp, and
it is now visible when I run moose -c 2

Now the mpiThreadFunc does not kick in when I run 
mpirun -np 2 ./moose. Perhaps shell->isRunning_ is false?

No, it was just that I handn't compiled with the BUILD=mpi flag.
Now it hangs very satisfactorily, but without printing out lots of stuff.

This turned out to be an old (known) issue with the shells trying to
talk to each other without the mpi running. Commented it out. Now it
crashes in testScheduling.cpp on an assertion.

This is in testThreadSchedElement::process
=============================================================================
26 March
Confirmed that this happens only on node 0, at least over 10 trials.
Confirmed that it does not happen for mpirun -np 1
Confirmed that it does happen, on node 0, for mpirun -np 4

=============================================================================
27 March
Added USE_NODES flag. Turns out that the mpi problem happens even when the
mpiThread isn't running.

Fixed by commenting out the section in Tick::advance() where we go through
process again. This must be it: I should only call process once on each Element,
after all the incoming messages are dealt with. 
	Yes, it now clears the tests, and the
mpiThreadFunc is called as expected. But it now hangs with no CPU load 
after the job is done. Suspect imbalance in clearing barriers.

Try this: Before each barrier, the Tick sets a stage flag
After each barrier the mpiThreadFunc looks at it.
Problem is that it is possible for mpiThreadFunc to look
at stage flag before Tick has set it. We actually have to
wrap the flag assignment within barriers to be thread-safe.
Then we need to de-assign the flag within the other pair
of barriers.

B---S---B-------B---S---B
B-------B---U---B-------B

Unfortunately this isn't enough for MPI traffic. Here
we have an extra state.

B---S1--B---S2--B---S3---B  loop TickPtrBarrier
B---U3--B---U1--B---U2---B  loop TPB
Could also do with just S1 and S2 and use logical ops to work out
if we are in S3.
Problem is the MPI thread doesn't know when we're done with
the loop. Also I am myself not sure what happens with the 
end of a tickPtr cycle when there are multiple ticks.

Alternatively, perhaps cleaner, have three barriers plus the
termination barrier.

B1----B2---B3 loop ---B4
B1----B2---B3 loop ---B4

The other approach is to set off the mpiThread as just another Tick
thread. The problem with this is to guarantee that only one thread
ever calls MPI functions. I think this is safe. Let's try it.
We currently have a huge mess of things passing threading
info into the Clock::tStart. Some go through the ThreadInfo,
others are extracted from the GroupId, others directly set into Clock.

Tried to proceed anyway. Things are so messy it isn't doable.
Cleanup:
SimGroups: These contain the primary job decomposition info.
ProcInfo: Keeps track of stuff that current thread is doing.
	GroupId
	threadIndexInGroup
	nodeIndexInGroup? or current node#
	whether current thread is for mpi.
	clocke: can get globally.
	barrier
	sortMutex

Perhaps instead of passing in a ThreadInfo structure I should
pass in ProcInfos.

=============================================================================

28 March 2010: Stuck in silly assertion. Fixed up, now we
should have decent check for when we are in the mpiThread.
This uses the ugly old ThreadInfo structure for now.
But the assertion in testThreadSchedElement::process still fails.
OK, finally cleared it. I was testing numThreads, rather than 
numThreadsInGroup. The former also counts the extra mpiThread.
So the problem was indeed with the messiness of keeping track of threads.
Now hangs, but no crash.

Hangs in coming out of testThreads. When I comment out testThreads,
there is no problem.
Checkin as 1665.

Got rid of the hang. Checkin as 1666.
This is good. But I think I need to get the extra thread
running also for the Shell msg.
Then I can think about implementing it.

Setting up stuff for the Shell basic thread, in ShellThreads.cpp:
passThroughMsgQs
This framework is now OK: compiles and clears preliminary unit tests.
Checkin as 1669
=============================================================================
30 March.
Qinfo::sendAllToAll
Should be renamed, Qinfo::syncShells

The sendAllToAll will probably have to be implemented as a series
of broadcasts, which will give a chance to interleave comm and comp.

* Define size of data to go
* Allocate buffers.
	
Got a dummy data transfer to go via MPI. Checkin 1670.
Came across a surprising note, confirmed on the web: MPI2.2 deprecates
the C++ bindings. Given this situation, I need to go back at this
early stage and recode the MPI calls to C.
Done. Also put in a check for thread support, which turns out to
be missing on the current MPI implementation on my machine. Anyway,
my implementation is serialized so that I protect the MPI from 
simultaneous calls on different threads. Checkin 1672.

Added in info on inQ buffer size in the beginning of the buffer, as
an unsigned int. Surprisingly clean, all within Qinfo. Clears
unit tests. Checkin 1673.

Now beginning attempts to do actual data transfer. It does look like it
would be good to put the queue transfer stuff onto a separate thread.

Struggling. Segvs. Valgrind suggests that there is a problem when broadcasting
the inQ.
=============================================================================
31 March.
A clue: If I put in an MPI_barrier, the function hangs. So something is 
wrong with the sequencing. Trying to track this down.
=============================================================================
1 April
Looks like I've found the cause of the segvs. I had swapped
sendbuf and recvbuf in the MPI_Gather command. Now the program
can go on indefinitely without error, but I've cut it short.
Checking in 1678

Seems now to work through Create and Delete tests, but doesn't quit cleanly.
Part implementation of handleQuit etc. Need to poll on node0 for returns,
so that we can wrap up all processes.

=============================================================================
2 April
Looking at quit. Tricky because of lack of sync.

doQuit sends out msg
	It goes out to all nodes
	Whenever nodes get round to reading their Bcast, they get it.
		Nodes exit their loop after one more cycle of Bcast.
	Master gets Msg along with others.
So in theory all should exit at the same time.

Tracked it down: the msgLoop had a pthread_exit, which was bad as there
wasn't a thread going on for the main loop. Now for the first time I
have a little test which creates an element on multiple nodes, deletes it,
and quits cleanly.  Checkin as 1679
Works with any number of nodes (up to 17) and also in combination with
multiple threads (up to 4nodes x 4 threads).

Now need to set up 'doStart' to see if I can work with multiple nodes doing
computation.
Put it in, yet to check.
Next steps:
	- Confirm that clock scheduling is OK
	- Run test simulation with IntFire neurons.
	- Test on different architectures.


=============================================================================
5 April.
Trying to get the system to handle the 'start' command.
Control flow is now in shell hands, .cpp:357

=============================================================================
6 April.
Got start command to work very minimally in unit test. Issue was just that
the ackStart was not being called so there was no info about the job finishing.
Now it runs and stops nicely on 1, 2 nodes with 1 and 2 threads.

Incorporated testSchedThreads to keep track of clock ticks. Tried
out multinode. Two issues.
	1. Doesn't seem to be synchronizing between nodes
	2. Nodes seem to set off one more thread than I want.

Other than that it seems to work. Valgrind is OK too. Checkin 1682.

Now I understand both points. Item 2 was actually due to the
mpiThread being reported along with the worker threads.
Item 1 was because mpiThread doesn't currently do anything.

Some cleanup, followed by an hour of debugging because I couldn't figure out
why it didn't work any more. Now fixed. Checkin 1683.

Trying out mpi_Allgather in Qinfo to transfer data during compute time.
Seems to be doing the right thing, even for mpirun -np 2 ./moose -c 2
ie, 2 nodes and 2 threads on each.  Checkin 1684.

Now considering how to explicitly test internode message passing. Will have
to create objects with known node decomposition, and have the MsgSpecs
figure out how to direct data.
=============================================================================
7 April 


Set up a Sparse Msg that maps from A[] to B[] such that
A and B have one entry on each node.

Some test cases:
V1:
A[] has as many entries as there are nodes. One per node.
A[0] = 1
A[1] = 1
A[n] = A[n-1] + A[n-2]
In other words, a Fibonacci series.
The series will propagate in the appropriate # of timesteps.

V2:
Same, except now A[] has 100 entries, and we distribute among n nodes.
=============================================================================
8 April
Trying to get going again. Turns out that I hadn't gone back to fix up the
other unit tests. Lots of bugs. Fixed most, but now the system doesn't terminate
with mpirun -np 2.
Checkin 1685.

Figured out termination problem. The multinode Shell unit tests execute
from node 0, and send other nodes ahead to a loop to poll the queues.
This doesn't work when the next step is not the loop, but the sched
tests. Fixed this part by putting the Shell tests last. Now it fails
with an assertion in the IntFire tests in testThreadIntFireNetwork.

This problem is probably because the test is set up to run on one node
but the 'start' command checks # of nodes and tries to run it on multiple
nodes. For now I'll bypass the testScheduling. Now it clears unit
tests with multiple threads and multiple nodes, by not doing some of
the tests.

Implemented Shell::connectMasterMsg and set it up to execute at
MOOSE initialization. This connects up all shells on all nodes to
each other so that the do<Function> calls can be sent out on messages.
Checkin 1686

Implementing 5-argument MOOSE functions to handle data transfer for
Shell::doCreate. May have to do 6 argument to handle message creation.
Checkin 1687.

In a bit of a tangent, implemented a specialization for
Conv< vector< T > >.
This will be useful in passing arbitrary vectors around, but for
now I need it to pass the dimensions of the newly created Element.
Checkin 1688.

Working on implementing the 5 argument function for the Shell::create
command.
Also lots of cleanup of printf debugging.
Checkin 1689.

- Decide how to record partitioning info
	- Completely implicit. Based on node#, numNodes, and numData, derive
		local indices by a formula
		- lets one find desired node from index.
		- Could put in decomposition mode in order to get more variety.
- Decide how to instantiate Elements
	- Do so on creation, which is when the size should be known. 
		- Nice because then there is not just-in-time juggling when
		  fields etc are assigned.
		- Bad if there are different alternate decompositions to try.
	- Do so on 'start'
	- Do so whenever fields are assigned.
	- Do so on creation, and be willing and easy to redo at any point.
		- This would be helped if there is a terse specification of
		the current decomposition
- Should Messages be converted to creation with predefined MsgId?
	- If all is done in perfect sequence, no need. Same applies to Elements.
- How to spec Messages in a high-level way
	- Current set are simple enough that the spec can be extracted
	from the message
	- Exception is the SparseMsg which will need a high-level front-end.
	- Means that the message creation function needs some thought.
- When to set up the low-level messages
	- Wait till 'start' or 'reset'
	- Assuming Elements are done right away, do it right away.
- How to partition stuff in low-level messages
	- Look up partitioning rule on Element
	- Most low-levels follow right on.
	- SparseMsg needs some calculation.


Working on updated Element instantiation and creation. Lots of unit tests
in testAsync to be redone.
=============================================================================
9 April
Cleaned up compile after redoing Element creation code. Clears single node
tests, not MPI.
Checkin 1690

Ran valgrind to see if it picked up the problem with MPI. It picked up
something else, fixed. MPI still a problem.
Checkin 1691

MPI issue is the familiar one of having to have the worker nodes go in
a loop to clear Q entries for one test (testShellParserCreateDelete())
before we go on to other unit tests. It usually works on 2 nodes if I
put them in for 3 cycles, but this hack does not scale to 17 nodes.

Put in a relatively clean way to ensure that exactly the right # of
clearQ passes occur: test for creation of the Element. This works with
1, 2, 4, 17 nodes.
The partitioning of data entries among elements on different nodes seems
to be OK.
Checkin 1692.
Turns out it doesn't work when the 'doStart' begins right after it: hangs.
Fixed, just needed one more passThroughMsgQs on the worker nodes to 
send out the ack after creating elements.
Works for 2, 4 and 17 nodes.
Checkin 1693

Now on to runtime messaging.
- Set up messages with a predefined Id on the master node.
	- Is this the same as an Eid?
	- Do we have a single Message child on each Elm and using
		indexing for Message Spec data?
	- Do we redo MsgId to behave more like Id? 
		Or should we downgrade the Id to be like a typedefed int?

Begun process by putting in skeleton code for doCreateMsg,
and the various fields that implement it.
Checkin 1694.
Getting there. Need to make a test case of Shell::doAddMsg 
=============================================================================
10 April
Working on test case. Implemented 'builtins' directory. Implemented
Arith class there, currently it just adds its two inputs. Implemented a
very superficial test case for it.

Next: Implement a "DiagonalMsg". Should provide diagonal messaging with
a specifiable slope, width and offset. 
Then: Make DiagonalMsg node-aware, thread-aware.
Then: Try it out with the Arith class.
Checkin 1695.

Implemented DiagonalMsg. It sets up messages between arrays, where each
array entry connects to a matching entry in the target. The difference between
indices of the src and dest entries are the stride = destEntry - srcEntry.
To handle multiple such mappings, use multiple DiagonalMsgs.

Implemented the Fibonacci series as a good test for DiagonalMsg as well as
Arith. There is some mess with scheduling in that it retains legacy
clock ticks even though they are not used.
Checkin 1698

Something unpleasant happening with the moose processes. Lots of bad
interactions between the various unit tests, specially in mpi mode.

Put them all in the simplest way, and the situation is that the whole set
run fine except in mpi mode.

Bodged together a workaround: test for useMPI and skip the problem functions
if MPI is running. Now the thing clears all combos of thread and node tried.
Checking 1699
=============================================================================
11 April
Minor cleanup: separated the Msg.h and Msg.cpp file into separate files for
the individual msg types.
Two nasty subversion timeouts later, I've finally been able to check in this
minor update: 1700.

Putting in place the framework for Shell::doAddMsg.
Checkin 1701

Now need to tighten up the data decomposition, and what is stored on each
Element.

Perhaps a Decomposition/indexing class that does:
- Take the DataId and look up the appropriate Data entry.
	- DataId should be indivisible. Only the data() functions should
		query its parts?
- Reports whether a given Data Id is there
- Provide whatever info is needed by Messages to build their tables.
- Deal with array dimensions in lookup.
- Returns field, parent data, and other levels of nesting.
	- Currently the FieldElement class is templated on Field and Parent,
	and uses a lookup function provided by the Parent to find an 
	indexed Field.
- Deal with different decompositions.

=============================================================================
12 April.
Data Id uses an unsigned int to index data, and another to index field.
Actually should be an unsigned int and whatever else is needed to figure out
how to partition the dimensions.

I would like to also be able to take, say, a cell model and array-ize it.
And the whole thing has to work on N nodes.

Here are some of the use cases.
	- synapse[ IntFire# ][ syn# ]: Current deal. Can look up either
		parent IntFire, or any of a variable # of synapses.
		Summary: FieldElement class template.
	- compartment[ neuron# ][ compt# ]: This would work fine, even with
		different # of compts per neuron. But differs from 
		FieldElement in that the compts are not special fields, but
		a different index. Here the parent Element or the DataHandler
		should either do a vector of vectors, or some other 2-D array.
		Summary: Variant on Element or DataHandler class.
	- channel[ neuron# ][ compt# ]: Keep one Element per channel type.
		But not all compts have the channel. Can use an extra lookup
		table to go to the channel entry in the array, from the compt#.
		Summary: Another variant on Element or DataHandler.
	- compt[ glom ][ neuron ][ compt# ] Probably best done as a set of
		individual gloms.
	- molecule[ neuron# ][ compt # ][ mol# ]: similar to compartment or
		channel above, but will have to split one of the indices to
		look up mol#.
		Summary: Variant on Element/DataHandler, further split of
		DataId index.
	- Solver has taken over a neuron. Has an Element tree for the cell.
		Array of these solvers has the same Element tree, but each is an
		array. But indexing is backwards. 
		/model/cell[342]/dend23/KA
		The messaging to children would do the right thing.
	Access to indices:
	Msg::exec seems to call indices directly.
		DiagonalMsg: scans through data part, incrementing by 'stride'
		SparseMsg is worse: explicitly constructs 
			DataId( colIndex[j], fieldIndex[j] ).
		OneToAll: Checks for dim. If 1, scans through dim1. 
			If 2, scans through each of dim1 (data) then dim2(field)
		Here we want to create a DataId and tell _it_ to do the
		incrementing.

Now how to split among nodes. 
	Element->data( dataId ) should always be able to find the data, or
	report it off-node. 
		Likewise Element->data1( dataId )
	So, dataId does not know where data is located. That is Element's job.
	Element->findNode( dataId ) should be able to tell where to go.
		Or, could do with a DataHandler using a single Element class.
	Element->data( dataId, mynode ): possible? Should I require every
		attempt to acees the data to have myNoe available.

Use variants on Element, or delegate to DataHandler?
	- Element currently does too many things, notably handling messages,
		fields, and Cinfo.
	- DataHandler would have to be virtual and provide an interface to 
		

Q: Should Data itself do the lookup, ie., provide virtual lookup and dimension
funcs? This works well for nesting of arrays of X in Y. Doesn't help for
2-D arrays of X. Doesn't help if we want to nest two arrays, X1 and X2, in Y.
The FieldElement kind of arrangement also helps if we just want to have a
child Element that is fully contained but is seen as its own Element.
Ans: No, Data should not do any lookups. Leave it to the DataHandler.
	Data Handler will also take over the kind of role that FieldElement used to
	play.

DataId: Currently structured explicitly to look up data and field. Should be
more general. Should know what its dimensions are.



If we want the DataHandler and the Msg::Exec to both agree on how to do ops
on DataId, then we need an open and explicit definition for DataId as
a series of ints one for each dimension.

If we want a safer representation, we need to make DataId opaque, which 
is OK for DataHandler but tricky for Msg::Exec. But perhaps a good thing.
Will end up with more explicit specification of what the msgs are projecting to,
in some cases. Certain Msg types may need to be extended to do somewhat
different things for different kinds of projection. For example, SparseMsg
currently assumes a single target synapse on each target neuron. However,
if the first index is neuron, the second is compartment, and the third is 
synapse, we could have multiple synapses on different compartments but on 
the same neuron

This comes back to asking, how do we handle multiple levels of nesting?
We don't want to overdo this. The original explicit single Elements were
inefficient but simple.
Array Elements as here are efficient at one level, but add complexity.
Array fields in Array Elements are very efficient, but add further complexity.
2-D arrays would have a similar level of complexity.
We could stop here.

Summary:
1. Keep DataIds the way they are for now. Higher order indexing should be done
with caution. Perhaps add info about dimensionality of the DataId.
	1a. May need to put in some checking code for the messages.
2. Make a DataHandler virtual base class, templated for funny lookups that 
	FieldElement used to do. This deals with all the data access.
	2a. DataHandler requires node info as well as DataId to find data. This is
	so pervasive it should be a global static field of the Shell.
	2b. DataHandler requires info about decomposition of this specific Element.
	This is local info. Rather than weigh it down with options and ifs, the
	decomposition info is coded into derived classes of the DataHandler.
	2c. Each DataHandler knows how big the whole data set is to be. But it
	doesn't have to allocate it right away.
	2d. Can merge in Dinfo?
3. Element is now a single class, and its job is handling messages and
	field info. Has a DataHandler ptr to deal with the data.

=============================================================================
13 April.
Starting on implementation. Made DataHandler and two derived classes
ZeroDimensionData and OneDimensionData.
Checkin 1704.

Added skeleton code for FieldDataHandler.h.
Checkin 1705.

- Need to gear FieldDataHandler.h up for handling multiple nodes
	In progress.
* Need to rename ZeroDimensionData to ZeroDimHandler.h, etc.
* Need to do some unit tests for them.
* Need to do major overhaul so Element does not use its own data access fields.
* Did some cleanup of functions of DataHandler.
- Need to figure out how to do prototypes and other globals (all node) elements.
	If this is easy to flag, then all the initial setup should be in
	global mode (without allocation) and then the load balancing should
	take place. For now, proceed with immediate allocation so as to test
	the messaging.

=============================================================================
14 April.
Did renaming of ZeroDimensionData etc.
Checkin 1707.

Working on Element conversion. Pending points:
OneToAllMsg::exec needs to handle nodes. Should ideally pass the iteration
	into the DataHandlers.
Likewise SparseMsg and PsparseMsg.

FieldElement is turning messy. Ideally should be created automagically
as soon as the parent element is made. Problem crops up now with
Id allocation.
Working on automatic creation of FieldElement. This is done by having a
FieldElementFinfo with all the required access func info.
It will use the registerFinfo
to register a PostCreationFunc with Cinfo, and this will be used when the
parent Element is created, to make the FieldElement

Checkin 1708, 1709 as an intermediate step while I work on this.
Got the whole mess to compile. Doesn't clear tests. Checkin as 1711.

Starting to clear it up. Practical question: Do we allocate
data on the 'new Element' command or wait?

Starting to get some unit tests to clear. Currently stuck with instantiation
of a synapse on IntFire.
=============================================================================
15 April.
Lots of headaches with the FieldDataHandler. I think it needs to embed the
parent element's data handler. 
Intermediate commit 1712.
Done the embedding. Some more cleanups and progress into unit tests.
Intermediate commit 1715.

More fixes, now clears unit tests.  Checkin 1716.
Valgrind reports some leaks. Happens when deleting a FieldElement.
Hard to track down. For now I'll go on to send some internode messages.

Problem 1. Ticks are being split across nodes. Need a way to create objects
globally, with all entries present on all nodes.
Implemented this. 
Problem 2. Now I need to have FieldDataHandlers iterate through the parent
	node decomposition. Implemented skeleton using begin, end and
	iterator++ to do this.
Problem 3. Many unit tests fail with the regular construction
commands because creations are on only one node. Modest progress in
fixing. Checkin 1717

=============================================================================
16 April
Now unit tests work. Put in global Element construction for all testAsync tests,
and it seemed to come together painlessly. Checkin 1718.
Minor cleanup of printf debugging. Checkin 1719.

Converted the Fibonacci test in builtins to run multinode. It works!!!
Tried different # of nodes, automatically does it right.

=============================================================================
