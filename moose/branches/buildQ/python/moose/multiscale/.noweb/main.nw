\documentclass[]{article}
\usepackage[margin=10mm, left=25mm]{geometry}
\usepackage{pgf,tikz}
\usepackage{noweb}
\usepackage{amsmath}
\usepackage{color}
\usepackage{syntax}
\usepackage{amssymb}
\usepackage{listings}
\usepackage[xindy]{glossaries}

\usetikzlibrary{circuits.logic.US}
\usetikzlibrary{positioning}
\usetikzlibrary{matrix}
 
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{
  basicstyle=\footnotesize\ttfamily, % the size of the fonts that are used for the code
  numbers=left,                      % where to put the line-numbers
  numberstyle=\tiny\color{gray},     % the style that is used for the line-numbers
  stepnumber=2,                      % the step between two line-numbers. If it's 1, each line
  numbersep=5pt,                     % how far the line-numbers are from the code
  backgroundcolor=\color{white},     % choose the background color. You must add \usepackage{color}
  showspaces=false,                  % show spaces adding particular underscores
  showstringspaces=false,            % underline spaces within strings
  showtabs=false,                    % show tabs within strings adding particular underscores
  rulecolor=\color{black},           % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=2,                         % sets default tabsize to 2 spaces
  captionpos=b,                      % sets the caption-position to bottom
  breaklines=true,                   % sets automatic line breaking
  breakatwhitespace=false,           % sets if automatic breaks should only happen at whitespace
  keywordstyle=\color{blue},         % keyword style
  commentstyle=\color{dkgreen},      % comment style
  stringstyle=\color{mauve},         % string literal style
  morekeywords={*,...}               % if you want to add more keywords to the set
}
\usepackage{amsthm}
\usepackage{todonotes}
\usepackage{hyperref}
\setlength{\parskip}{3mm}
\newtheorem{axiom}{Axiom}
\newtheorem{definition}{Definition}
\newtheorem{comment}{Comment}
\newtheorem{example}{Example}
\newtheorem{lemma}{Lemma}
\newtheorem{prop}{Property}
\newtheorem{problem}{Problem}
\newtheorem{remark}{Remark}
\newtheorem{note}{Note}
\newtheorem{theorem}{Theorem}
\newtheorem{test}{Test}

% Title Page
\title{\textbf{Developer document} \\
Multiscale modelling in \href{www.moose.ncbs.res.in}{Moose}}
\author{Dilawar Singh \footnote{Junior Research Fellow at National Center for
Biological Sciences. Ph.D. candidate at EE IIT Bombay (currently on leave)} \\
\texttt{dilawars@ncbs.res.in}}
\date{\today}

\begin{document}
\maketitle

\begin{abstract}
\label{abstract}

  This documentation is a literate program. This describes and ongoing attempt
  to make moose more capable of doing multi-scale modelling. There are various
  XML based models available, each describing a particular aspect of neural
  activities. Some describes the chemical activities inside neuron while some
  other describe their electrical properties etc. We wish to write a super-XML
  model which can make use of all these models and map them onto moose.

  \todo[inline]{Describe MumMBL}.

\end{abstract}

\paragraph{Dependencies}

  You need [[noweb]] tool to generate documentation from this file. This file
  contains some macros which are not understood by [[noweb]]. These macros are
  used by a python script [[./pynoweb.py]] to generate [[noweb]] file. You need
  not know how to use it. Just run [[./generate_code_and_docs.sh --doc]] to
  generate documentation after installing [[noweb]].  Run the same command
  without [[--doc]] switch and you have your working application in [[src]]
  directory. 
  
  Contact  very friendly Homo Sapience
  \href{mailto:dilawars@ncbs.res.in}{Dilawar} if you need any help.  He can be
  reached at \url{dilawars@ncbs.res.in}.  \todo[color=red!60,inline]{Write introduction
  to multiscale modelling for a developer.}

\section{Initialize store-house}
\label{sec:setup}

\paragraph{Dependencies and import}

  We need [[lxml.etree]] for XML parsing. To print error and warning messages, I
  wrote a small module [[DebugModule]] \ref{sec:debug}. This module is
  implemented in file [[debug.nw]]. 
  
\paragraph{Imports}

  This chunk [[Imports]] keeps the essentials modules which we'll need in almost
  all files. We might occasionally also need a logger from python [[logging]]
  library. Let's create a standard logger too.

<<Import>>=
# Basic imports
import os 
import sys 
import logging 
import debug 
import inspect

logger = logging.getLogger('multiscale')
from lxml import etree

@ %def imports

\paragraph{Entry point}

  This is entry point of this program. Let's write down the sturcture of
  program. This is what we want to do in this application.
  
%file:src/main.py
<<main.py>>=
<<Import>>
<<functions in main>>
<<argument parser>>
<<parse xml models and handover control to main class>>

@ %def entry_point

\paragraph{Argument parser}

  This application accepts paths of XML based models from command line. More
  than one XML model can be passed from command line. Python comes with a
  standard library [[argparse]] well suited to do this job. If more than two
  XML models are to be passed, each should be passed with its own [[--xml]]
  switch e.g. to pass [[modelA.xml]] and [[modelB.xml]] from command line, use
  the string {\color{blue}[[--xml modelA.xml --xml modelB.xml]]}. We must also
  provide the path of [[adaptorML]] file.

<<argument parser>>=
# standard module for building a command line parser.
import argparse

# This section build the command line parser
argParser = argparse.ArgumentParser(description= 'Mutiscale modelling of neurons')
argParser.add_argument('--nml', metavar='nmlpath'
    , required = True
    , nargs = '+'
    , help = 'nueroml model'
    )
argParser.add_argument('--sbml', metavar='nmlpath'
    , nargs = '*'
    , help = 'sbml model'
    )
argParser.add_argument('--mechml', metavar='mechml'
    , nargs = '*'
    , help = 'mechml model'
    )
argParser.add_argument('--chml', metavar='channelml'
    , nargs = '*'
    , help = 'Channelml model'
    )
argParser.add_argument('--3dml', metavar='3dml'
    , nargs = '*'
    , help = '3DMCML model'
    )
argParser.add_argument('--meshml', metavar='meshml'
    , nargs = '*'
    , help = 'MeshML model'
    )
argParser.add_argument('--adaptor', metavar='adaptor'
    , required = True
    , nargs = '+'
    , help = 'Adaptor for moose'
    )
argParser.add_argument('--mumbl', metavar='mumbl'
    , required = True
    , nargs = '+'
    , help = 'Lanaguge to do multi-scale modelling in moose'
    )
args = argParser.parse_args()

@ %def argParser 

  Once we have verified paths of XML models, we need a module to parse them. For
  the purpose of modularity, we wrote this module in its on literate file
  [[parser.nw]] and you can see its documentation in section \ref{sec:parser}.


\paragraph{Parse XML models}

  But before we parse, we need a helper function to check if given paths exists
  and are readable.

<<functions in main>>=
def ifPathsAreValid(paths) :
  ''' Verify if path exists and are readable. '''
  if paths :
    paths = vars(paths)
    for p in paths :
      if not paths[p] : continue
      for path in paths[p] :
        if not path : continue
        if os.path.isfile(path) : pass
        else :
          debug.printDebug("ERROR"
            , "Filepath {0} does not exists".format(path))
          return False
      # check if file is readable 
      if not os.access(path, os.R_OK) :
        debug.printDebug("ERROR", "File {0} is not readable".format(path))
  return True

@ %def ifPathsAreValid


\paragraph{Parse XML files}

  At least one model must be provided by the user.  Validation is not enable in
  this version. \todo[inline, color=red!60]{Download new neuroML2 models and
  turn validate=True in [[parseModels]] function call.}

<<parse xml models and handover control to main class>>=
import parser
if args : 
  if ifPathsAreValid(args) :
    logger.info("Started parsing XML models")
    debug.printDebug("INFO", "Started parsing XML models")
    etreeDict = parser.parseModels(args, validate=False)
    debug.printDebug("INFO", "Parsing of models is done")
    <<hand over control to class in multiscale module>>
    print("Done!")
  else :
    debug.printDebug("FATAL", "One or more model file does not exists.")
    sys.exit()
else :
  debug.printDebug("FATAL", "Please provide at least one model. None given.")
  sys.exit()

@ %def parse_models 

\paragraph{Create multi-scale models in Moose}
  
  We are done initializing our application. Lets define a class [[Multiscale]]
  and hand over the control to its object. This class is defined in 
  [[multiscale.nw]]. We need to import module [[multiscale]] to be able to
  initialize and object of this class.

<<hand over control to class in multiscale module>>=
import multiscale
multiScaleObj = multiscale.Multiscale(etreeDict)
multiScaleObj.buildMultiscaleModel()
@ %def multiScaleObj 

Over to \ref{sec:multiscale}.

\section{Construct a Database/AST from XML models}
\label{sec:multiscale}
  
\todo[inline]{Write some Design Rule Check (SRC) when building moose}

  This is our defining module and it contains the basic functionality of this
  application. All XML modules are parsed into a dictionary and this dictionary
  is passed to the object of class [[Multiscale]] which is the main class in
  this module. We also have [[adaptorML]] file parsed in dictionary. 

\begin{remark}{Why AST/Database?}

    AST is maintained now in [[networkX]] graph. We are attaching XML-elements
    to the nodes of the graph.

\end{remark}
 
\paragraph{Structure} Structure of this module is following. 

%file:src/multiscale.py
<<multiscale>>=
<<Import>>
<<Local imports>>
<<Definition of class [[Multiscale]]>>

@ %def multiscale 

   

\paragraph{A skeleton of class}

    This class will build a combined model which we can map on to [[moose]]
    later by using [[mumbl]]. We build a graph object before we build a
    [[moose]] objects.
  
<<Local imports>>=
from lxml.builder import E
import networkx as nx
import nml_parser
import cStringIO
import sys
import unittest as ut
sys.path.append("../../../python")
import moose
@

<<Definition of class [[Multiscale]]>>=
class Multiscale :
  
  def __init__(self, xmlDict) :
    self.xmlDict = xmlDict 
    # This expression is useful for getting an element which is not sensitive to
    # name-space.
    self.xmlExpr = "//*[local-name() = $name]"
    self.rootModelPath = '/model'


    <<initialize members>>
    debug.printDebug("INFO", "Object of class Multiscale intialized ...")

  <<methods>> 

  # This is the entry point of this class.
  def buildMultiscaleModel(self) :
      debug.printDebug("INFO", "Starting to build multiscale model")   
      <<flow of executation>>
  
  def exit(self) :
    # Clean up before you leave
    debug.printDebug("WARN", "Cleaning up before existing..")
    <<clean up the mess>>
    sys.exit(0)

  # Write down the tests, whenever needed.
  <<tests>>

@ %def [[Multiscale]]

\paragraph{Initialize the main data-structures}

    A graph to hold the network and properties and a moose-object. 

<<initialize members>>=
# Initialize some attributes also.
self.mooseG = nx.MultiDiGraph(gProp={'segmentGroup' : set()})
self.model = moose.Neutral(self.rootModelPath)
@ %def initialization

\paragraph{Multi-scale Modelling in Biological-system, Language (MuMBL)}

   The [[neuroML]] is our starting point; parse this model and build a graph.
   Other XML models are merged into this one. Get the [[adaptorML]] and map this
   graph onto moose. If more models appears then map them onto moose also and
   add support to do so in [[adaptorML]]. Not everything can be mapped and user
   inputs are also required to do modelling, this we do using a XML based
   language [[MuMBL]]. The user must supply at least three XML files, neuroml
   model, adaprorML and mumbl files. Both adaptor and mumbl are explained in
   appendix.

<<flow of executation>>=
<<build network graph>>
<<map onto moose>>
<<setup simulation using mumbl>>
<<simulate>>
@ %def flow_of_execution

\paragraph{Mapping onto moose}

  Lets map XML models onto moose.

<<build network graph>>=
# NeuroML to moose
<<neuroml to network>>
<<sbml to network>>
<<otherml to network>>
@

\subsection{Map neuroML to network}
    
  Topology of the network is encoded in a networkx graph [[mooseG]] and we are
  attaching XML element to its node.  Merge all XML models into this graph,
  later use adaptorML to transform this graph to moose scripts. 
  
\paragraph{Network graph}
\label{mooseG}
  
  This is a netoworkx library [[MultiDiGraph]] graph. Adding parallel edges and
  self loops are allowed in this graph. And we can attach any hash-able data to
  nodes and edges. Graph is one data-structure build to rule them all. No other
  data-structure is maintained in this application for global reading and
  writing. All information is attached to nodes, edges or graphs. We explain
  them when we encounter them.

  The basic idea is to create one node for each compartment and cluster them
  according to the cell they are part of. Each node has a property called
  [[segmentGroup]]. When we are dumping the graph into a graphviz file using
  methods [[write_dot]] written in [[src/helper/graph_methods.py]] file, we are
  coloring nodes according to their segment group. 
  
  An outgoing edge $a \rightarrow b$ says that there is relation between $b$ and
  $a$ and edge describe that relation e.g. some change in $a$ causes a change in
  $b$. Properties attached to the edge are essentially relations. We color the
  edges according to properties.

\todo[inline]{Implement this test}
\begin{test}{Membership test}
\label{test:membership}

  Each compartment must have a unique label. And each compartment can only
  belong to one cell.

\end{test}

<<neuroml to network>>=
self.neuroml2Network(test=False)
@ %def neuroml2Network 

\begin{itemize}
\item Convert morphology to network.
\item Merge other XML model to this network.
\end{itemize}

<<methods>>=
def neuroml2Network(self, test=False) :
  debug.printDebug("INFO", "Converting neuroml to netowrk graph")
  nmlElems = self.xmlDict['nml']
  if len(nmlElems) > 1 :
    debug.printDebug("ERR", "More than one nueroml file is not supported yet.")
    self.exit()
  else : 
    nmlElem, nmlPath = nmlElems[0]
  self.nml = nmlElem
  <<add cell morphology>>
@ %def neuroML2Moose

<<Local imports>>=
import collections 
import os
import helper.graph_methods as graph_helper
import helper.xml_methods as xml_helper
@ 

<<add cell morphology>>=
networkElem = xml_helper.getElement(self.nml, self.xmlExpr, "network")
if not  networkElem :
  debug.printDebug("WARN", "No network found in model. Assuming a single"+
    " cell model. ", inspect.currentframe())
  <<build a single cell model>>
else :
  <<build network>>

debug.printDebug("INFO", "Dumping graph into a dot file")
graph_helper.write_dot(self.mooseG, 'graphs/moose.dot')
@

\paragraph{Cell}

   Following is the fragment of schema of [[CellType]]. Zero or more element of
   this type must be there in the document.

\input|"./fragment.py CellTypes 19"
\input|"./fragment.py Cell 10"

<<build a single cell model>>=
cellList = xml_helper.getElement(self.nml, self.xmlExpr, "cell")
for cellXml in cellList :
  self.insertCellIntoNetwork(cellXml) 
@

\paragraph{[[insertCellIntoNetwork]]}

    Each segment inside a cell has unique id but two segments in two different
    cells might have same id.  To avoid this, we identify each segment with a
    tuple of [[(cellid, segmentid)]].

<<methods>>=
def insertCellIntoNetwork(self, cell, test=False) :
  '''
  This function takes a XML representation of cell and insert in onto a graph.
  '''
  cellId = cell.get('id')
  cellMetaId = cell.get('metaid')
  # get morphology and build the network 
  for elem in cell :
    # Keep the type of segments in a dictionary.
    if xml_helper.isTaggedWith(elem, "morphology") :
      for e in elem :
        if xml_helper.isTaggedWith(e, "segment") :
          nodeId = (cellId, e.get('id'))
          self.mooseG.add_node(nodeId, label=e.get('name'))
          # Attach the segment to the node
          self.mooseG.node[nodeId]['segment'] = e
          parents = e.xpath("./*[local-name()='parent'][position()=1]") 
          if parents :
            if test :
              assert len(parents) == 1
            parent = parents[0]
            parentNodeId =(cellId, parent.get('segment'))
            try :
              self.mooseG.add_edge(parentNodeId, nodeId)
            except :
              debug.printDebug("ERR", sys.exc_info())
            
        elif xml_helper.isTaggedWith(e, "segmentGroup") :
          groupId = e.get('id')
          self.mooseG.graph['gProp']['segmentGroup'].add(groupId)
          for sg in e :
            if xml_helper.isTaggedWith(sg, "member") :
              nodeId = (cellId, sg.get('segment'))
              self.mooseG.node[nodeId]['segmentGroup'] = groupId
            else :
              debug.printDebug("NOTE", "This tag {0} is not supported.".format(sg.tag))

    elif xml_helper.isTaggedWith(elem, "biophysicalProperties") :
      for prop in elem :
        if xml_helper.isTaggedWith(prop, "membraneProperties") :
          <<attach membrane properties to compartment>>
        elif  xml_helper.isTaggedWith(prop, "intracellularProperties") :
          <<attach intracellular properties to compartment>>
        elif xml_helper.isTaggedWith(prop, "extracellularProperties") :
          print "Extra-cellular properties"
    elif xml_helper.isTaggedWith(elem, "notes") : pass
    elif xml_helper.isTaggedWith(elem, "annotation") : pass
    else :
      debug.printDebug("WARN", "Element {0} not supported yet.".format(elem.tag)
        , inspect.currentframe())

@ %def insertCellIntoNetwork

<<build network>>=
debug.printDebug("INFO", "Build network")

@ %def build_model

\paragraph{Adding membrane properties on to compartment}

    Lets write a generic function [[attachToCompartment]] which we will use to
    attach various thingies to a compartment (node of a graph).

<<methods>>=
def attachToCompartment(self, cellId, xmlElem) :
  debug.printDebug("INFO", "Attaching properties to element")
  
@ %def attachToCompartment 

\paragraph{Attaching properties}

    Properties are attached as tuple. First element of tuple is the name of the
    property and the second element of the tuple is the sub-type of the
    property.

<<attach membrane properties to compartment>>=
debug.printDebug("INFO", "Attaching properties to membrane")
for e in prop :
  propName = xml_helper.getTagName(e.tag)
  if e.get('segment') and e.get('segment') != 'all' :
    nodeId = (cellId, e.get('segment'))
    self.mooseG.node[nodeId][('membraneProperties', propName)] = e
  elif e.get('segmentGroup') :
    group = e.get('segmentGroup')
    for n in self.mooseG.nodes() :
      if self.mooseG.node[n]['segmentGroup'] == group :
        self.mooseG.node[n][('membraneProperties', propName)] = e
      else : pass
  else :
    for n in self.mooseG.nodes() :
      self.mooseG.node[n][('membraneProperties', propName)] = e
@ %def membrane_properties_to_comparment

\paragraph{Attach intracellular properties to the compartment}

    These ion channels are present in all comparments of a cell. Attach them to
    all compartments which are inside this cell. Unfortunately neuroML does not
    have a fixed SI units and that will create a headache. Write a function
    which converts these units to a SI units. A function to do this task
    [[toSIUnits]] is written in [[./src/helper/xml_methods.py]] file.

<<attach intracellular properties to compartment>>=
debug.printDebug("INFO", "Attaching intracellular properties")
for e in prop :
  propId = xml_helper.getTagName(e.tag)
  for n in self.mooseG.nodes() :
    if n[0] == cellId :
      self.mooseG.node[n][('intracellularProperties', propId)] = e

@ %def intracellular_properites_to_compartment
\section{AdaptorML for Moose}
\label{sec:adaptor}
  
  This adaptor example was writeen by an intern during GSoC. 

 \todo{Write adaptorML}.

%file:moose_xml/adaptor.xml
<<adaptor.xml>>=
<?xml version="1.0"?>
  <adapterML>
    <listOfAdaptors>
    <adaptor name="adaptK" id="/n/chem/neuroMesh/adaptK" scale="0.05">
      <inElement name="chemK" id="/n/chem/neuroMesh/kChan" field="get_conc" 
            adapt_type="requestField" mode="OneToAll"/>
      <outElement name="elecK" id="/n/elec/compt/K" field="set_Gbar" 
            adapt_type="outputSrc" mode="OneToAll"/>
    </adaptor>
    <adaptor name="adaptCa" id="/n/chem/neuroMesh/adaptCa" outputOffset="0.0001" scale="0.05">
      <inElement name="elecCa" id="/n/elec/compt/ca" field="concOut" 
            adapt_type="input" mode="OneToAll"/>
      <outElement name="chemCa" id="/n/chem/neuroMesh/Ca" field="set_conc" 
            adapt_type="outputSrc" mode="OneToAll"/>
    </adaptor>
  </listOfAdaptors>
</adapterML>
@ %def adaptorML
\section{MuMBL : A language for multi-scale modelling}
\label{sec:mumbl}

    This XML based language must be provided by user to do multi-scale modelling
    with [[moose]]. An example is given below which is used during development
    of this document. Mumble contains one or more domains of various type. Its
    tentative grammar is below.

\todo[inline]{Write the full grammar}

\setlength{\grammarparsep}{20pt plus 1pt minus 1pt} % increase separation between rules
\setlength{\grammarindent}{12em} % increase separation between LHS/RHS 
\begin{grammar}
<mumbl-file> ::= <domains>

<domains> ::= <domains> \alt <domain> 

<domain> ::= <electrical> \alt <chemical> \alt <simulation>
\end{grammar}

    An example of this script is following.

%file:moose_xml/mumbl.xml
<<mumbl.xml>>=
<?xml version="1.0"?>
<mumbl>
  <<electrical domain>>
  <<chemical domain>>
  <<simulation domain>>
</mumbl>
@ %def mumbl.xml

<<electrical domain>>=
<!-- Electrical domain and its parameter -->
<domain type="electrical">
  <elecDt type="parameter">50e-6</elecDt>
</domain>
@ %def 

<<chemical domain>>=
<!-- Chemical domain and its parameters-->
<domain type="chemical">
  <chemDt type="parameter">1e-4</chemDt>
</domain>
@

<<simulation domain>>=
<domain type="simulation">
  <startTime type="time">0</startTime>
  <endTime type="time">100e-3</endTime>

  <!-- Add plots here -->
  <plots>
    <plot2D type="line">
      <yaxis scale="log" min="0" max="10" step="1">
        <var name="Vm" of="soma" path="/model/elec/soma" />
        <label>Voltage at Soma</label>
      </yaxis>
      <xaxis scale="log" min="0" max="100e-3" step="1e-3">
        <var name="time" />
        <label>Simulation time</label>
      </xaxis>
    </plot2D>
  </plots>
</domain>
@
\section{XML parser}
\label{sec:parser}

  This section deals with parser of XML models. In [[multiscale.nw]], we call
  function [[parseModels]] belonging to this module. This function receives its
  arguments, a dictionary of paths of XML models. These file-paths are already
  verified; they exists and are readable. We now parse the XMLs and return a
  dictionary, with keys as path of XML models and value as top-most XML element.

  Following captures what this module suppose to do.

%file:src/parser.py
<<parser.py>>=
<<Import>>
import collections
<<helper functions>>
<<function [[parseModels]] for parsing models>>
@

\paragraph{Parse models}

  Function [[parseModels]] parses the model, and it creates a dictionary
  containing root elements of parsed files to be returned. This function first
  read the file and validate it with a given schema. Validation can be turned
  on/off by setting the optional argument [[validate]] to [[False]].

<<function [[parseModels]] for parsing models>>=
def parseModels(commandLineArgs, validate=False) :
  xmlRootElemDict = collections.defaultdict(list)
  models = vars(commandLineArgs)
  for model in models :
    if models[model] :
      for modelPath in models[model] :
        debug.printDebug("INFO", "Parsing {0}".format(models[model]))
        if validate :
          # parse model and valid it with schama
          modelXMLRootElem = parseAndValidateWithSchema(model, modelPath)
        else :
          # Simple parse the model without validating it with schema.
          modelXMLRootElem = parseWithoutValidation(model, modelPath)
        if modelXMLRootElem :
          xmlRootElemDict[model].append((modelXMLRootElem, modelPath))
  return xmlRootElemDict 

@  %def parseModels 

\paragraph{Validating with schema}

  We need two helper functions, [[parseAndValidateWithSchema]] to parse a given
  XML when a schema is available and [[parseWithoutValidation]] validation is
  off \textbf{schema is not available}. Ideally, schema should be provided as an
  argument to this module, but we can fix their location. Folder [[./moose_xml]]
  contains the schema we are going to build and use in this application. Its
  path is [[./moose_xml/moose.xsd]].

<<helper functions>>=
def parseAndValidateWithSchema(modelName, modelPath) :
    
    prefixPath = ''
    if modelName == 'xml' :
      schemaPath = os.path.join(prefixPath, 'schema/moose/moose.xsd')
      if not os.path.isfile(schemaPath) :
        debug.printDebug("WARN", "Schema {0} does not exists..".format(schemaPath))

    try :
      schemaH = open(schemaPath, "r")
      schemaText = schemaH.read()
      schemaH.close()
    except Exception as e :
      debug.printDebug("WARN", "Error reading schema for validation."+
        " Falling back to validation-disabled parser."
        + " Failed with error {0}".format(e))
      return parseWithoutValidation(modelName, modelPath)
    # Now we have the schema text 
    schema = etree.XMLSchema(etree.XML(schemaText))
    xmlParser = etree.XMLParser(schema=schema, remove_comments=True)
    with open(modelPath, "r") as xmlTextFile :
        return etree.parse(xmlTextFile, xmlParser)

@ %def parseAndValidateWithSchema 

<<helper functions>>=
def parseWithoutValidation(modelName, modelPath) :
    xmlParser = etree.XMLParser(remove_comments=True)
    try :
      xmlRootElem = etree.parse(modelPath, xmlParser)
    except Exception as e :
      debug.printDebug("ERROR", "Parsing failed. {0}".format(e))
      return 
    return xmlRootElem 

@ %def parseWithoutValidation 

This ends our parser module and we can now go back to section
\ref{sec:multiscale} to do some real programming related stuff.

\section{Debug module, print debugging messages}
\label{sec:debug}

  Different type of messages are printed in different colors. 

%file:src/debug.py
<<debug.py>>=
from __future__ import print_function
import inspect 
import sys

HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
ERR = '\033[31m'
ENDC = '\033[0m'
RED = ERR
WARN = WARNING
INFO = OKBLUE
TODO = OKGREEN
DEBUG = HEADER
ERROR = ERR

prefix = dict(
    ERR = ERR
    , ERROR = ERR
    , WARN = WARN
    , FATAL = ERR
    , INFO = INFO
    , TODO = TODO 
    , NOTE = HEADER 
    , DEBUG = DEBUG
    )

def colored(msg, label="INFO") :
    """
    Return a colored string. Formatting is optional.
    """
    global prefix
    if label in prefix :
        color = prefix[label]
    else :
        color = ""
    return "{0} {1}".format(color+msg, ENDC)

def printDebug(label, msg, frame=None):
    if not frame :
      print("[{0}] {1}".format(label, colored(msg,label)), file=sys.stderr)
    else :
      filename = frame.f_code.co_filename 
      filename = "/".join(filename.split("/")[-2:])
      print("[{3}] @...{0}:{1} {2}".format(filename
        , frame.f_lineno
        , colored(msg, label)
        , label)
        , file=sys.stderr
        )

@ %def debug_module 

\include{glossary}
\nowebchunks
\nowebindex
\listoftodos
\end{document}          
