!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CELSIUS_default	parser/utils.py	/^CELSIUS_default = 32.0 # deg C # default temperature if meta:property tag for temperature is not present$/;"	v
ChannelML	parser/ChannelML.py	/^class ChannelML():$/;"	c
DEBUG	debug/debug.py	/^DEBUG = HEADER$/;"	v
DynamicObject	core/dynamic_vars.py	/^class DynamicObject:$/;"	c
ECA	multi_bhalla/proto18.py	/^ECA = 0.140 + EREST_ACT #\/\/ 0.080$/;"	v
EK	multi_bhalla/proto18.py	/^EK = -0.015 + EREST_ACT #\/\/ -0.075$/;"	v
ENA	multi_bhalla/proto18.py	/^ENA = 0.115 + EREST_ACT #\/\/ 0.055$/;"	v
ENDC	debug/debug.py	/^ENDC = '\\033[0m'$/;"	v
EREST_ACT	multi_bhalla/diffusionOnly.py	/^EREST_ACT = -70e-3$/;"	v
EREST_ACT	multi_bhalla/lm2.py	/^EREST_ACT = -70e-3$/;"	v
EREST_ACT	multi_bhalla/loadMulti.py	/^EREST_ACT = -70e-3$/;"	v
EREST_ACT	multi_bhalla/minimal.py	/^EREST_ACT = -70e-3$/;"	v
EREST_ACT	multi_bhalla/proto18.py	/^EREST_ACT = -0.060 #\/* hippocampal cell resting potl *\/$/;"	v
EREST_ACT	multi_bhalla/x_compt.py	/^EREST_ACT = -70e-3$/;"	v
ERR	debug/debug.py	/^    ERR = ERR$/;"	v
ERR	debug/debug.py	/^ERR = '\\033[31m'$/;"	v
ERROR	debug/debug.py	/^ERROR = ERR$/;"	v
HEADER	debug/debug.py	/^HEADER = '\\033[95m'$/;"	v
INFO	debug/debug.py	/^INFO = OKBLUE$/;"	v
MorphML	parser/MorphML.py	/^class MorphML():$/;"	c
Mumble	core/mumbl.py	/^class Mumble(object):$/;"	c
NDIVS	parser/utils.py	/^NDIVS = 200 # number$/;"	v
NetworkML	parser/NetworkML.py	/^class NetworkML():$/;"	c
NeuroML	parser/NeuroML.py	/^class NeuroML:$/;"	c
OKBLUE	debug/debug.py	/^OKBLUE = '\\033[94m'$/;"	v
OKGREEN	debug/debug.py	/^OKGREEN = '\\033[92m'$/;"	v
PID	multi_bhalla/lm2.py	/^PID = os.getpid()$/;"	v
PID	multi_bhalla/loadMulti.py	/^PID = os.getpid()$/;"	v
PLOTDT	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^PLOTDT = 25e-6 # s$/;"	v
RED	debug/debug.py	/^RED = ERR$/;"	v
RUNTIME	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^RUNTIME = 2.0 # s$/;"	v
SIMDT	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^SIMDT = 25e-6 # s$/;"	v
SOMA_A	multi_bhalla/proto18.py	/^SOMA_A = 3.320e-9       #\/\/ soma area in square meters$/;"	v
Simulator	core/simulator.py	/^class Simulator(object):$/;"	c
TODO	debug/debug.py	/^TODO = OKGREEN$/;"	v
VMAX	parser/utils.py	/^VMAX = 0.1 # Volts$/;"	v
VMIN	parser/utils.py	/^VMIN = -0.1 # Volts$/;"	v
WARN	debug/debug.py	/^WARN = WARNING$/;"	v
WARNING	debug/debug.py	/^WARNING = '\\033[93m'$/;"	v
ZeroCKelvin	parser/utils.py	/^ZeroCKelvin = 273.15 # zero dec C in Kelvin$/;"	v
__author__	core/dynamic_vars.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	core/mumbl.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	core/simulator.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	helper/graph_methods.py	/^__author__  = "Dilawar Singh <dilawars@ncbs.res.in>"$/;"	v
__author__	helper/xml_methods.py	/^__author__  = "Dilawar Singh <dilawars@ncbs.res.in>"$/;"	v
__author__	parser/importer.py	/^__author__  = "Dilawar Singh <dilawars@ncbs.res.in>"$/;"	v
__copyright__	core/dynamic_vars.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__copyright__	core/mumbl.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__copyright__	core/simulator.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__credits__	core/dynamic_vars.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	core/mumbl.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	core/simulator.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	parser/importer.py	/^__credits__ = "NCBS"$/;"	v
__date__	parser/importer.py	/^__date__    = "Mon 21 Oct 2013 11:37:01 PM IST"$/;"	v
__email__	core/dynamic_vars.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__email__	core/mumbl.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__email__	core/simulator.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__init__	core/dynamic_vars.py	/^    def __init__(self):$/;"	m	class:DynamicObject
__init__	core/dynamic_vars.py	/^    def __init__(self, name):$/;"	m	class:DynamicObject
__init__	core/mumbl.py	/^    def __init__(self, mumbl):$/;"	m	class:Mumble
__init__	core/simulator.py	/^    def __init__(self, arg):$/;"	m	class:Simulator
__init__	parser/ChannelML.py	/^    def __init__(self, nml_params):$/;"	m	class:ChannelML
__init__	parser/MorphML.py	/^    def __init__(self,nml_params):$/;"	m	class:MorphML
__init__	parser/NetworkML.py	/^    def __init__(self, nml_params):$/;"	m	class:NetworkML
__init__	parser/NeuroML.py	/^    def __init__(self):$/;"	m	class:NeuroML
__license__	core/dynamic_vars.py	/^__license__          = "GPL"$/;"	v
__license__	core/mumbl.py	/^__license__          = "GPL"$/;"	v
__license__	core/simulator.py	/^__license__          = "GPL"$/;"	v
__maintainer__	core/dynamic_vars.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__maintainer__	core/mumbl.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__maintainer__	core/simulator.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__status__	core/dynamic_vars.py	/^__status__           = "Development"$/;"	v
__status__	core/mumbl.py	/^__status__           = "Development"$/;"	v
__status__	core/simulator.py	/^__status__           = "Development"$/;"	v
__version__	core/dynamic_vars.py	/^__version__          = "1.0.0"$/;"	v
__version__	core/mumbl.py	/^__version__          = "1.0.0"$/;"	v
__version__	core/simulator.py	/^__version__          = "1.0.0"$/;"	v
__version__	parser/importer.py	/^__version__ = "1.0"$/;"	v
addBiophysics	parser/MorphML.py	/^    def addBiophysics(self, cell, cellName):$/;"	m	class:MorphML
addCompartment	core/mumbl.py	/^    def addCompartment(self, compartmentXml):$/;"	m	class:Mumble
addConnection	parser/NetworkML.py	/^    def addConnection(self, connection, projection, options):$/;"	m	class:NetworkML
addConnectivity	parser/MorphML.py	/^    def addConnectivity(self, cell, cellName, connectivity):$/;"	m	class:MorphML
addInitMembPotential	parser/MorphML.py	/^    def addInitMembPotential(self, init_memb_potential, cell, cellName):$/;"	m	class:MorphML
addMechanism	parser/MorphML.py	/^    def addMechanism(self, mechanism, cell, cellName):$/;"	m	class:MorphML
addParameterToCompartment	parser/MorphML.py	/^    def addParameterToCompartment(self, parameter, cell, options):$/;"	m	class:MorphML
addPlot	core/simulator.py	/^    def addPlot(self, plotVar):$/;"	m	class:Simulator
addPlot	multi_bhalla/diffusionOnly.py	/^def addPlot( objpath, field, plot ):$/;"	f
addPlot	multi_bhalla/lm2.py	/^def addPlot( objpath, field, plot ):$/;"	f
addPlot	multi_bhalla/loadMulti.py	/^def addPlot( objpath, field, plot ):$/;"	f
addPlot	multi_bhalla/minimal.py	/^def addPlot( objpath, field, plot ):$/;"	f
addPlot	multi_bhalla/x_compt.py	/^def addPlot( objpath, field, plot ):$/;"	f
addSegment	parser/MorphML.py	/^    def addSegment(self, cellName, segnum, segment):$/;"	m	class:MorphML
addSpecAxialResistance	parser/MorphML.py	/^    def addSpecAxialResistance(self, spec_axial_resistance, cell, cellName):$/;"	m	class:MorphML
addSpecCapacitance	parser/MorphML.py	/^    def addSpecCapacitance(self, spec_capacitance, cell, cellName):$/;"	m	class:MorphML
argParser	main.py	/^argParser = argparse.ArgumentParser(description= 'Mutiscale modelling of neurons')$/;"	v
args	main.py	/^args = argParser.parse_args()$/;"	v
attachInputToMoose	parser/NetworkML.py	/^    def attachInputToMoose(self, inElemXml, factors):$/;"	m	class:NetworkML
attachToNodesInGroup	helper/graph_methods.py	/^def attachToNodesInGroup(cellG, groups, pName, pValue):$/;"	f
bio_ns	parser/utils.py	/^bio_ns='http:\/\/morphml.org\/biophysics\/schema'$/;"	v
capool	multi_bhalla/runcell18.py	/^capool = moose.element( '\/cell\/soma\/Ca_conc' )$/;"	v
catab	multi_bhalla/runcell18.py	/^catab = moose.Table( '\/graphs\/ca' )$/;"	v
cellId	multi_bhalla/runcell18.py	/^cellId = moose.loadModel( 'ca1_asym.p', '\/cell', "hsolve" )$/;"	v
cells_path	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^cells_path = '\/cells' # neuromlR.readNeuroMLFromFile creates cells in '\/cells'$/;"	v
channelToMoose	parser/NeuroML.py	/^    def channelToMoose(self, cmlR, channels):$/;"	m	class:NeuroML
checkIfRefractoryPeriodIsViolated	core/stimulus.py	/^    def checkIfRefractoryPeriodIsViolated(simArray):$/;"	f	function:generateSpikeTrainPoission
cml_ns	parser/utils.py	/^cml_ns='http:\/\/morphml.org\/channelml\/schema'$/;"	v
colored	debug/debug.py	/^def colored(msg, label="INFO") :$/;"	f
connect	parser/NetworkML.py	/^    def connect(self, syn_name, pre_path, post_path, weight, threshold, delay):$/;"	m	class:NetworkML
countSpikes	core/stimulus.py	/^def countSpikes(spikeArray):$/;"	f
createInputs	parser/NetworkML.py	/^    def createInputs(self):$/;"	m	class:NetworkML
createMoosePathForModel	core/mumbl.py	/^    def createMoosePathForModel(self, modelNo, modelType, species=None):$/;"	m	class:Mumble
createPopulations	parser/NetworkML.py	/^    def createPopulations(self):$/;"	m	class:NetworkML
createProjections	parser/NetworkML.py	/^    def createProjections(self):$/;"	m	class:NetworkML
currentvec	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^currentvec = arange(0.0, injectmax, injectmax\/50.0)$/;"	v
do_nothing	multi_bhalla/lm2.py	/^def do_nothing( *args ):$/;"	f
do_nothing	multi_bhalla/loadMulti.py	/^def do_nothing( *args ):$/;"	f
dt	multi_bhalla/runcell18.py	/^dt = 50e-6$/;"	v
dumpPlots	multi_bhalla/diffusionOnly.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/lm2.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/loadMulti.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/minimal.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/runcell18.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/x_compt.py	/^def dumpPlots( fname ):$/;"	f
dv	parser/utils.py	/^dv = ( VMAX - VMIN ) \/ NDIVS # Volts$/;"	v
elemExists	helper/xml_methods.py	/^def elemExists(rootElem, nmExpr, path) :$/;"	f
etreeDict	main.py	/^        etreeDict = parser.parseXMLs(args, validate=False)$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98.py	/^        filename = "GranuleCell.net.xml"$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98.py	/^        filename = sys.argv[1]$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98.py	/^filename = "GranuleCell.net.xml"$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^        filename = "GranuleCell.net.xml"$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^        filename = sys.argv[1]$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^filename = "GranuleCell.net.xml"$/;"	v
find_first_file	parser/utils.py	/^def find_first_file(name, path):$/;"	f
fixRefractoryViolation	core/stimulus.py	/^    def fixRefractoryViolation(simArray):$/;"	f	function:generateSpikeTrainPoission
fn	parser/ChannelML.py	/^            def fn(self,v):$/;"	f	function:ChannelML.make_function
fn	parser/ChannelML.py	/^            def fn(self,v,ca=None):$/;"	f	function:ChannelML.make_function
freqList	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^freqList = []$/;"	v
generateSpikeTrainPoission	core/stimulus.py	/^def generateSpikeTrainPoission(frequency, dt=1e-3, simTime=100e-3$/;"	f
generate_poisson_times	core/stimulus.py	/^def generate_poisson_times(rate=20, simtime=100, seed=1):$/;"	f
getCompName	parser/MorphML.py	/^    def getCompName(self, compExpr):$/;"	m	class:MorphML
getCompartmentId	parser/MorphML.py	/^    def getCompartmentId(self, compExpr):$/;"	m	class:MorphML
getElement	helper/xml_methods.py	/^def getElement(rootElem, nmlExpr, path) :$/;"	f
getTagName	helper/xml_methods.py	/^def getTagName(nmTag) :$/;"	f
granCell	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^granCell = moose.Neuron(granCellid)$/;"	v
granCellSoma	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^granCellSoma = moose.Compartment(granCell.path+'\/Soma_0')$/;"	v
granCellSpikesTable	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^granCellSpikesTable = moose.Table(table_path+'\/spikesTable')$/;"	v
granCellid	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^granCellid = moose.copy(libcell,moose.Neutral('\/cells'),'granCell')$/;"	v
graphs	multi_bhalla/runcell18.py	/^graphs = moose.Neutral( '\/graphs' )$/;"	v
hsolve	multi_bhalla/runcell18.py	/^hsolve = moose.HSolve( '\/cell\/hsolve' )$/;"	v
ifPathsAreValid	main.py	/^def ifPathsAreValid(paths) :$/;"	f
ifPathsAreValid	parser/importer.py	/^def ifPathsAreValid(paths) :$/;"	f
indent	parser/utils.py	/^def indent(elem, level=0):$/;"	f
initPaths	core/mumbl.py	/^    def initPaths(self, paths):$/;"	m	class:Mumble
injectmax	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^injectmax = 20e-12 # Amperes$/;"	v
integateAndFireMechanism	parser/MorphML.py	/^    def integateAndFireMechanism(self, mechanism):$/;"	m	class:MorphML
isTaggedWith	helper/xml_methods.py	/^def isTaggedWith(nmElem, tag) :$/;"	f
keepOnlyInclude	parser/utils.py	/^def keepOnlyInclude(network, onlyInclude):$/;"	f
libcell	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^libcell = moose.Neuron('\/library\/Granule_98')$/;"	v
library	multi_bhalla/runcell18.py	/^library = moose.Neutral( '\/library' )$/;"	v
load	core/mumbl.py	/^    def load(self):$/;"	m	class:Mumble
loadChem	multi_bhalla/diffusionOnly.py	/^def loadChem( neuroCompt, spineCompt, psdCompt ):$/;"	f
loadChem	multi_bhalla/lm2.py	/^def loadChem( chemFile, diffLength ):$/;"	f
loadChem	multi_bhalla/loadMulti.py	/^def loadChem( neuroCompt, spineCompt, psdCompt ):$/;"	f
loadChem	multi_bhalla/minimal.py	/^def loadChem( neuroCompt, spineCompt, psdCompt ):$/;"	f
loadChem	multi_bhalla/x_compt.py	/^def loadChem( neuroCompt, spineCompt, psdCompt ):$/;"	f
loadChemicalModel	core/mumbl.py	/^    def loadChemicalModel(self, modelXml):$/;"	m	class:Mumble
loadElec	multi_bhalla/diffusionOnly.py	/^def loadElec():$/;"	f
loadElec	multi_bhalla/lm2.py	/^def loadElec( elecFile ):$/;"	f
loadElec	multi_bhalla/loadMulti.py	/^def loadElec():$/;"	f
loadElec	multi_bhalla/minimal.py	/^def loadElec():$/;"	f
loadElec	multi_bhalla/x_compt.py	/^def loadElec():$/;"	f
loadElectricalModel	core/mumbl.py	/^    def loadElectricalModel(self, modelXml):$/;"	m	class:Mumble
loadGran98NeuroML_L123	models/neuroml/v1.8/GranuleCell/Granule98.py	/^def loadGran98NeuroML_L123(filename):$/;"	f
loadGran98NeuroML_L123	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^def loadGran98NeuroML_L123(filename):$/;"	f
loadModel	core/mumbl.py	/^    def loadModel(self, modelXml):$/;"	m	class:Mumble
loadNML	parser/NeuroML.py	/^    def loadNML(self, nml):$/;"	m	class:NeuroML
loadStimulus	multi_bhalla/lm2.py	/^def loadStimulus( freq, receptorPath, weight, delay ):$/;"	f
logFile	core/config.py	/^logFile = 'logs\/moose.log'$/;"	v
logFile	debug/logger.py	/^logFile = 'logs\/moose.log'$/;"	v
logPathsToFille	core/config.py	/^def logPathsToFille(pat):$/;"	f
logPathsToFille	debug/logger.py	/^def logPathsToFille(pat):$/;"	f
logger	parser/importer.py	/^logger = logging.getLogger('multiscale')$/;"	v
logger	parser/parser.py	/^logger = logging.getLogger('multiscale')$/;"	v
main	multi_bhalla/diffusionOnly.py	/^def main():$/;"	f
main	multi_bhalla/lm2.py	/^def main():$/;"	f
main	multi_bhalla/loadMulti.py	/^def main():$/;"	f
main	multi_bhalla/minimal.py	/^def main():$/;"	f
main	multi_bhalla/x_compt.py	/^def main():$/;"	f
makeChemPlots	multi_bhalla/diffusionOnly.py	/^def makeChemPlots():$/;"	f
makeChemPlots	multi_bhalla/lm2.py	/^def makeChemPlots( compts, index ):$/;"	f
makeChemPlots	multi_bhalla/loadMulti.py	/^def makeChemPlots():$/;"	f
makeChemPlots	multi_bhalla/minimal.py	/^def makeChemPlots():$/;"	f
makeChemPlots	multi_bhalla/x_compt.py	/^def makeChemPlots():$/;"	f
makeChemSolver	multi_bhalla/lm2.py	/^def makeChemSolver( compartmentPath ):$/;"	f
makeElecPlots	multi_bhalla/diffusionOnly.py	/^def makeElecPlots():$/;"	f
makeElecPlots	multi_bhalla/lm2.py	/^def makeElecPlots( compts ):$/;"	f
makeElecPlots	multi_bhalla/loadMulti.py	/^def makeElecPlots():$/;"	f
makeElecPlots	multi_bhalla/minimal.py	/^def makeElecPlots():$/;"	f
makeElecPlots	multi_bhalla/x_compt.py	/^def makeElecPlots():$/;"	f
makeNeuroMeshModel	multi_bhalla/diffusionOnly.py	/^def makeNeuroMeshModel():$/;"	f
makeNeuroMeshModel	multi_bhalla/lm2.py	/^def makeNeuroMeshModel( elecFile, chemFile, cellPortion, chemCa ):$/;"	f
makeNeuroMeshModel	multi_bhalla/loadMulti.py	/^def makeNeuroMeshModel():$/;"	f
makeNeuroMeshModel	multi_bhalla/minimal.py	/^def makeNeuroMeshModel():$/;"	f
makeNeuroMeshModel	multi_bhalla/x_compt.py	/^def makeNeuroMeshModel():$/;"	f
make_Ca	multi_bhalla/proto18.py	/^def make_Ca():$/;"	f
make_Ca_NMDA	multi_bhalla/proto18.py	/^def make_Ca_NMDA():$/;"	f
make_Ca_conc	multi_bhalla/proto18.py	/^def make_Ca_conc():$/;"	f
make_K_A	multi_bhalla/proto18.py	/^def make_K_A():$/;"	f
make_K_AHP	multi_bhalla/proto18.py	/^def make_K_AHP():$/;"	f
make_K_C	multi_bhalla/proto18.py	/^def make_K_C():$/;"	f
make_K_DR	multi_bhalla/proto18.py	/^def make_K_DR():$/;"	f
make_NMDA	multi_bhalla/proto18.py	/^def make_NMDA():$/;"	f
make_NMDA_Ca_conc	multi_bhalla/proto18.py	/^def make_NMDA_Ca_conc():$/;"	f
make_Na	multi_bhalla/proto18.py	/^def make_Na():$/;"	f
make_axon	multi_bhalla/proto18.py	/^def make_axon():$/;"	f
make_cml_function	parser/ChannelML.py	/^    def make_cml_function(self, element, fn_name, concdep=None):$/;"	m	class:ChannelML
make_function	parser/ChannelML.py	/^    def make_function(self, fn_name, fn_type, **kwargs):$/;"	m	class:ChannelML
make_glu	multi_bhalla/proto18.py	/^def make_glu():$/;"	f
make_new_synapse	parser/NetworkML.py	/^    def make_new_synapse(self, syn_name, postcomp, syn_name_full):$/;"	m	class:NetworkML
mapSimulationElement	core/simulator.py	/^    def mapSimulationElement(self, xmlElem):$/;"	m	class:Simulator
meta_ns	parser/utils.py	/^meta_ns='http:\/\/morphml.org\/metadata\/schema'$/;"	v
mml_ns	parser/utils.py	/^mml_ns='http:\/\/morphml.org\/morphml\/schema'$/;"	v
mooseLogger	core/config.py	/^mooseLogger = logging.getLogger()$/;"	v
mooseLogger	debug/logger.py	/^mooseLogger = logging.getLogger()$/;"	v
moveCompt	multi_bhalla/diffusionOnly.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
moveCompt	multi_bhalla/lm2.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
moveCompt	multi_bhalla/loadMulti.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
moveCompt	multi_bhalla/minimal.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
moveCompt	multi_bhalla/x_compt.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
mumblObj	main.py	/^        mumblObj = mumbl.Mumble(etreeDict['mumbl'][0])$/;"	v
neuromlR	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^neuromlR = NeuroML()$/;"	v
neuroml_debug	parser/utils.py	/^neuroml_debug = False$/;"	v
neuroml_ns	parser/utils.py	/^neuroml_ns='http:\/\/morphml.org\/neuroml\/schema'$/;"	v
nml	main.py	/^        nml = etreeDict['nml'][0]$/;"	v
nmlObj	main.py	/^        nmlObj = NeuroML.NeuroML()$/;"	v
nml_ns	parser/utils.py	/^nml_ns='http:\/\/morphml.org\/networkml\/schema'$/;"	v
parseAndValidateWithSchema	parser/parser.py	/^def parseAndValidateWithSchema(modelName, modelPath) :$/;"	f
parseWithoutValidation	parser/parser.py	/^def parseWithoutValidation(modelName, modelPath) :$/;"	f
parseXMLs	parser/parser.py	/^def parseXMLs(commandLineArgs, validate=False) :$/;"	f
plotdt	models/neuroml/v1.8/GranuleCell/Granule98.py	/^plotdt = 10e-6 # s$/;"	v
plotdt	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^plotdt = 10e-6 # s$/;"	v
prefix	debug/debug.py	/^prefix = dict($/;"	v
printDebug	debug/debug.py	/^def printDebug(label, msg, frame=None, exception=None):$/;"	f
project_opened	.ropeproject/config.py	/^def project_opened(project):$/;"	f
pruneExcludes	parser/utils.py	/^def pruneExcludes(network, excludepops, excludeprojs):$/;"	f
readChannelML	parser/ChannelML.py	/^    def readChannelML(self,channelElement,params={},units="SI units"):$/;"	m	class:ChannelML
readChannelMLFromFile	parser/ChannelML.py	/^    def readChannelMLFromFile(self, _filename, _params={}):$/;"	m	class:ChannelML
readIonConcML	parser/ChannelML.py	/^    def readIonConcML(self, ionConcElement, units="SI units"):$/;"	m	class:ChannelML
readMorphML	parser/MorphML.py	/^    def readMorphML(self, cell, params={}, lengthUnits="micrometer"):$/;"	m	class:MorphML
readMorphMLFromFile	parser/MorphML.py	/^    def readMorphMLFromFile(self, filename, params={}):$/;"	m	class:MorphML
readNetworkML	parser/NetworkML.py	/^    def readNetworkML(self, network, cellSegmentDict , params={}$/;"	m	class:NetworkML
readNetworkMLFromFile	parser/NetworkML.py	/^    def readNetworkMLFromFile(self, filename, cellSegmentDict, params={}):$/;"	m	class:NetworkML
readNeuroMLFromFile	parser/NeuroML.py	/^    def readNeuroMLFromFile(self, filename, params=dict()):$/;"	m	class:NeuroML
readSynapseML	parser/ChannelML.py	/^    def readSynapseML(self,synapseElement,units="SI units"):$/;"	m	class:ChannelML
replace	parser/ChannelML.py	/^    def replace(self, text, findstr, replacestr):$/;"	m	class:ChannelML
runCode	run_granule98_hsolve.sh	/^function runCode $/;"	f
runCode	run_mumbl.sh	/^function runCode $/;"	f
runtime	models/neuroml/v1.8/GranuleCell/Granule98.py	/^runtime = 0.7 # s$/;"	v
runtime	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^runtime = 0.7 # s$/;"	v
safe_dict	parser/utils.py	/^safe_dict = dict([ (k, locals().get(k, None)) for k in safe_list ])$/;"	v
safe_list	parser/utils.py	/^safe_list = ['acos', 'asin', 'atan', 'atan2', 'ceil',$/;"	v
segGrp2Color	helper/graph_methods.py	/^def segGrp2Color(grpName, grps):$/;"	f
setAdaptor	multi_bhalla/lm2.py	/^def setAdaptor( chemCaPath):$/;"	f
setQ10	parser/ChannelML.py	/^    def setQ10(self, q10settings):$/;"	m	class:ChannelML
set_attrib_if_not_found	parser/utils.py	/^def set_attrib_if_not_found(elem, name, value):$/;"	f
set_compartment_param	parser/MorphML.py	/^    def set_compartment_param(self, compartment, name, value, mechName):$/;"	m	class:MorphML
set_group_compartment_param	parser/MorphML.py	/^    def set_group_compartment_param(self, cell, cellName, parameter, name$/;"	m	class:MorphML
set_neuroml_namespaces_attribs	parser/utils.py	/^def set_neuroml_namespaces_attribs(neuromlroot):$/;"	f
set_prefs	.ropeproject/config.py	/^def set_prefs(prefs):$/;"	f
setupRecored	core/simulator.py	/^    def setupRecored(self, recordXml, params):$/;"	m	class:Simulator
simObj	main.py	/^        simObj = moose_config.Simulator(etreeDict['config'][0])$/;"	v
simdt	core/stimulus.py	/^simdt = 1e-3$/;"	v
simdt	models/neuroml/v1.8/GranuleCell/Granule98.py	/^simdt = 1e-6 # s$/;"	v
simdt	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^simdt = 10e-6 # s$/;"	v
simtime	core/stimulus.py	/^simtime = 100$/;"	v
soma	multi_bhalla/runcell18.py	/^soma = moose.element( '\/cell\/soma' )$/;"	v
spikeGen	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^spikeGen = moose.SpikeGen(granCell.path+'\/spikeGen')$/;"	v
spikesList	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^        spikesList = spikesList[where(spikesList>0.0)[0]]$/;"	v
spikesList	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^    spikesList = array(granCellSpikesTable.vec)$/;"	v
spikesNow	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^        spikesNow = len(spikesList)$/;"	v
st	core/config.py	/^st = datetime.datetime.fromtimestamp(st).strftime('%Y-%m-%d-%H%M')$/;"	v
st	core/config.py	/^st = time.time()$/;"	v
st	debug/logger.py	/^st = datetime.datetime.fromtimestamp(st).strftime('%Y-%m-%d-%H%M')$/;"	v
st	debug/logger.py	/^st = time.time()$/;"	v
stringToFloat	parser/MorphML.py	/^    def stringToFloat(self, tempString):$/;"	m	class:MorphML
tab	multi_bhalla/runcell18.py	/^tab = moose.Table( '\/graphs\/soma' )$/;"	v
table_path	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^table_path = moose.Neutral(granCell.path+'\/data').path$/;"	v
testNeuroMeshMultiscale	multi_bhalla/diffusionOnly.py	/^def testNeuroMeshMultiscale():$/;"	f
testNeuroMeshMultiscale	multi_bhalla/lm2.py	/^def testNeuroMeshMultiscale():$/;"	f
testNeuroMeshMultiscale	multi_bhalla/loadMulti.py	/^def testNeuroMeshMultiscale():$/;"	f
testNeuroMeshMultiscale	multi_bhalla/minimal.py	/^def testNeuroMeshMultiscale():$/;"	f
testNeuroMeshMultiscale	multi_bhalla/x_compt.py	/^def testNeuroMeshMultiscale():$/;"	f
testPythonCode	run_granule98_hsolve.sh	/^function testPythonCode $/;"	f
testPythonCode	run_mumbl.sh	/^function testPythonCode $/;"	f
timetable_demo	core/stimulus.py	/^def timetable_demo():$/;"	f
timetable_file	core/stimulus.py	/^def timetable_file(filename='timetable.txt', simtime=100):$/;"	f
timetable_nparray	core/stimulus.py	/^def timetable_nparray(simtime=100):$/;"	f
translate_rotate	parser/NetworkML.py	/^    def translate_rotate(self,obj,x,y,z,ztheta): $/;"	m	class:NetworkML
tweak_model	parser/utils.py	/^def tweak_model(root_element, params):$/;"	f
updateMoose	core/simulator.py	/^    def updateMoose(self, populationDict, projectionDict):$/;"	m	class:Simulator
write_dot	helper/graph_methods.py	/^def write_dot(g, filename):$/;"	f
xsi_ns	parser/utils.py	/^xsi_ns='http:\/\/www.w3.org\/2001\/XMLSchema-instance'$/;"	v
