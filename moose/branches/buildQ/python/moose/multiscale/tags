!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUG_NetworkML_500	debug/bugs.py	/^BUG_NetworkML_500 = False$/;"	v
CELSIUS_default	parser/utils.py	/^CELSIUS_default = 32.0 # deg C # default temperature if meta:property tag for temperature is not present$/;"	v
ChannelML	parser/ChannelML.py	/^class ChannelML:$/;"	c
ChannelML	parser/MorphML.py	/^from ChannelML import ChannelML$/;"	i
ChannelML	parser/NetworkML.py	/^import ChannelML$/;"	i
ChannelML	parser/NeuroML.py	/^import ChannelML$/;"	i
DEBUG	debug/debug.py	/^DEBUG = HEADER$/;"	v
DebugDB	debug/db.py	/^class DebugDB:$/;"	c
DoubleDict	core/types.py	/^class DoubleDict:$/;"	c
DynamicObject	core/dynamic_vars.py	/^class DynamicObject:$/;"	c
ECA	multi_bhalla/proto18.py	/^ECA = 0.140 + EREST_ACT #\/\/ 0.080$/;"	v
EK	multi_bhalla/proto18.py	/^EK = -0.015 + EREST_ACT #\/\/ -0.075$/;"	v
ENA	multi_bhalla/proto18.py	/^ENA = 0.115 + EREST_ACT #\/\/ 0.055$/;"	v
ENDC	debug/debug.py	/^ENDC = '\\033[0m'$/;"	v
EREST_ACT	multi_bhalla/diffusionOnly.py	/^EREST_ACT = -70e-3$/;"	v
EREST_ACT	multi_bhalla/lm2.py	/^EREST_ACT = -70e-3$/;"	v
EREST_ACT	multi_bhalla/loadMulti.py	/^EREST_ACT = -70e-3$/;"	v
EREST_ACT	multi_bhalla/minimal.py	/^EREST_ACT = -70e-3$/;"	v
EREST_ACT	multi_bhalla/proto18.py	/^EREST_ACT = -0.060 #\/* hippocampal cell resting potl *\/$/;"	v
EREST_ACT	multi_bhalla/x_compt.py	/^EREST_ACT = -70e-3$/;"	v
ERR	debug/debug.py	/^    ERR = ERR$/;"	v
ERR	debug/debug.py	/^ERR = '\\033[31m'$/;"	v
ERROR	debug/debug.py	/^ERROR = ERR$/;"	v
ET	parser/ChannelML.py	/^from xml.etree import cElementTree as ET$/;"	i
ET	parser/MorphML.py	/^from xml.etree import cElementTree as ET$/;"	i
ET	parser/NetworkML.py	/^from xml.etree import cElementTree as ET$/;"	i
ET	parser/NeuroML.py	/^from xml.etree import cElementTree as ET$/;"	i
ET	parser/utils.py	/^from xml.etree import cElementTree as ET$/;"	i
ElementTree	parser/importer.py	/^                        debug.prefix("FATAL", "Failed to import ElementTree")$/;"	i
HEADER	debug/debug.py	/^HEADER = '\\033[95m'$/;"	v
INFO	debug/debug.py	/^INFO = OKBLUE$/;"	v
MorphML	parser/MorphML.py	/^class MorphML():$/;"	c
MorphML	parser/NetworkML.py	/^import MorphML$/;"	i
MorphML	parser/NeuroML.py	/^import MorphML$/;"	i
Mumble	core/mumbl.py	/^class Mumble():$/;"	c
NDIVS	parser/utils.py	/^NDIVS = 200 # number$/;"	v
NetworkML	parser/NetworkML.py	/^class NetworkML:$/;"	c
NetworkML	parser/NeuroML.py	/^import NetworkML$/;"	i
NeuroML	main.py	/^import parser.NeuroML as NeuroML$/;"	i
NeuroML	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^from moose.neuroml.NeuroML import NeuroML$/;"	i
NeuroML	models/neuroml/v1.8/GranuleCell/Granule98.py	/^from moose.neuroml.NeuroML import NeuroML$/;"	i
NeuroML	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^from moose.neuroml.NeuroML import NeuroML$/;"	i
NeuroML	parser/NeuroML.py	/^class NeuroML(ChannelML.ChannelML, NetworkML.NetworkML, MorphML.MorphML):$/;"	c
OKBLUE	debug/debug.py	/^OKBLUE = '\\033[94m'$/;"	v
OKGREEN	debug/debug.py	/^OKGREEN = '\\033[92m'$/;"	v
PID	multi_bhalla/lm2.py	/^PID = os.getpid()$/;"	v
PID	multi_bhalla/loadMulti.py	/^PID = os.getpid()$/;"	v
PLOTDT	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^PLOTDT = 25e-6 # s$/;"	v
RED	debug/debug.py	/^RED = ERR$/;"	v
RUNTIME	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^RUNTIME = 2.0 # s$/;"	v
SIMDT	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^SIMDT = 25e-6 # s$/;"	v
SOMA_A	multi_bhalla/proto18.py	/^SOMA_A = 3.320e-9       #\/\/ soma area in square meters$/;"	v
Simulator	core/simulator.py	/^class Simulator:$/;"	c
TODO	debug/debug.py	/^TODO = OKGREEN$/;"	v
VMAX	parser/utils.py	/^VMAX = 0.1 # Volts$/;"	v
VMIN	parser/utils.py	/^VMIN = -0.1 # Volts$/;"	v
WARN	debug/debug.py	/^WARN = WARNING$/;"	v
WARNING	debug/debug.py	/^WARNING = '\\033[90m'$/;"	v
ZeroCKelvin	parser/utils.py	/^ZeroCKelvin = 273.15 # zero dec C in Kelvin$/;"	v
__author__	core/dynamic_vars.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	core/mumbl.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	core/simulator.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	core/types.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	debug/bugs.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	debug/db.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	helper/graph_methods.py	/^__author__  = "Dilawar Singh <dilawars@ncbs.res.in>"$/;"	v
__author__	helper/moose_methods.py	/^__author__           = "Dilawar Singh"$/;"	v
__author__	helper/xml_methods.py	/^__author__  = "Dilawar Singh <dilawars@ncbs.res.in>"$/;"	v
__author__	parser/importer.py	/^__author__  = "Dilawar Singh <dilawars@ncbs.res.in>"$/;"	v
__author__	test/adaptor.py	/^__author__           = "Dilawar Singh"$/;"	v
__copyright__	core/dynamic_vars.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__copyright__	core/mumbl.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__copyright__	core/simulator.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__copyright__	core/types.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__copyright__	debug/bugs.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__copyright__	debug/db.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__copyright__	helper/moose_methods.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__copyright__	test/adaptor.py	/^__copyright__        = "Copyright 2013, NCBS Bangalore"$/;"	v
__credits__	core/dynamic_vars.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	core/mumbl.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	core/simulator.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	core/types.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	debug/bugs.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	debug/db.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	helper/moose_methods.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__credits__	parser/importer.py	/^__credits__ = "NCBS"$/;"	v
__credits__	test/adaptor.py	/^__credits__          = ["NCBS Bangalore", "Bhalla Lab"]$/;"	v
__date__	parser/importer.py	/^__date__    = "Mon 21 Oct 2013 11:37:01 PM IST"$/;"	v
__email__	core/dynamic_vars.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__email__	core/mumbl.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__email__	core/simulator.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__email__	core/types.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__email__	debug/bugs.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__email__	debug/db.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__email__	helper/moose_methods.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__email__	test/adaptor.py	/^__email__            = "dilawars@iitb.ac.in"$/;"	v
__init__	core/dynamic_vars.py	/^    def __init__(self):$/;"	m	class:DynamicObject
__init__	core/dynamic_vars.py	/^    def __init__(self, name):$/;"	m	class:DynamicObject
__init__	core/mumbl.py	/^    def __init__(self, mumbl):$/;"	m	class:Mumble
__init__	core/simulator.py	/^    def __init__(self, arg):$/;"	m	class:Simulator
__init__	core/types.py	/^    def __init__(self):$/;"	m	class:DoubleDict
__init__	debug/db.py	/^    def __init__(self, path):$/;"	m	class:DebugDB
__init__	parser/ChannelML.py	/^    def __init__(self, nml_params):$/;"	m	class:ChannelML
__init__	parser/MorphML.py	/^    def __init__(self,nml_params):$/;"	m	class:MorphML
__init__	parser/NetworkML.py	/^    def __init__(self, nml_params):$/;"	m	class:NetworkML
__init__	parser/NeuroML.py	/^    def __init__(self):$/;"	m	class:NeuroML
__license__	core/dynamic_vars.py	/^__license__          = "GPL"$/;"	v
__license__	core/mumbl.py	/^__license__          = "GPL"$/;"	v
__license__	core/simulator.py	/^__license__          = "GPL"$/;"	v
__license__	core/types.py	/^__license__          = "GPL"$/;"	v
__license__	debug/bugs.py	/^__license__          = "GPL"$/;"	v
__license__	debug/db.py	/^__license__          = "GPL"$/;"	v
__license__	helper/moose_methods.py	/^__license__          = "GPL"$/;"	v
__license__	test/adaptor.py	/^__license__          = "GPL"$/;"	v
__maintainer__	core/dynamic_vars.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__maintainer__	core/mumbl.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__maintainer__	core/simulator.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__maintainer__	core/types.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__maintainer__	debug/bugs.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__maintainer__	debug/db.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__maintainer__	helper/moose_methods.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__maintainer__	test/adaptor.py	/^__maintainer__       = "Dilawar Singh"$/;"	v
__status__	core/dynamic_vars.py	/^__status__           = "Development"$/;"	v
__status__	core/mumbl.py	/^__status__           = "Development"$/;"	v
__status__	core/simulator.py	/^__status__           = "Development"$/;"	v
__status__	core/types.py	/^__status__           = "Development"$/;"	v
__status__	debug/bugs.py	/^__status__           = "Development"$/;"	v
__status__	debug/db.py	/^__status__           = "Development"$/;"	v
__status__	helper/moose_methods.py	/^__status__           = "Development"$/;"	v
__status__	test/adaptor.py	/^__status__           = "Development"$/;"	v
__str__	core/types.py	/^    def __str__(self):$/;"	m	class:DoubleDict	file:
__version__	core/dynamic_vars.py	/^__version__          = "1.0.0"$/;"	v
__version__	core/mumbl.py	/^__version__          = "1.0.0"$/;"	v
__version__	core/simulator.py	/^__version__          = "1.0.0"$/;"	v
__version__	core/types.py	/^__version__          = "1.0.0"$/;"	v
__version__	debug/bugs.py	/^__version__          = "1.0.0"$/;"	v
__version__	debug/db.py	/^__version__          = "1.0.0"$/;"	v
__version__	helper/moose_methods.py	/^__version__          = "1.0.0"$/;"	v
__version__	parser/importer.py	/^__version__ = "1.0"$/;"	v
__version__	test/adaptor.py	/^__version__          = "1.0.0"$/;"	v
a	core/types.py	/^    a = DoubleDict()$/;"	v
addBiophysics	parser/MorphML.py	/^    def addBiophysics(self, cell, cellName):$/;"	m	class:MorphML
addCompartment	core/mumbl.py	/^    def addCompartment(self, compsAttribs, xmlElem, chemType):$/;"	m	class:Mumble
addConnection	parser/NetworkML.py	/^    def addConnection(self, connection, projection, options):$/;"	m	class:NetworkML
addConnectivity	parser/MorphML.py	/^    def addConnectivity(self, cell, cellName, connectivity):$/;"	m	class:MorphML
addInitMembPotential	parser/MorphML.py	/^    def addInitMembPotential(self, init_memb_potential, cell, cellName):$/;"	m	class:MorphML
addMechanism	parser/MorphML.py	/^    def addMechanism(self, mechanism, cell, cellName):$/;"	m	class:MorphML
addParameterToCompartment	parser/MorphML.py	/^    def addParameterToCompartment(self, parameter, cell, options):$/;"	m	class:MorphML
addPlot	core/simulator.py	/^    def addPlot(self, varsToPlot):$/;"	m	class:Simulator
addPlot	multi_bhalla/diffusionOnly.py	/^def addPlot( objpath, field, plot ):$/;"	f
addPlot	multi_bhalla/lm2.py	/^def addPlot( objpath, field, plot ):$/;"	f
addPlot	multi_bhalla/loadMulti.py	/^def addPlot( objpath, field, plot ):$/;"	f
addPlot	multi_bhalla/minimal.py	/^def addPlot( objpath, field, plot ):$/;"	f
addPlot	multi_bhalla/x_compt.py	/^def addPlot( objpath, field, plot ):$/;"	f
addSegment	parser/MorphML.py	/^    def addSegment(self, cellName, segnum, segment):$/;"	m	class:MorphML
addSpecAxialResistance	parser/MorphML.py	/^    def addSpecAxialResistance(self, spec_axial_resistance, cell, cellName):$/;"	m	class:MorphML
addSpecCapacitance	parser/MorphML.py	/^    def addSpecCapacitance(self, spec_capacitance, cell, cellName):$/;"	m	class:MorphML
argParser	main.py	/^argParser = argparse.ArgumentParser(description= 'Mutiscale modelling of neurons')$/;"	v
argparse	main.py	/^import argparse$/;"	i
args	main.py	/^args = argParser.parse_args()$/;"	v
attachInputToMoose	parser/NetworkML.py	/^    def attachInputToMoose(self, inElemXml, factors):$/;"	m	class:NetworkML
attachToNodesInGroup	helper/graph_methods.py	/^def attachToNodesInGroup(cellG, groups, pName, pValue):$/;"	f
b	core/types.py	/^    b = ['Ka', 'Ca', 'Na', 'Ca', 'Fe']$/;"	v
bio_ns	parser/utils.py	/^bio_ns='http:\/\/morphml.org\/biophysics\/schema'$/;"	v
bugs	parser/NetworkML.py	/^import debug.bugs as bugs$/;"	i
capool	multi_bhalla/runcell18.py	/^capool = moose.element( '\/cell\/soma\/Ca_conc' )$/;"	v
catab	multi_bhalla/runcell18.py	/^catab = moose.Table( '\/graphs\/ca' )$/;"	v
cellId	multi_bhalla/runcell18.py	/^cellId = moose.loadModel( 'ca1_asym.p', '\/cell', "hsolve" )$/;"	v
cellPath	core/config.py	/^cellPath = nmlCellPath$/;"	v
cells_path	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^cells_path = '\/cells' # neuromlR.readNeuroMLFromFile creates cells in '\/cells'$/;"	v
channelToMoose	parser/NeuroML.py	/^    def channelToMoose(self, cmlR, channels):$/;"	m	class:NeuroML
checkIfRefractoryPeriodIsViolated	core/stimulus.py	/^    def checkIfRefractoryPeriodIsViolated(simArray):$/;"	f	function:generateSpikeTrainPoission
cl	debug/debug.py	/^def cl(msg, label="INFO"):$/;"	f
cml_ns	parser/utils.py	/^cml_ns='http:\/\/morphml.org\/channelml\/schema'$/;"	v
collections	parser/parser.py	/^import collections$/;"	i
colored	debug/debug.py	/^def colored(msg, label="INFO") :$/;"	f
commit	debug/db.py	/^    def commit(self):$/;"	m	class:DebugDB
config	core/mumbl.py	/^import core.config as config$/;"	i
config	core/simulator.py	/^import core.config as config$/;"	i
config	parser/ChannelML.py	/^import core.config as config$/;"	i
config	parser/MorphML.py	/^import core.config as config$/;"	i
config	parser/NetworkML.py	/^import core.config as config$/;"	i
config	parser/NeuroML.py	/^import core.config as config$/;"	i
configure2DPlot	core/simulator.py	/^    def configure2DPlot(self, plotXml):$/;"	m	class:Simulator
configurePlot	core/simulator.py	/^    def configurePlot(self, plotXml):$/;"	m	class:Simulator
connect	parser/NetworkML.py	/^    def connect(self, syn_name, pre_path, post_path, weight, threshold, delay):$/;"	m	class:NetworkML
connectWrapper	parser/NetworkML.py	/^    def connectWrapper(self$/;"	m	class:NetworkML
console	debug/logger.py	/^console = logging.StreamHandler()$/;"	v
core	core/mumbl.py	/^import core.config as config$/;"	i
core	core/mumbl.py	/^import core.types as types$/;"	i
core	core/simulator.py	/^import core.config as config$/;"	i
core	main.py	/^import core.mumbl as mumbl$/;"	i
core	main.py	/^import core.simulator as moose_config$/;"	i
core	parser/ChannelML.py	/^import core.config as config$/;"	i
core	parser/MorphML.py	/^import core.config as config$/;"	i
core	parser/NetworkML.py	/^import core.config as config$/;"	i
core	parser/NetworkML.py	/^import core.stimulus as stimulus$/;"	i
core	parser/NeuroML.py	/^import core.config as config$/;"	i
cos	parser/NetworkML.py	/^from math import cos, sin$/;"	i
countSpikes	core/stimulus.py	/^def countSpikes(spikeArray):$/;"	f
createInputs	parser/NetworkML.py	/^    def createInputs(self):$/;"	m	class:NetworkML
createMoosePathForModel	core/mumbl.py	/^    def createMoosePathForModel(self, modelNo, modelType, species=None):$/;"	m	class:Mumble
createPopulations	parser/NetworkML.py	/^    def createPopulations(self):$/;"	m	class:NetworkML
createProjections	parser/NetworkML.py	/^    def createProjections(self):$/;"	m	class:NetworkML
currentvec	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^currentvec = arange(0.0, injectmax, injectmax\/50.0)$/;"	v
datetime	core/config.py	/^import datetime$/;"	i
datetime	debug/logger.py	/^import datetime$/;"	i
debug	core/mumbl.py	/^import debug.debug as debug$/;"	i
debug	core/mumbl.py	/^import debug.logger as logger$/;"	i
debug	core/simulator.py	/^import debug.debug as debug$/;"	i
debug	main.py	/^import debug.debug as debug$/;"	i
debug	parser/ChannelML.py	/^import debug.debug as debug$/;"	i
debug	parser/MorphML.py	/^import debug.debug as debug$/;"	i
debug	parser/NetworkML.py	/^import debug.bugs as bugs$/;"	i
debug	parser/NetworkML.py	/^import debug.debug as debug$/;"	i
debug	parser/NeuroML.py	/^import debug.debug as debug$/;"	i
debug	parser/importer.py	/^import debug $/;"	i
debug	parser/parser.py	/^import debug.debug as debug$/;"	i
do_nothing	multi_bhalla/lm2.py	/^def do_nothing( *args ):$/;"	f
do_nothing	multi_bhalla/loadMulti.py	/^def do_nothing( *args ):$/;"	f
dt	multi_bhalla/runcell18.py	/^dt = 50e-6$/;"	v
dumpFieldName	helper/moose_methods.py	/^def dumpFieldName(path, whichInfo='valueF'):$/;"	f
dumpMoosePaths	helper/moose_methods.py	/^def dumpMoosePaths(pat, isRoot=True):$/;"	f
dumpPlots	multi_bhalla/diffusionOnly.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/lm2.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/loadMulti.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/minimal.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/runcell18.py	/^def dumpPlots( fname ):$/;"	f
dumpPlots	multi_bhalla/x_compt.py	/^def dumpPlots( fname ):$/;"	f
dv	parser/utils.py	/^dv = ( VMAX - VMIN ) \/ NDIVS # Volts$/;"	v
elecPath	core/config.py	/^elecPath = os.path.join(nmlPath, 'electrical')$/;"	v
elemExists	helper/xml_methods.py	/^def elemExists(rootElem, nmExpr, path) :$/;"	f
elementtree	parser/importer.py	/^                    import elementtree.ElementTree as etree$/;"	i
embed	main.py	/^from IPython import embed$/;"	i
embed	test/test1.py	/^from IPython import embed$/;"	i
etree	main.py	/^from lxml import etree$/;"	i
etree	parser/importer.py	/^                      import lxml.etree as etree$/;"	i
etree	parser/importer.py	/^                    import elementtree.ElementTree as etree$/;"	i
etree	parser/importer.py	/^              import cElementTree as etree$/;"	i
etree	parser/importer.py	/^            import xml.etree.cElementTree as etree$/;"	i
etree	parser/importer.py	/^        import xml.etree.cElementTree as etree$/;"	i
etree	parser/importer.py	/^    import cElementTree as etree$/;"	i
etree	parser/parser.py	/^from lxml import etree$/;"	i
etreeDict	main.py	/^        etreeDict = parser.parseXMLs(args, validate=False)$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98.py	/^        filename = "GranuleCell.net.xml"$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98.py	/^        filename = sys.argv[1]$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98.py	/^filename = "GranuleCell.net.xml"$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^        filename = "GranuleCell.net.xml"$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^        filename = sys.argv[1]$/;"	v
filename	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^filename = "GranuleCell.net.xml"$/;"	v
find_first_file	parser/utils.py	/^def find_first_file(name, path):$/;"	f
fixRefractoryViolation	core/stimulus.py	/^    def fixRefractoryViolation(simArray):$/;"	f	function:generateSpikeTrainPoission
fn	parser/ChannelML.py	/^            def fn(self,v):$/;"	f	function:ChannelML.make_function
fn	parser/ChannelML.py	/^            def fn(self,v,ca=None):$/;"	f	function:ChannelML.make_function
formatter	debug/logger.py	/^formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')$/;"	v
freqList	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^freqList = []$/;"	v
generateSpikeTrainPoission	core/stimulus.py	/^def generateSpikeTrainPoission(frequency, dt=1e-3, simTime=100e-3$/;"	f
generate_poisson_times	core/stimulus.py	/^def generate_poisson_times(rate=20, simtime=100, seed=1):$/;"	f
get	core/types.py	/^    def get(self, key, dictId=-1, default=None):$/;"	m	class:DoubleDict
get0	core/types.py	/^    def get0(self, key, default=None):$/;"	m	class:DoubleDict
get1	core/types.py	/^    def get1(self, key, default=None):$/;"	m	class:DoubleDict
getCompName	helper/moose_methods.py	/^def getCompName(compExpr):$/;"	f
getCompartmentId	helper/moose_methods.py	/^def getCompartmentId(compExpr):$/;"	f
getElement	helper/xml_methods.py	/^def getElement(rootElem, nmlExpr, path) :$/;"	f
getPlotData	core/simulator.py	/^    def getPlotData(self, varName):$/;"	m	class:Simulator
getTagName	helper/xml_methods.py	/^def getTagName(nmTag) :$/;"	f
granCell	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^granCell = moose.Neuron(granCellid)$/;"	v
granCellSoma	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^granCellSoma = moose.Compartment(granCell.path+'\/Soma_0')$/;"	v
granCellSpikesTable	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^granCellSpikesTable = moose.Table(table_path+'\/spikesTable')$/;"	v
granCellid	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^granCellid = moose.copy(libcell,moose.Neutral('\/cells'),'granCell')$/;"	v
graphs	multi_bhalla/runcell18.py	/^graphs = moose.Neutral( '\/graphs' )$/;"	v
helper	core/mumbl.py	/^import helper.moose_methods as moose_methods$/;"	i
helper	parser/MorphML.py	/^import helper.moose_methods as moose_methods$/;"	i
helper	parser/NetworkML.py	/^import helper.moose_methods as moose_methods$/;"	i
helper	parser/NetworkML.py	/^import helper.xml_methods as xml_methods$/;"	i
hsolve	multi_bhalla/runcell18.py	/^hsolve = moose.HSolve( '\/cell\/hsolve' )$/;"	v
ifPathsAreValid	main.py	/^def ifPathsAreValid(paths) :$/;"	f
ifPathsAreValid	parser/importer.py	/^def ifPathsAreValid(paths) :$/;"	f
inTarget	core/mumbl.py	/^    def inTarget(self, src, moosePath):$/;"	m	class:Mumble
indent	parser/utils.py	/^def indent(elem, level=0):$/;"	f
initDB	debug/db.py	/^    def initDB(self):$/;"	m	class:DebugDB
initPaths	core/mumbl.py	/^    def initPaths(self, paths, recursively=True):$/;"	m	class:Mumble
injectmax	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^injectmax = 20e-12 # Amperes$/;"	v
insert	core/types.py	/^    def insert(self, key, value):$/;"	m	class:DoubleDict
insertPath	debug/db.py	/^    def insertPath(self, path, type='', comment='No comment'):$/;"	m	class:DebugDB
insertPaths	debug/db.py	/^    def insertPaths(self, paths):$/;"	m	class:DebugDB
insertUniqueVal	core/types.py	/^    def insertUniqueVal(self, key):$/;"	m	class:DoubleDict
inspect	core/mumbl.py	/^import inspect$/;"	i
inspect	core/simulator.py	/^import inspect$/;"	i
inspect	debug/debug.py	/^import inspect$/;"	i
inspect	main.py	/^import inspect$/;"	i
inspect	parser/ChannelML.py	/^import inspect$/;"	i
inspect	parser/MorphML.py	/^import inspect$/;"	i
inspect	parser/NetworkML.py	/^import inspect$/;"	i
inspect	parser/parser.py	/^import inspect$/;"	i
integateAndFireMechanism	parser/MorphML.py	/^    def integateAndFireMechanism(self, mechanism):$/;"	m	class:MorphML
isTaggedWith	helper/xml_methods.py	/^def isTaggedWith(nmElem, tag) :$/;"	f
keepOnlyInclude	parser/utils.py	/^def keepOnlyInclude(network, onlyInclude):$/;"	f
libcell	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^libcell = moose.Neuron('\/library\/Granule_98')$/;"	v
library	multi_bhalla/runcell18.py	/^library = moose.Neutral( '\/library' )$/;"	v
libraryPath	core/config.py	/^libraryPath = os.path.join(nmlPath, 'cells')$/;"	v
load	core/mumbl.py	/^    def load(self):$/;"	m	class:Mumble
loadChem	multi_bhalla/diffusionOnly.py	/^def loadChem( neuroCompt, spineCompt, psdCompt ):$/;"	f
loadChem	multi_bhalla/lm2.py	/^def loadChem( chemFile, diffLength ):$/;"	f
loadChem	multi_bhalla/loadMulti.py	/^def loadChem( neuroCompt, spineCompt, psdCompt ):$/;"	f
loadChem	multi_bhalla/minimal.py	/^def loadChem( neuroCompt, spineCompt, psdCompt ):$/;"	f
loadChem	multi_bhalla/x_compt.py	/^def loadChem( neuroCompt, spineCompt, psdCompt ):$/;"	f
loadChemicalModel	core/mumbl.py	/^    def loadChemicalModel(self, modelXml):$/;"	m	class:Mumble
loadElec	multi_bhalla/diffusionOnly.py	/^def loadElec():$/;"	f
loadElec	multi_bhalla/lm2.py	/^def loadElec( elecFile ):$/;"	f
loadElec	multi_bhalla/loadMulti.py	/^def loadElec():$/;"	f
loadElec	multi_bhalla/minimal.py	/^def loadElec():$/;"	f
loadElec	multi_bhalla/x_compt.py	/^def loadElec():$/;"	f
loadElectricalModel	core/mumbl.py	/^    def loadElectricalModel(self, modelXml):$/;"	m	class:Mumble
loadGran98NeuroML_L123	models/neuroml/v1.8/GranuleCell/Granule98.py	/^def loadGran98NeuroML_L123(filename):$/;"	f
loadGran98NeuroML_L123	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^def loadGran98NeuroML_L123(filename):$/;"	f
loadModel	core/mumbl.py	/^    def loadModel(self, modelXml):$/;"	m	class:Mumble
loadNML	parser/NeuroML.py	/^    def loadNML(self, nml):$/;"	m	class:NeuroML
loadStimulus	multi_bhalla/lm2.py	/^def loadStimulus( freq, receptorPath, weight, delay ):$/;"	f
logFile	core/config.py	/^logFile = 'logs\/moose.log'$/;"	v
logFile	debug/logger.py	/^logFile = 'logs\/moose.log'$/;"	v
logPathsToFille	debug/logger.py	/^def logPathsToFille(pat):$/;"	f
logger	core/mumbl.py	/^import debug.logger as logger$/;"	i
logger	parser/importer.py	/^logger = logging.getLogger('multiscale')$/;"	v
logger	parser/parser.py	/^logger = logging.getLogger('multiscale')$/;"	v
logging	core/config.py	/^import logging$/;"	i
logging	core/mumbl.py	/^import logging$/;"	i
logging	core/simulator.py	/^import logging $/;"	i
logging	core/simulator.py	/^import logging$/;"	i
logging	debug/logger.py	/^import logging$/;"	i
logging	parser/NeuroML.py	/^import logging$/;"	i
logging	parser/importer.py	/^import logging $/;"	i
logging	parser/parser.py	/^import logging$/;"	i
lxml	parser/importer.py	/^                      import lxml.etree as etree$/;"	i
main	multi_bhalla/diffusionOnly.py	/^def main():$/;"	f
main	multi_bhalla/lm2.py	/^def main():$/;"	f
main	multi_bhalla/loadMulti.py	/^def main():$/;"	f
main	multi_bhalla/minimal.py	/^def main():$/;"	f
main	multi_bhalla/x_compt.py	/^def main():$/;"	f
main	test/adaptor.py	/^def main():$/;"	f
makeChemPlots	multi_bhalla/diffusionOnly.py	/^def makeChemPlots():$/;"	f
makeChemPlots	multi_bhalla/lm2.py	/^def makeChemPlots( compts, index ):$/;"	f
makeChemPlots	multi_bhalla/loadMulti.py	/^def makeChemPlots():$/;"	f
makeChemPlots	multi_bhalla/minimal.py	/^def makeChemPlots():$/;"	f
makeChemPlots	multi_bhalla/x_compt.py	/^def makeChemPlots():$/;"	f
makeChemSolver	multi_bhalla/lm2.py	/^def makeChemSolver( compartmentPath ):$/;"	f
makeElecPlots	multi_bhalla/diffusionOnly.py	/^def makeElecPlots():$/;"	f
makeElecPlots	multi_bhalla/lm2.py	/^def makeElecPlots( compts ):$/;"	f
makeElecPlots	multi_bhalla/loadMulti.py	/^def makeElecPlots():$/;"	f
makeElecPlots	multi_bhalla/minimal.py	/^def makeElecPlots():$/;"	f
makeElecPlots	multi_bhalla/x_compt.py	/^def makeElecPlots():$/;"	f
makeModel	test/adaptor.py	/^def makeModel():$/;"	f
makeNeuroMeshModel	multi_bhalla/diffusionOnly.py	/^def makeNeuroMeshModel():$/;"	f
makeNeuroMeshModel	multi_bhalla/lm2.py	/^def makeNeuroMeshModel( elecFile, chemFile, cellPortion, chemCa ):$/;"	f
makeNeuroMeshModel	multi_bhalla/loadMulti.py	/^def makeNeuroMeshModel():$/;"	f
makeNeuroMeshModel	multi_bhalla/minimal.py	/^def makeNeuroMeshModel():$/;"	f
makeNeuroMeshModel	multi_bhalla/x_compt.py	/^def makeNeuroMeshModel():$/;"	f
make_Ca	multi_bhalla/proto18.py	/^def make_Ca():$/;"	f
make_Ca_NMDA	multi_bhalla/proto18.py	/^def make_Ca_NMDA():$/;"	f
make_Ca_conc	multi_bhalla/proto18.py	/^def make_Ca_conc():$/;"	f
make_K_A	multi_bhalla/proto18.py	/^def make_K_A():$/;"	f
make_K_AHP	multi_bhalla/proto18.py	/^def make_K_AHP():$/;"	f
make_K_C	multi_bhalla/proto18.py	/^def make_K_C():$/;"	f
make_K_DR	multi_bhalla/proto18.py	/^def make_K_DR():$/;"	f
make_NMDA	multi_bhalla/proto18.py	/^def make_NMDA():$/;"	f
make_NMDA_Ca_conc	multi_bhalla/proto18.py	/^def make_NMDA_Ca_conc():$/;"	f
make_Na	multi_bhalla/proto18.py	/^def make_Na():$/;"	f
make_axon	multi_bhalla/proto18.py	/^def make_axon():$/;"	f
make_cml_function	parser/ChannelML.py	/^    def make_cml_function(self, element, fn_name, concdep=None):$/;"	m	class:ChannelML
make_function	parser/ChannelML.py	/^    def make_function(self, fn_name, fn_type, **kwargs):$/;"	m	class:ChannelML
make_glu	multi_bhalla/proto18.py	/^def make_glu():$/;"	f
make_new_synapse	parser/NetworkML.py	/^    def make_new_synapse(self, syn_name, postcomp, syn_name_full):$/;"	m	class:NetworkML
mapDomainOntoDomain	core/mumbl.py	/^    def mapDomainOntoDomain(self, domain):$/;"	m	class:Mumble
mapSimulationElement	core/simulator.py	/^    def mapSimulationElement(self, xmlElem):$/;"	m	class:Simulator
mapping	core/mumbl.py	/^    def mapping(self, adaptor, moosePath):$/;"	m	class:Mumble
math	multi_bhalla/diffusionOnly.py	/^import math$/;"	i
math	multi_bhalla/lm2.py	/^import math$/;"	i
math	multi_bhalla/loadMulti.py	/^import math$/;"	i
math	multi_bhalla/minimal.py	/^import math$/;"	i
math	multi_bhalla/proto18.py	/^import math$/;"	i
math	multi_bhalla/x_compt.py	/^import math$/;"	i
math	parser/ChannelML.py	/^import math$/;"	i
math	parser/MorphML.py	/^import math$/;"	i
matplotlib	test/adaptor.py	/^import matplotlib.pyplot as plt$/;"	i
meta_ns	parser/utils.py	/^meta_ns='http:\/\/morphml.org\/metadata\/schema'$/;"	v
mml_ns	parser/utils.py	/^mml_ns='http:\/\/morphml.org\/morphml\/schema'$/;"	v
mnu	parser/NeuroML.py	/^import moose.neuroml.utils as mnu$/;"	i
moose	core/config.py	/^import moose$/;"	i
moose	core/mumbl.py	/^import moose$/;"	i
moose	core/simulator.py	/^import moose $/;"	i
moose	core/stimulus.py	/^    import moose$/;"	i
moose	debug/logger.py	/^import moose$/;"	i
moose	helper/moose_methods.py	/^import moose$/;"	i
moose	main.py	/^import moose$/;"	i
moose	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^import moose$/;"	i
moose	models/neuroml/v1.8/GranuleCell/Granule98.py	/^import moose$/;"	i
moose	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^import moose$/;"	i
moose	multi_bhalla/diffusionOnly.py	/^import moose$/;"	i
moose	multi_bhalla/lm2.py	/^import moose$/;"	i
moose	multi_bhalla/loadMulti.py	/^import moose$/;"	i
moose	multi_bhalla/minimal.py	/^import moose$/;"	i
moose	multi_bhalla/proto18.py	/^import moose$/;"	i
moose	multi_bhalla/runcell18.py	/^import moose$/;"	i
moose	multi_bhalla/x_compt.py	/^import moose$/;"	i
moose	parser/ChannelML.py	/^import moose$/;"	i
moose	parser/MorphML.py	/^import moose$/;"	i
moose	parser/NetworkML.py	/^import moose$/;"	i
moose	parser/NetworkML.py	/^import moose.neuroml.utils as nmu$/;"	i
moose	parser/NetworkML.py	/^import moose.utils as mu$/;"	i
moose	parser/NeuroML.py	/^import moose$/;"	i
moose	parser/NeuroML.py	/^import moose.neuroml.utils as mnu$/;"	i
moose	parser/NeuroML.py	/^import moose.utils$/;"	i
moose	parser/utils.py	/^import moose$/;"	i
moose	test/adaptor.py	/^import moose$/;"	i
moose	test/test1.py	/^import moose$/;"	i
mooseLogger	core/config.py	/^mooseLogger = logging.getLogger()$/;"	v
moosePath	helper/moose_methods.py	/^def moosePath(baseName, append):$/;"	f
moose_config	main.py	/^import core.simulator as moose_config$/;"	i
moose_methods	core/mumbl.py	/^import helper.moose_methods as moose_methods$/;"	i
moose_methods	parser/MorphML.py	/^import helper.moose_methods as moose_methods$/;"	i
moose_methods	parser/NetworkML.py	/^import helper.moose_methods as moose_methods$/;"	i
moose_utils	parser/MorphML.py	/^from moose import utils as moose_utils$/;"	i
moveCompt	multi_bhalla/diffusionOnly.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
moveCompt	multi_bhalla/lm2.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
moveCompt	multi_bhalla/loadMulti.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
moveCompt	multi_bhalla/minimal.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
moveCompt	multi_bhalla/x_compt.py	/^def moveCompt( path, oldParent, newParent ):$/;"	f
mu	parser/NetworkML.py	/^import moose.utils as mu$/;"	i
mumbl	main.py	/^import core.mumbl as mumbl$/;"	i
mumblObj	main.py	/^        mumblObj = mumbl.Mumble(etreeDict['mumbl'][0])$/;"	v
mumblePath	core/config.py	/^mumblePath = '\/mumbl'$/;"	v
nameSep	helper/moose_methods.py	/^nameSep = '()'$/;"	v
neuroml	parser/NetworkML.py	/^import moose.neuroml.utils as nmu$/;"	i
neuroml	parser/NeuroML.py	/^import moose.neuroml.utils as mnu$/;"	i
neuromlR	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^neuromlR = NeuroML()$/;"	v
neuroml_debug	parser/utils.py	/^neuroml_debug = False$/;"	v
neuroml_ns	parser/utils.py	/^neuroml_ns='http:\/\/morphml.org\/neuroml\/schema'$/;"	v
neuroml_utils	parser/MorphML.py	/^from moose.neuroml import utils as neuroml_utils$/;"	i
nml	main.py	/^        nml = etreeDict['nml'][0]$/;"	v
nmlCellPath	core/config.py	/^nmlCellPath = os.path.join(nmlPath, 'cells')$/;"	v
nmlObj	main.py	/^        nmlObj = NeuroML.NeuroML()$/;"	v
nmlPath	core/config.py	/^nmlPath = '\/neuroml'$/;"	v
nml_ns	parser/utils.py	/^nml_ns='http:\/\/morphml.org\/networkml\/schema'$/;"	v
nmu	parser/NetworkML.py	/^import moose.neuroml.utils as nmu$/;"	i
np	core/simulator.py	/^import numpy as np$/;"	i
np	core/stimulus.py	/^import numpy as np$/;"	i
numpy	core/simulator.py	/^import numpy$/;"	i
numpy	multi_bhalla/proto18.py	/^import numpy$/;"	i
os	core/config.py	/^import os$/;"	i
os	core/mumbl.py	/^import os$/;"	i
os	core/simulator.py	/^import os$/;"	i
os	core/stimulus.py	/^    import os$/;"	i
os	debug/logger.py	/^import os$/;"	i
os	helper/moose_methods.py	/^import os$/;"	i
os	main.py	/^import os$/;"	i
os	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^import os$/;"	i
os	models/neuroml/v1.8/GranuleCell/Granule98.py	/^import os$/;"	i
os	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^import os$/;"	i
os	multi_bhalla/diffusionOnly.py	/^import os$/;"	i
os	multi_bhalla/lm2.py	/^import os$/;"	i
os	multi_bhalla/loadMulti.py	/^import os$/;"	i
os	multi_bhalla/minimal.py	/^import os$/;"	i
os	multi_bhalla/runcell18.py	/^import os$/;"	i
os	multi_bhalla/x_compt.py	/^import os$/;"	i
os	parser/ChannelML.py	/^import os, sys$/;"	i
os	parser/NetworkML.py	/^import os$/;"	i
os	parser/importer.py	/^import os $/;"	i
os	parser/parser.py	/^import os$/;"	i
os	parser/utils.py	/^import os$/;"	i
outTarget	core/mumbl.py	/^    def outTarget(self, tgt, moosePath):$/;"	m	class:Mumble
parseAndValidateWithSchema	parser/parser.py	/^def parseAndValidateWithSchema(modelName, modelPath) :$/;"	f
parseWithoutValidation	parser/parser.py	/^def parseWithoutValidation(modelName, modelPath) :$/;"	f
parseXMLs	parser/parser.py	/^def parseXMLs(commandLineArgs, validate=False) :$/;"	f
parser	main.py	/^import parser.NeuroML as NeuroML$/;"	i
parser	main.py	/^import parser.parser as parser$/;"	i
path	parser/NeuroML.py	/^from os import path$/;"	i
plotAllOnOne	core/simulator.py	/^    def plotAllOnOne(self, variables):$/;"	m	class:Simulator
plotVar	core/simulator.py	/^    def plotVar(self, xvec, yvec, plotParams):$/;"	m	class:Simulator
plotdt	models/neuroml/v1.8/GranuleCell/Granule98.py	/^plotdt = 10e-6 # s$/;"	v
plotdt	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^plotdt = 10e-6 # s$/;"	v
plt	test/adaptor.py	/^import matplotlib.pyplot as plt$/;"	i
pool	test/test1.py	/^pool = moose.Pool('\/pool')$/;"	v
prefix	debug/debug.py	/^prefix = dict($/;"	v
prefixWithGet	core/mumbl.py	/^    def prefixWithGet(self, var):$/;"	m	class:Mumble
prefixWithSet	core/mumbl.py	/^    def prefixWithSet(self, var):$/;"	m	class:Mumble
printDebug	debug/debug.py	/^def printDebug(label, msg, frame=None, exception=None):$/;"	f
print_function	debug/debug.py	/^from __future__ import print_function$/;"	i
proto18	multi_bhalla/diffusionOnly.py	/^import proto18$/;"	i
proto18	multi_bhalla/lm2.py	/^import proto18$/;"	i
proto18	multi_bhalla/loadMulti.py	/^import proto18$/;"	i
proto18	multi_bhalla/minimal.py	/^import proto18$/;"	i
proto18	multi_bhalla/runcell18.py	/^import proto18$/;"	i
proto18	multi_bhalla/x_compt.py	/^import proto18$/;"	i
pruneExcludes	parser/utils.py	/^def pruneExcludes(network, excludepops, excludeprojs):$/;"	f
pylab	core/simulator.py	/^import pylab$/;"	i
pylab	core/stimulus.py	/^    import pylab$/;"	i
random	core/stimulus.py	/^import random$/;"	i
re	helper/moose_methods.py	/^import re$/;"	i
re	helper/xml_methods.py	/^import re$/;"	i
re	parser/MorphML.py	/^import re$/;"	i
readChannelML	parser/ChannelML.py	/^    def readChannelML(self, channelElement, params={}, units="SI units"):$/;"	m	class:ChannelML
readChannelMLFromFile	parser/ChannelML.py	/^    def readChannelMLFromFile(self, _filename, _params={}):$/;"	m	class:ChannelML
readIonConcML	parser/ChannelML.py	/^    def readIonConcML(self, ionConcElement, units="SI units"):$/;"	m	class:ChannelML
readMorphML	parser/MorphML.py	/^    def readMorphML(self, cell, params={}, lengthUnits="micrometer"):$/;"	m	class:MorphML
readMorphMLFromFile	parser/MorphML.py	/^    def readMorphMLFromFile(self, filename, params={}):$/;"	m	class:MorphML
readNetworkML	parser/NetworkML.py	/^    def readNetworkML(self, network, cellSegmentDict , params={}$/;"	m	class:NetworkML
readNetworkMLFromFile	parser/NetworkML.py	/^    def readNetworkMLFromFile(self, filename, cellSegmentDict, params={}):$/;"	m	class:NetworkML
readNeuroMLFromFile	parser/NeuroML.py	/^    def readNeuroMLFromFile(self, filename, params=dict()):$/;"	m	class:NeuroML
readSynapseML	parser/ChannelML.py	/^    def readSynapseML(self,synapseElement,units="SI units"):$/;"	m	class:ChannelML
replace	parser/ChannelML.py	/^    def replace(self, text, findstr, replacestr):$/;"	m	class:ChannelML
runCode	run_granule98_hsolve.sh	/^function runCode $/;"	f
runCode	run_mumbl.sh	/^function runCode $/;"	f
runtime	models/neuroml/v1.8/GranuleCell/Granule98.py	/^runtime = 0.7 # s$/;"	v
runtime	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^runtime = 0.7 # s$/;"	v
safe_dict	parser/utils.py	/^safe_dict = dict([ (k, locals().get(k, None)) for k in safe_list ])$/;"	v
safe_list	parser/utils.py	/^safe_list = ['acos', 'asin', 'atan', 'atan2', 'ceil',$/;"	v
segGrp2Color	helper/graph_methods.py	/^def segGrp2Color(grpName, grps):$/;"	f
setAdaptor	core/mumbl.py	/^    def setAdaptor(self, src, tgt, relationXml):$/;"	m	class:Mumble
setAdaptor	multi_bhalla/lm2.py	/^def setAdaptor( chemCaPath):$/;"	f
setQ10	parser/ChannelML.py	/^    def setQ10(self, q10settings):$/;"	m	class:ChannelML
set_attrib_if_not_found	parser/utils.py	/^def set_attrib_if_not_found(elem, name, value):$/;"	f
set_compartment_param	parser/MorphML.py	/^    def set_compartment_param(self, compartment, name, value, mechName):$/;"	m	class:MorphML
set_group_compartment_param	parser/MorphML.py	/^    def set_group_compartment_param(self, cell, cellName, parameter, name$/;"	m	class:MorphML
set_neuroml_namespaces_attribs	parser/utils.py	/^def set_neuroml_namespaces_attribs(neuromlroot):$/;"	f
setupRecord	core/simulator.py	/^    def setupRecord(self, recordXml, params):$/;"	m	class:Simulator
signal	multi_bhalla/lm2.py	/^import signal$/;"	i
signal	multi_bhalla/loadMulti.py	/^import signal$/;"	i
simObj	main.py	/^        simObj = moose_config.Simulator(etreeDict['config'][0])$/;"	v
simdt	core/stimulus.py	/^simdt = 1e-3$/;"	v
simdt	models/neuroml/v1.8/GranuleCell/Granule98.py	/^simdt = 1e-6 # s$/;"	v
simdt	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^simdt = 10e-6 # s$/;"	v
simtime	core/stimulus.py	/^simtime = 100$/;"	v
sin	parser/NetworkML.py	/^from math import cos, sin$/;"	i
slowET	parser/utils.py	/^from xml.etree import ElementTree as slowET$/;"	i
soma	multi_bhalla/runcell18.py	/^soma = moose.element( '\/cell\/soma' )$/;"	v
species	test/test1.py	/^species = moose.Species('\/species')$/;"	v
spikeGen	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^spikeGen = moose.SpikeGen(granCell.path+'\/spikeGen')$/;"	v
spikesList	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^        spikesList = spikesList[where(spikesList>0.0)[0]]$/;"	v
spikesList	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^    spikesList = array(granCellSpikesTable.vec)$/;"	v
spikesNow	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^        spikesNow = len(spikesList)$/;"	v
splitComparmentExpr	helper/moose_methods.py	/^def splitComparmentExpr(expr):$/;"	f
sql	debug/db.py	/^import sqlite3 as sql $/;"	i
st	core/config.py	/^st = datetime.datetime.fromtimestamp(st).strftime('%Y-%m-%d-%H%M')$/;"	v
st	core/config.py	/^st = time.time()$/;"	v
st	debug/logger.py	/^st = datetime.datetime.fromtimestamp(st).strftime('%Y-%m-%d-%H%M')$/;"	v
st	debug/logger.py	/^st = time.time()$/;"	v
stimulus	parser/NetworkML.py	/^import core.stimulus as stimulus$/;"	i
string	parser/ChannelML.py	/^import string$/;"	i
string	parser/NetworkML.py	/^import string$/;"	i
stringToFloat	helper/moose_methods.py	/^def stringToFloat(text):$/;"	f
stringToFloat	parser/MorphML.py	/^    def stringToFloat(self, tempString):$/;"	m	class:MorphML
sys	core/mumbl.py	/^import sys$/;"	i
sys	debug/debug.py	/^import sys$/;"	i
sys	helper/xml_methods.py	/^import sys$/;"	i
sys	main.py	/^import sys$/;"	i
sys	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^import sys$/;"	i
sys	models/neuroml/v1.8/GranuleCell/Granule98.py	/^import sys$/;"	i
sys	models/neuroml/v1.8/GranuleCell/Granule98_hsolve.py	/^import sys$/;"	i
sys	multi_bhalla/diffusionOnly.py	/^import sys$/;"	i
sys	multi_bhalla/lm2.py	/^import sys$/;"	i
sys	multi_bhalla/loadMulti.py	/^import sys$/;"	i
sys	multi_bhalla/minimal.py	/^import sys$/;"	i
sys	multi_bhalla/x_compt.py	/^import sys$/;"	i
sys	parser/ChannelML.py	/^import os, sys$/;"	i
sys	parser/MorphML.py	/^import sys$/;"	i
sys	parser/NetworkML.py	/^import sys$/;"	i
sys	parser/NeuroML.py	/^import sys$/;"	i
sys	parser/importer.py	/^import sys $/;"	i
sys	parser/parser.py	/^import sys$/;"	i
tab	multi_bhalla/runcell18.py	/^tab = moose.Table( '\/graphs\/soma' )$/;"	v
table_path	models/neuroml/v1.8/GranuleCell/FvsI_Granule98.py	/^table_path = moose.Neutral(granCell.path+'\/data').path$/;"	v
testNeuroMeshMultiscale	multi_bhalla/diffusionOnly.py	/^def testNeuroMeshMultiscale():$/;"	f
testNeuroMeshMultiscale	multi_bhalla/lm2.py	/^def testNeuroMeshMultiscale():$/;"	f
testNeuroMeshMultiscale	multi_bhalla/loadMulti.py	/^def testNeuroMeshMultiscale():$/;"	f
testNeuroMeshMultiscale	multi_bhalla/minimal.py	/^def testNeuroMeshMultiscale():$/;"	f
testNeuroMeshMultiscale	multi_bhalla/x_compt.py	/^def testNeuroMeshMultiscale():$/;"	f
testPythonCode	run_granule98_hsolve.sh	/^function testPythonCode $/;"	f
testPythonCode	run_mumbl.sh	/^function testPythonCode $/;"	f
time	core/config.py	/^import time$/;"	i
time	debug/logger.py	/^import time$/;"	i
timetable_demo	core/stimulus.py	/^def timetable_demo():$/;"	f
timetable_file	core/stimulus.py	/^def timetable_file(filename='timetable.txt', simtime=100):$/;"	f
timetable_nparray	core/stimulus.py	/^def timetable_nparray(simtime=100):$/;"	f
translate_rotate	parser/NetworkML.py	/^    def translate_rotate(self,obj,x,y,z,ztheta): $/;"	m	class:NetworkML
tweak_model	parser/utils.py	/^def tweak_model(root_element, params):$/;"	f
types	core/mumbl.py	/^import core.types as types$/;"	i
updateMoose	core/simulator.py	/^    def updateMoose(self, populationDict, projectionDict):$/;"	m	class:Simulator
utils	parser/ChannelML.py	/^from moose.neuroml import utils$/;"	i
utils	parser/NetworkML.py	/^import utils$/;"	i
utils	parser/NeuroML.py	/^import moose.utils$/;"	i
write_dot	helper/graph_methods.py	/^def write_dot(g, filename):$/;"	f
xml	parser/importer.py	/^            import xml.etree.cElementTree as etree$/;"	i
xml	parser/importer.py	/^        import xml.etree.cElementTree as etree$/;"	i
xml_methods	parser/NetworkML.py	/^import helper.xml_methods as xml_methods$/;"	i
xsi_ns	parser/utils.py	/^xsi_ns='http:\/\/www.w3.org\/2001\/XMLSchema-instance'$/;"	v
