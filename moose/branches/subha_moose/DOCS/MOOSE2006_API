1. Shell commands
2. Object lookup and Wildcard building
3. Object field access, including array fields.: get, set, show
4. Object create, delete, move, copy
5. Message create, delete, traversal, list
6. Message send and sendTo
7. Relays and other unorthodox messages
8. Fields vs elements.
9. Nested and array fields.
10. Ftype stuff.
11. MPP.
12. Solver stuff


==================================================================
0. Generic issues
- printing OK and prompts need to be sorted.
- Error handling needs to be sorted.
- Many commands don't use current working element properly.

==================================================================
1. Shell.
The whole structure of the Shell needs to be rethought. It was originally meant as a generic class for SWIG to talk to, to
issue MOOSE commands. However, the arguments it takes are by way of strings mostly. Worse, the commands to other nodes
have been hard coded in as strings even though they need not be.
- Figure out what would work best with SWIG for providing a set of system calls
- See if the Field object can be extended to deal with wildcards, arrays, off-node fields, and so on.


#	Name								Purpose				Notes	
1.1	addFuncLocal( const string& srcIn, const string& destIn )	Adding messages. 		Calls Field::add, message to addToRemoteNode
													Parallelized, could be condensed.
													Poor error handling.
													Not wildcarded
1.2	dropFuncLocal( const string& src, const string& dest );		Removing messages		Calls Field::drop
													Not wildcarded, not parallel
1.3	setFuncLocal( const string& field, const string& value );	Assigning values		Calls Field::set
													Wildcarded, but not parallel
1.4	string getFuncLocal( const string& field );			Getting values			Calls Field::get
													Not wildcardable (?), not parallel
1.5	createFuncLocal( const string& type, const string& path );	Creating objects		Calls Cinfo::create, ShellWrapper::schedNewObject
													Does lots of path parsing explicitly. 
													Not wildcardable, is parallel
1.6	deleteFuncLocal( const string& path ); 				Deleting objects		Calls C++ delete on the element pointer
													Uses Element::findElement( path )
													Not sure if the implementation is complete for
													object trees and their messages. I think so.
													Not wildcarded, is parallel
1.7	moveFuncLocal( const string& src, const string& dest );		Reparents objects		Calls Shell::checkWorkingElement a lot
													Uses Element::descendsFrom
													Does a lot of path and field logic.
													Uses Field::drop and Field::add
1.8	copyFuncLocal( const string& src, const string& dest ); 	copies objects			Calls Element::deepCopy
													Uses Element::descendsFrom
													Uses Shell::findDest to check on putative parent elm
													Uses Field::set to assign name
													uses Element::field to get the field.
													Fails to copy messages in the duplicated tree
1.9	copyShallowFuncLocal(const string& src, const string& dest );	Copies only object, not kids	Calls Element::shallowCopy
													Uses Shell::findDest to check on putative parent elm
													Uses Field::set to assign name
1.10	copyHaloFuncLocal( const string& src, const string& dest );	Unsure: not implemented.	I think it is meant to copy the messages emanating
													from the duplicated set to the outside world.
1.11	ceFuncLocal( const string& newpath );				ce like in GENESIS		Messy: Uses a string path to keep track of working
													element. Should use a Field or an Element*
1.12	pusheFuncLocal( const string& newpath );			pushe like in GENESIS		Manipulates Shell.workingElementStack_
1.13	popeFuncLocal(  );						pope like in GENESIS		Ditto.
1.14	aliasFuncLocal(const string& origfunc, const string& newfunc)	Alias.				Calls Field::set on the parser. Really dumb.
													Also updates an alias map, not clear why.
1.16	quitFuncLocal(  );						quits				Calls barrier for parallel use, but it doesn't
													work right.
1.17	stopFuncLocal(  );						Stop.				Not implemented
1.18	resetFuncLocal(  );						reset.				Calls Field::set on the sched/cj/resetIn.
													Works in parallel.
1.19	stepFuncLocal( 
	           const string& steptime, const string& option );	Genesis::step. Incomplete	Calls Field constructor, Field::set on sched/cj/start,
													creates a ProcInfoBase but I don't see how it is used.
1.20	setClockFuncLocal( const string& clockNo,			Creates clocks and ticks	Big operation. Calls Field constructor, calls
        	const string& dt, const string& stage );						createFuncLocal, Field::good, Field::set.
													Works in parallel.
1.21	showClocksFuncLocal();						Lists clocks			Calls Field::dest to get list of clocks.
													Does ugly stuff to get differnt fields of elements
													on the dest list.
1.22	useClockFuncLocal( const string& path, const string& clockNo );	Assigns paths to clock ticks	Calls Field constructor, Field::good, Field::set.

1.23	callFuncLocal( const string& args );				Not implemented			Could do using set functions.
1.24	string getmsgFuncLocal(						getmsg like in GENESIS		partly and badly implemented.
		const string& field, const string& options );						Calls Shell::splitField, Field::src, Field::dest
1.25	int isaFuncLocal( const string& type, const string& field );	Type comparator for objs	calls Shell::splitField, but seems to be wrong
													implementation. It should compare the name of the
													type, or better use the Cinfo::isA function.
1.26	int existsFuncLocal( const string& fieldstr );			checks existence of elm/field	calls Shell::splitField
1.27	showFuncLocal( const string& field ); 				Shows field values		Calls Shell::parseNode, to work in parallel
													Calls Shell::splitFieldString, Element::findElement
													Should really work with wildcards, but doesn't.
													Calls Element::listFields, Field::strGet, Field::good,
													Element::field.
1.28	showmsgFuncLocal( const string& field );			Not implemented
1.29	showobjectFuncLocal( const string& classname );			Not implemented
1.30	pweFuncLocal(  );
1.31	leFuncLocal( const string& start );				le like GENESIS			Calls Element::findElement, Field::dest, 
													Field::getElement.
1.32	listCommandsFuncLocal( );					like GENESIS			Another ugly call back to the parser to list 
													commands.
1.33	listClassesFuncLocal( );					Like GENESIS			calls leFuncLocal
1.34	echoFuncLocal( vector< string >& s, int options );		Like GENESIS			Works in parallel. Calls remoteCall
1.35	commandFuncLocal( int argc, const char** argv );		Utility func to take argvs	Redundant. See above for the intro to shells.
									and call the appropriate local
									Shell::function.
1.36	remoteCommandFuncLocal( string arglist ); 			Converts string to argvs	Calls commandFuncLocal.

=============================================================================================================================================================
2. Object lookup and Wildcard building
Main issue here is to plan in the context of the parallel implementation.
Also I want to separate out the functions that general coders will use (e.g., for making solvers or traversers) vs deeper core code functions.
Also, should the handle to an object be Element*, Field, or Conn?

#	Name								Purpose				Notes	
2.1	static Element* Element::root()					Return root element		Not parallel - returns local node root.
2.2	static Element* Element::classes()				Return parent of classes	Not parallel. Used exactly once: at initialize in Cinfo.cpp
													Other uses are all for testing only. Should remove.
2.3	Element* Element::parent()					Return parent of current elm	Why is it a virtual?
2.4	const std::string& Element::name() const			Return element's name		Second tier API?
2.5	string Element::path()						Return path of current elm	Second Tier API.
2.6	virtual Element* relativeFind( const std::string& n );		Return elm starting from this	Second or third Tier API.
2.7	static Element* Element::find( const string& absolutePath )	Return elm from absolute path	
2.8	virtual bool adoptChild(Element *child) = 0;			Adds child to child list.	Second Tier API, or even third.
2.9	static int startFind( 						Fills vector with elm*		Not a good name for a major API function. Unless we 
		const std::string& n, std::vector< Element* >& ret);					want to hide it in Field vectors? Should be private.
2.10	Element* wildcardName(const std::string& n ) ;			Checks for matching name	Should be private. Somewhat fragile function.
2.11	virtual int Element::wildcardRelativeFind(			Builds list based on path.	Should be private.
		const std::string& n, std::vector< Element* >& ret,
		int doublehash) ;
2.12	static int Element::wildcardFind(				This is the public wildcard func  How to handle parallel paths? 
		const std::string& path, std::vector< Element* >& ret );
2.13	Element* Element::wildcardFieldComparison(			Looks for specific matching fields	Should be private.
		const std::string& line );

=============================================================================================================================================================
3. Object field access, including array fields.: get, set, show

#	Name								Purpose				Notes	
3.1	Element::field( const std::string& name)			Get Field by name on elm	Will we retain direct access to Element?
													Should it therefore be private?
3.2	Various Field constructors:					Making Fields
3.2.1		Field()											Needed to make vectors of them
3.2.2		Field( Finfo *f, Element* e = 0 );							Perhaps deprecate direct access to Finfo
3.2.3		Field(const Field& other);								Needed for assignment
3.2.4		Field(const std::string& path);								Useful
3.2.5		Field( Element* e, const std::string& finfoName );					Will we retain direct access to Element?
3.3	Field::set( const string& value)				Assign by string.		Refers it to Finfo, thence to Ftype
3.4	Field::get( string& value)					Return value to string		Refers it to Finfo, thence to Ftype


=============================================================================================================================================================
Object field access, including array fields.: get, set, show
Object create, delete, move, copy
Message create, delete, traversal, list
Message send and sendTo
Fields vs elements.
Nested and array fields.
Ftype stuff.


Now follows a listing of major classes in moose, and what they do.

Message types

Type		Function					How they do it						Notes
1. Regular	Sends info from src to dest			Src holds Dest RecvFunc, calls it using Conn		Highly overloaded with subtypes.
								for information about target. 				Sources can have multiple targets,
															possibly with different recvFuncs.
2. Return	Src calls dest, dest calls right back		Shared message. 					Issues with doing this on parallel
2.1 MultiReturn	Src calls dest, but src is one of many.		Shared message + ReturnConn, which has a recvfunc	systems.
		Dest needs to call back to correct src.		for the calling object.
3. Shared	Multiple srcs go along same Conn to dest.	Shared Conn, and some really ugly stuff with the	Issues with ordering groups of 
		May also have srcs on either end.		msgsrc and dest juggling recvFuncs.			regular messages.
4. Synapse	Additional info associated with each		SynapseConn has the additional info. Vector ops		
		connection.					provide access to SynapseConn.
5. Solve	Line for takeover of object functions.		Replaces Process message. Part SharedMessage,		Hideously messy, need to know
		But Solver needs to know dest and src		and part a vector of Conns, rather than Conn*.		size beforehand to allocate Conn
		of every message individually.			Using the Conn vector means it is easy to lookup 	vector.
								indices using offsets.
6. Parallel	Sends info to postmaster which doesn't		The source Finfo->ftype is used to get a function	Messier, and the allocation issue
		know type of incoming data			to handle the incoming data and put into chars.		is sidestepped for now.
		Sends info from postmaster, with same 		Likewise, target Finfo->ftype is used for a function
		problem.					Additional fun and games with automatic pointer
								increments. All this is also based on a 
								solve-type message.
7. Relay	Irregular messages, e.g, dest to a src,		Special RelayFinfo which adds onto element, handles	Messy.
		or messages to and from fields.			all sorts of cases using extra info. Special subclass
								for field value lookups.
8. Internal.	Traversal information messages within		Done entirely through Src and Dest Finfos as text
		an object (statically, using no memory).	strings.
		Give the illusion that any msgDest that
		calls a msgSrc, has a corresponding message
		to do so.


Finfo
1. Dest		Dest0, Dest1<T>...
2. SingleSrc	SingleSrc0, SingleSrc1<T> ...
3. NSrc		NSrc0, NSrc1<T> ...
4. ExtField
5. Dummy
6. ValueFinfoBase
7. ObjFinfo
8. RelayFinfo0, 1< T>...
9. Return	Return0, Return1<T>...
10. Shared
11. Solve
12 Value
13. ReadOnlyValue
14. Array
15. ReadOnlyArray
16. Synapse	0, 1<T>...
17. ValueRelay< T >
18. Piggy?
19. ParallelDest
20. ParallelSrc
21. ParallelDummy?


MsgSrc
Single Single0 Single1<T>...
N	N0	N1<T>...
Parallel

Conns
1. UniConn< F >
2. UniConn2
3. SynConn
4. PlainMultiConn
5. BaseMultiConn
6. MultiConn
7. RelayConn
8. ReturnConn
9. MultiReturnConn
10. SolveMultiConn
11. SolverConn

