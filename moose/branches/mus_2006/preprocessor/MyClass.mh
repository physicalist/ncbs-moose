/**********************************************************************
** This program is part of 'MOOSE', the
** Messaging Object Oriented Simulation Environment,
** also known as GENESIS 3 base code.
**           copyright (C) 2003-2006 Upinder S. Bhalla. and NCBS
** It is made available under the terms of the
** GNU Lesser General Public License version 2.1
** See the file COPYING.LIB for the full notice.
**********************************************************************/

// The header stuff is now copied over verbatim, except that the
// includes go selectively into the Wrapper.cpp

#include <math.h>
#include "myOtherInclude.h"

class MyClass
{
	public:
		// Stuff here will be copied over to .h unchanged.
	author: 
		Uma the Programmer, today's date, Uma's Institution.
	description:
		// Note that this comment appears in the code, but does not
		// become part of the description string.
		This is a test class. If it were a real class it would 
		have been much the same.
	field:
		double Vm;
		double Cm = 1e-6;	// initial value
		double Rm;
		const double pi; // Here we have a constant value
		readonly double Ra; // Here we have value that the user can
			// only read, but it may be changed within the object.
		double inject; // all boring stuff

		// Here we define an array. Each entry can be accessed by
		// indexing: e.g., coords[0], coords[500].
		// Indexes are protected, the system will not accept a bad
		// one.
		// MOOSE arrays are all expandable: they really are vectors.
		// By default the system also
		// generates a 'size' field which is accessed as coords.size
		// The entire vector can be accessed if one uses only the
		// name of the field, coords.
		// In this manner full vector can be assigned to another one
		// (provided the types match).
		double coords[];

		// Here is another array, just that here we define an initial
		// size
		double values[ 10 ];

		// Here we take a complete moose
		// class as a field of this class. This engulfed class will
		// not have any messaging, just the data and functions.
		// Because MOOSE knows about the other class, we do not need
		// to fill in details.
		mooseclass MyOtherClass complexField;

		// This silly little class is defined locally and
		// has two fields which do not do much. In the constructed
		// header one would presumably add functions and private
		// fields to the class. The purpose of putting this reduced
		// class definition here is to tell MOOSE how to access these
		// fields within the class.
		class pair { 
			double foo;
			double bar;
		} anotherComplexField;

		// This is a more typical complex field. It actually
		// reimplements a fairly common MOOSE class, the lookup table
		// with a specified range. In the constructed header one
		// would elaborate on the table class.
		class table {
			double min;
			double max;
			double values[];
		} myTableField;
	
	eval_field:
		// Here we handle evaluated fields, which do not have a simple
		// mapping onto fields in the data structure. 
		// If the field is purely evaluated, we need to provide
		// a couple of access functions like this:
		double getTau() {
			return Rm_ * Cm_;
		}
		void setTau( double value ) {
			if ( value > 0 && Cm_ > 0 )
				Rm_ = value / Cm_;	
		}
		// if the field has some internal field as well, the function
		// can be used as before but the internal field has to be
		// declared in the private part of the header.
		double getIm() {
			return Im_;
		}
		void setIm( double value ) {
			if ( value > 0 )
				Im_ = value;
		}

		// We can also declare readonly evaluated fields
		readonly double getArea() {
			return Cm_ / specificMembCapacitance_;
		}

	shared:
		// Here we indicate sets that share a connection.
		// The lists can be as long as needed.
		// The group name is used in making the messages.
		// The number and sequence of messages is just like an
		// argument list: must match with the target.
		// We define the actual Src and dest Finfos below.
		multi proximal(axialOut, raxialIn, diffusion1Out, diffusion1In);
		single distal( axialIn, raxialOut, diffusion2In, diffusion2Out);
		single process( processIn, resetIn );
	
	src:
		// Note that src and dest can have the same name, and it
		// may even be appropriate for communicating message pairs. All
		// src fields have the suffix Out appended to their name.
		// Each of these examples specifies the connection type
		// directly: multi or single.
		// If there are shared messages, these will eventually be
		// defined again, and should match.

		// See below under shared: for how some of these are shared.
		multi axial( double );
		single raxial( double, double );
		multi channel( double, ProcArg a );
		// Need two diffusions to identify which is proximal and which
		// is distal. These will be
		multi diffusion1( double, double );
		single diffusion2( double, double );
	
	dest:
		// All dest fields will have the suffix In appended to the name.

		// This shares a connection with the raxialOut.
		single axial( double V ) {
			I_ += (V - Vm_) / Ra_;
		}

		// Here we again reuse a connection, this time with axialOut
		multi raxial( double V, double Ra ) {
			I_ += ( V - Vm_ ) / Ra;
		}

		// Here we have another shared connection, but in this case
		// the other end is a distinct class. It is legal
		// only if the other class also defines its end as a
		// shared connection, otherwise the connection won't be made.
		multi channel( double Gk, double Ek ) {
			I_ += (Vm_ - Ek) * Gk;
			Ca_ += I_ * volscale_;
		}

		// Gets input from diffusion2
		single diffusion2( double conc, double flux ) {
			Ca_ += flux;
			// stuff here
		}

		// Gets input from diffusion1
		multi diffusion1( double conc, double flux ) {
			Ca_ += flux;
			// stuff here
		}

		// Note that here we explicitly indicate messages going out.
		// If the user has a more complicated structure for their
		// function, they can rearrange the outgoing calls.
		single process( ProcArg a ) {
			channel( Vm_, a );
			axial( Vm_ );
			raxial( Vm_, Rm_ );
			Vm_ += 0; 
			// Vm_ += IntegFunc(I_, Vm_, Rm_, Cm_)
			// something like (I.Rm - Vm)/(1 + C.Rm);
		}

		// Here we have a shared connection with processIn.
		// The logic is that every time a process
		// message is made, the reset message should also be done.
		// Note that the arguments do not need to be the same.
		single reset() {
			Vm_ = Erest_;
			I_ = 0;
		}

	synapse:
		// These are also message destinations, but each connection
		// holds additional information in the form of a class. As
		// new connections are made this array is expanded. The
		// array entries are visible as ordinary array fields.
		// If there is no additional information then a regular
		// message destination would do the job.
		// This additional information could be as simple as an
		// integer, or a complete class with all sorts of fields.
		// The delay is the argument passed by the incoming message.
		// The additional information class in this case is an int.
		single inhib( double delay ) int;

		// Here the additional info is a class called SynInfo.
		multi excite() SynInfo;

	private:
		// Stuff here will be copied over unchanged to .h.
		double I_;
		double Ca_;
		double volscale_;
		double Erest_;

		// We can also declare constant values. These are not
		// copied over unchanged, but require a bit of cleaning up.
		static const double specificMembraneCapacitance_ = 0.01;
	
	private_wrapper:
		// Stuff here will be copied over unchanged to MyClassWrapper.h
		void UtilityFunc( Element* e );
};


////////////////////////////////////////////////////////////////////
// Stuff below here goes verbatim into MyClassWrapper.cpp
////////////////////////////////////////////////////////////////////

void MyClassWrapper::UtilityFunc( Element* e )
{
	;
}

