/**********************************************************************
** This program is part of 'MOOSE', the
** Messaging Object Oriented Simulation Environment,
** also known as GENESIS 3 base code.
**           copyright (C) 2003-2006 Upinder S. Bhalla. and NCBS
** It is made available under the terms of the
** GNU Lesser General Public License version 2.1
** See the file COPYING.LIB for the full notice.
**********************************************************************/

#include <math.h>

class Molecule
{
	public:
		// Stuff here will be copied over to .h unchanged.
	author: 
		Upinder S. Bhalla, 2005, NCBS
	description:
		Pool of molecules.
	field:
		double nInit = 0.0;
		double volumeScale = 1.0;
		double n = 0.0;
		int mode = 0;		// 0=normal, 1 = n sumtot, 2 = conc sumtot,
							// > 2 is buffered
		/*
		double molWeight;
		double D;
		*/
	eval_field:
		double getConc() {
			if ( volumeScale_ > 0.0 )
				return n_ / volumeScale_ ;
			else
				return n_;
		}
		void setConc( double value ) {
			if ( volumeScale_ > 0.0 )
				n_ = value * volumeScale_ ;
			else
				n_ = value;
		}

		double getConcInit() {
			if ( volumeScale_ > 0.0 )
				return nInit_ / volumeScale_ ;
			else
				return nInit_;
		}
		void setConcInit( double value ) {
			if ( volumeScale_ > 0.0 )
				nInit_ = value * volumeScale_ ;
			else
				nInit_ = value;
		}

	shared:
		// Here we indicate sets that share a connection.
		// The lists can be as long as needed.
		// The group name is used in making the messages.
		// The number and sequence of messages is just like an
		// argument list: must match with the target.
		// We define the actual Src and dest Finfos below.

		// The process increments a timestep, the reinit initializes.
		single process( processIn, reinitIn );
		single solve( processIn, reinitIn, solveIn, solveOut );

		// The reacOut and In messages are scheduled by Process.
		// reacOut sends n. reacIn receives A and B, which are the
		// increment and decrement of n respectively.
		multi reac( reacOut, reacIn );

		// The rateOut and In messages are for a general solver.
		// rateOut is triggered by rateIn. rateIn passes in the 
		// time for which rateOut is required. rateOut sends n and
		// the slope of n.
		// single rate( rateOut, rateIn );

	src:
		// Note that src and dest can have the same name, and it
		// may even be appropriate for communicating message pairs. All
		// src fields have the suffix Out appended to their name.
		// Each of these examples specifies the connection type
		// directly: multi or single.
		// If there are shared messages, these will eventually be
		// defined again, and should match.

		// See above for how some of these are shared.

		// also sends n out, triggered by process, shared with reacIn
		multi reac( double );
		multi n( double );
		single solve( double, double, int );
	
	dest:
		multi reac( double A, double B ) {
			A_ += A;
			B_ += B;
		}

		multi prd( double A, double B ) {
			A_ += A;
			B_ += B;
		}

		multi sumTotal( double n ) {
			total_ += n;
		}

		// This is meant to be called on a separate clock tick from the
		// Process. It requires that the n of all its input molecules
		// have arrived, so the main Process must be completed before
		// this one is called.
		single sumProcess( ProcInfo info ) {
			n_ = total_;
			total_ = 0.0;
		}

		// I'll drop this one for now. It was coded in the intermediate
		// MOOSE, but I don't know if it was every deployed.
		/*
		single compartment( double vol ) {
			static const double VOLUME_CONVERSION = 6.0e20;

			volumeScale_ = vol * VOLUME_CONVERSION;
		}
		*/

		single reinit( ) {
			A_ = B_ = total_ = 0.0;
			n_ = nInit_;
			if ( mode_ == 0 && sumTotalInConn_.nTargets() > 0 )
				mode_ = 1;
			else if ( mode_ == 1 && sumTotalInConn_.nTargets() == 0 )
				mode_ = 0;
			reac( n_ );
			n( n_ );
		}

		// Note that here we explicitly indicate messages going out.
		// If the user has a more complicated structure for their
		// function, they can rearrange the outgoing calls.
		single process( ProcInfo info ) {
			if ( mode_ == 0 ) {
				if ( n_ > EPSILON && B_ > EPSILON ) {
					double C = exp( -B_ * info->dt_ / n_ );
					n_ *= C + ( A_ / B_ ) * ( 1.0 - C );
				} else {
					n_ += ( A_ - B_ ) * info->dt_;
				}
				A_ = B_ = 0.0;
			} else if ( mode_ == 1 ) {
				n_ = total_;
				total_ = 0.0;
			} else if ( mode_ == 2 ) {
				n_ = total_ * volumeScale_;
				total_ = 0.0;
			} else { // buffering
				n_ = nInit_;
			}

			reac( n_ );
			n( n_ );
		}

		single solve( double n ) {
			n_ = n;
		}

	private:
		// Stuff here will be copied over unchanged to .h.
		double total_;
		double A_;
		double B_;
		static const double EPSILON = 1.0e-15;

	private_wrapper:
		// This virtual function checks if the molecule is solved,
		// and that the field f has something to do with the
		// specified operation s. For now s is only set or get.
		void solverUpdate( const Finfo* f, SolverOp s ) const;
		bool isSolved() const;
};

////////////////////////////////////////////////////////////////////
// Stuff below here goes verbatim into MoleculeWrapper.cpp
////////////////////////////////////////////////////////////////////

bool MoleculeWrapper::isSolved() const
{
	return ( solveSrc_.targetFunc(0) && 
		solveSrc_.targetFunc(0) != dummyFunc0 );
}

void MoleculeWrapper::solverUpdate( const Finfo* f, SolverOp s ) const
{
	if ( solveSrc_.targetFunc(0) && 
		solveSrc_.targetFunc(0) != dummyFunc0 ) {
		if ( s == SOLVER_SET ) {
			if ( f->name() == "n" || f->name() == "nInit" ||
				f->name() == "conc" || f->name() == "concInit" )
				solveSrc_.send( n_, nInit_, SOLVER_SET );
		} else if ( s == SOLVER_GET ) {
			if ( f->name() == "n" || f->name() == "conc" )
				solveSrc_.send( n_, nInit_, SOLVER_GET );
		}
		// Other stuff later for ADDMSG and DELETEMSG.
	}
}
