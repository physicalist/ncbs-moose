

// **************************************************
// File generated by: neuroConstruct v1.7.0 
// **************************************************

// This file holds the implementation in NEURON of the Cell Mechanism:
// SimpleCellMembrane (Type: Channel mechanism, Model: Template based ChannelML file)

// with parameters: 
// /channelml/@units = Physiological Units 
// /channelml/notes = Example of 5 state kinetic scheme K conductance specified in ChannelML. 
// /channelml/channel_type/@name = SimpleCellMembrane 
// /channelml/channel_type/notes = K conductance with 5 kinetic states. NOTE: currently a mapping is only provided                     to the NEURON Channel Builder format and PSICS 
// /channelml/channel_type/current_voltage_relation/@cond_law = ohmic 
// /channelml/channel_type/current_voltage_relation/@ion = k 
// /channelml/channel_type/current_voltage_relation/@default_gmax = 36 
// /channelml/channel_type/current_voltage_relation/@default_erev = -77.0 
// /channelml/channel_type/current_voltage_relation/gate/@name = n 
// /channelml/channel_type/current_voltage_relation/gate/@instances = 1 
// /channelml/channel_type/current_voltage_relation/gate/closed_state[1]/@id = n0 
// /channelml/channel_type/current_voltage_relation/gate/closed_state[2]/@id = n1 
// /channelml/channel_type/current_voltage_relation/gate/closed_state[3]/@id = n2 
// /channelml/channel_type/current_voltage_relation/gate/closed_state[4]/@id = n3 
// /channelml/channel_type/current_voltage_relation/gate/open_state/@id = n 
// /channelml/channel_type/current_voltage_relation/gate/open_state/@fraction = 1 
// /channelml/channel_type/current_voltage_relation/gate/transition[1]/@name = alpha_n0_n1 
// /channelml/channel_type/current_voltage_relation/gate/transition[1]/@from = n0 
// /channelml/channel_type/current_voltage_relation/gate/transition[1]/@to = n1 
// /channelml/channel_type/current_voltage_relation/gate/transition[1]/@expr_form = exp_linear 
// /channelml/channel_type/current_voltage_relation/gate/transition[1]/@rate = 0.4 
// /channelml/channel_type/current_voltage_relation/gate/transition[1]/@scale = 10 
// /channelml/channel_type/current_voltage_relation/gate/transition[1]/@midpoint = -55 
// /channelml/channel_type/current_voltage_relation/gate/transition[2]/@name = beta_n0_n1 
// /channelml/channel_type/current_voltage_relation/gate/transition[2]/@from = n1 
// /channelml/channel_type/current_voltage_relation/gate/transition[2]/@to = n0 
// /channelml/channel_type/current_voltage_relation/gate/transition[2]/@expr_form = exponential 
// /channelml/channel_type/current_voltage_relation/gate/transition[2]/@rate = 0.125 
// /channelml/channel_type/current_voltage_relation/gate/transition[2]/@scale = -80 
// /channelml/channel_type/current_voltage_relation/gate/transition[2]/@midpoint = -65 
// /channelml/channel_type/current_voltage_relation/gate/transition[3]/@name = alpha_n1_n2 
// /channelml/channel_type/current_voltage_relation/gate/transition[3]/@from = n1 
// /channelml/channel_type/current_voltage_relation/gate/transition[3]/@to = n2 
// /channelml/channel_type/current_voltage_relation/gate/transition[3]/@expr_form = exp_linear 
// /channelml/channel_type/current_voltage_relation/gate/transition[3]/@rate = 0.3 
// /channelml/channel_type/current_voltage_relation/gate/transition[3]/@scale = 10 
// /channelml/channel_type/current_voltage_relation/gate/transition[3]/@midpoint = -55 
// /channelml/channel_type/current_voltage_relation/gate/transition[4]/@name = beta_n1_n2 
// /channelml/channel_type/current_voltage_relation/gate/transition[4]/@from = n2 
// /channelml/channel_type/current_voltage_relation/gate/transition[4]/@to = n1 
// /channelml/channel_type/current_voltage_relation/gate/transition[4]/@expr_form = exponential 
// /channelml/channel_type/current_voltage_relation/gate/transition[4]/@rate = 0.25 
// /channelml/channel_type/current_voltage_relation/gate/transition[4]/@scale = -80 
// /channelml/channel_type/current_voltage_relation/gate/transition[4]/@midpoint = -65 
// /channelml/channel_type/current_voltage_relation/gate/transition[5]/@name = alpha_n2_n3 
// /channelml/channel_type/current_voltage_relation/gate/transition[5]/@from = n2 
// /channelml/channel_type/current_voltage_relation/gate/transition[5]/@to = n3 
// /channelml/channel_type/current_voltage_relation/gate/transition[5]/@expr_form = exp_linear 
// /channelml/channel_type/current_voltage_relation/gate/transition[5]/@rate = 0.2 
// /channelml/channel_type/current_voltage_relation/gate/transition[5]/@scale = 10 
// /channelml/channel_type/current_voltage_relation/gate/transition[5]/@midpoint = -55 
// /channelml/channel_type/current_voltage_relation/gate/transition[6]/@name = beta_n2_n3 
// /channelml/channel_type/current_voltage_relation/gate/transition[6]/@from = n3 
// /channelml/channel_type/current_voltage_relation/gate/transition[6]/@to = n2 
// /channelml/channel_type/current_voltage_relation/gate/transition[6]/@expr_form = exponential 
// /channelml/channel_type/current_voltage_relation/gate/transition[6]/@rate = 0.375 
// /channelml/channel_type/current_voltage_relation/gate/transition[6]/@scale = -80 
// /channelml/channel_type/current_voltage_relation/gate/transition[6]/@midpoint = -65 
// /channelml/channel_type/current_voltage_relation/gate/transition[7]/@name = alpha_n3_n 
// /channelml/channel_type/current_voltage_relation/gate/transition[7]/@from = n3 
// /channelml/channel_type/current_voltage_relation/gate/transition[7]/@to = n 
// /channelml/channel_type/current_voltage_relation/gate/transition[7]/@expr_form = exp_linear 
// /channelml/channel_type/current_voltage_relation/gate/transition[7]/@rate = 0.1 
// /channelml/channel_type/current_voltage_relation/gate/transition[7]/@scale = 10 
// /channelml/channel_type/current_voltage_relation/gate/transition[7]/@midpoint = -55 
// /channelml/channel_type/current_voltage_relation/gate/transition[8]/@name = beta_n3_n 
// /channelml/channel_type/current_voltage_relation/gate/transition[8]/@from = n 
// /channelml/channel_type/current_voltage_relation/gate/transition[8]/@to = n3 
// /channelml/channel_type/current_voltage_relation/gate/transition[8]/@expr_form = exponential 
// /channelml/channel_type/current_voltage_relation/gate/transition[8]/@rate = 0.5 
// /channelml/channel_type/current_voltage_relation/gate/transition[8]/@scale = -80 
// /channelml/channel_type/current_voltage_relation/gate/transition[8]/@midpoint = -65 

// File from which this was generated: /home2/dilawar/Work/github/neurons_sim/neuroConstructProjects/twoNeurons/cellMechanisms/SimpleCellMembrane/KChan_KineticScheme.xml

// XSL file with mapping to simulator: /home2/dilawar/Work/github/neurons_sim/neuroConstructProjects/twoNeurons/cellMechanisms/SimpleCellMembrane/ChannelML_v1.8.1_NEURONChanBuild.xsl



//  This is a NEURON Channel Builder file generated from a ChannelML file
//
//  NOTE: Not all cases allowable in the ChannelML specification are implemented in this yet,
//  generally it's just the parameterised (Adk) form of the channels that's supported. The mod file mapping
//  will support most parts of the specification. This Channel Builder form should be used if 
//  the channel is specified as a kinetic scheme.
//
//  It assumes the ChannelML file contains only a single conductance i.e. one channel_type element.


// Unit system of ChannelML file: Physiological Units, which have been converted to NEURON units    
{ ion_register("k", 1) }
    
// Creating the main ks objects

objref ks, ksvec, ksgate, ksstates, kstransitions, tobj
{
    ksvec = new Vector()
    ksstates = new List()
    kstransitions = new List()
    ks = new KSChan(0)
}


// Setting the properties of  KSChan
{
    ks.name("SimpleCellMembrane")
    ks.ion("k")
    ks.iv_type(0)  // Note, only ohmic supported in current version
    ks.gmax(0.036)
    ks.erev(-77.0)
}


    
//     Adding information for the gate: n

{   
    objref ksgate

    // Adding information for KS gate related to n, which has 1 open and 4 closed states and 8 transitions
            
    ksstates.append(ks.add_ksstate(ksgate, "n0"))  // Note: closed_state...
                
    ksstates.object(0).frac(0)
                    
    ksgate = ksstates.object(0).gate
    ksgate.power(1)
            
    ksstates.append(ks.add_ksstate(ksgate, "n1"))  // Note: closed_state...
                
    ksstates.object(1).frac(0)
                    
    ksstates.append(ks.add_ksstate(ksgate, "n2"))  // Note: closed_state...
                
    ksstates.object(2).frac(0)
                    
    ksstates.append(ks.add_ksstate(ksgate, "n3"))  // Note: closed_state...
                
    ksstates.object(3).frac(0)
                    
    ksstates.append(ks.add_ksstate(ksgate, "n"))  // Note: open_state...
                
    ksstates.object(4).frac(1)
                            
}

     

{
    
    kstransitions.append(ks.add_transition(ksstates.object(0), ksstates.object(1)))
        
    kstransitions.append(ks.add_transition(ksstates.object(1), ksstates.object(2)))
        
    kstransitions.append(ks.add_transition(ksstates.object(2), ksstates.object(3)))
        
    kstransitions.append(ks.add_transition(ksstates.object(3), ksstates.object(4)))
        
}

    
{
    // The transition from n0 to n1
    tobj = kstransitions.object(0)     

    tobj.type(0)

    // n0 -> n1: type = exp_linear, rate = 0.4, scale = 10, midpoint = -55
    tobj.set_f(0, 3, ksvec.c.append(0.4, (1/10), -55))

    
    // n1 -> n0: type = exponential, rate = 0.125, scale = -80, midpoint = -65
    tobj.set_f(1, 2, ksvec.c.append(0.125, (1/-80), -65))
        

}
            
{
    // The transition from n1 to n2
    tobj = kstransitions.object(1)     

    tobj.type(0)

    // n1 -> n2: type = exp_linear, rate = 0.3, scale = 10, midpoint = -55
    tobj.set_f(0, 3, ksvec.c.append(0.3, (1/10), -55))

    
    // n2 -> n1: type = exponential, rate = 0.25, scale = -80, midpoint = -65
    tobj.set_f(1, 2, ksvec.c.append(0.25, (1/-80), -65))
        

}
            
{
    // The transition from n2 to n3
    tobj = kstransitions.object(2)     

    tobj.type(0)

    // n2 -> n3: type = exp_linear, rate = 0.2, scale = 10, midpoint = -55
    tobj.set_f(0, 3, ksvec.c.append(0.2, (1/10), -55))

    
    // n3 -> n2: type = exponential, rate = 0.375, scale = -80, midpoint = -65
    tobj.set_f(1, 2, ksvec.c.append(0.375, (1/-80), -65))
        

}
            
{
    // The transition from n3 to n
    tobj = kstransitions.object(3)     

    tobj.type(0)

    // n3 -> n: type = exp_linear, rate = 0.1, scale = 10, midpoint = -55
    tobj.set_f(0, 3, ksvec.c.append(0.1, (1/10), -55))

    
    // n -> n3: type = exponential, rate = 0.5, scale = -80, midpoint = -65
    tobj.set_f(1, 2, ksvec.c.append(0.5, (1/-80), -65))
        

}
            


// Cleaning up...
{ 
    ksstates.remove_all  kstransitions.remove_all 
} 




{ objref ks, ksvec, ksgate, ksstates, kstransitions, tobj }

