These are the release notes for the Beta 1.3.0 release of MOOSE, the
Multiscale Object-Oriented Simulation environment.

Introduction.
This release is principally aimed at refining the graphical interface and
installation process. There also are substantial functional additions, 
mostly in the form of additional numerical capabilities.
We introduce two external utilities for displaying cell-level and network-
level activity using OpenGL 3-D graphics.
Finally, this version has enhanced XML-data sharing capabilities, most
notably NEUROML v1.8 support.

As with the previous version, the default release is based on Python, with
a graphical interface based on Qt.

The parallel code has been improved, but as discussed below, this line of
development will be superseded by the new base code.

Directions and developer guidelines.
The next beta release will see a major overhaul to the base code. This will 
substantially simplify the process of creating objects and numerical 
engines, and will clean up the parallel and multithread interfaces. We will 
soon put out a developer branch using the new base code, and we recommend 
that all developers switch to the new branch when it comes out.

=============================================
Release notes for PyMOOSE (MOOSE beta 1.3) (Subhasis Ray)
=============================================

PyMOOSE and the PyQt GUI using PyMOOSE went through many clean-ups and
improvements. The following are the major ones:

* Improved documentation.
  Info documents have been added for PyMOOSE. This documentation aims at 
  showing how to use moose as a library in Python scripts. Although the
  GUI 

* Change in class hierarchy.
  Now the class hierarchy in PyMOOSE follows that in MOOSE more
  closely. Earlier all classes are derived from from the abstract base
  class PyMooseBase. Now all classes are derived from Neutral, and
  Neutral itself is derived from PyMooseBase. This should be
  transparent to existing simulation scripts.

* Redesigned Graphical User Interface based on PyMOOSE
  The GUI has been rewritten and has new features. 
  - A simple wizard has been added to walk the user through basic 
    configuration when moosegui is run for the first time.
  - Wizard for 3D visualization simplifies setting up OpenGL visualization.
  - 2-D visualization of kkit models.
  - Finer control over the plots. User can select individual curves in 
    the legend and change the line properties from the menu. User can drag 
    and drop fields from the object editor to the plot window to plot that
    field during simulation.
  - Wizard for connecting MOOSE elements
    In the Menu bar there is an "Edit Model" menu allowing user to select a 
    source element and its source field on the left hand side and a 
    destination element and a target field on the right hand side and
    create a message between the two.
  - Command line interface (available from View menu) which allows both 
    GENESIS style commands as well as the Python interpreter.
 
=============================================
Release notes for NeuroML compatibility (Subhasis Ray)
=============================================
MOOSE can read single cell models in NeuroML. The following demo shows a
scripting example:

  - NeuroML_Reader

Additionally one can just load a NeuroML file from the File menu in moosegui.

=============================================
Release notes for OpenGL display (Karan Vasudeva)
=============================================
This release includes OpenGL based 3D visualization tools:

  - GLcell: This tool allows 3D visualization of activity in single neuron
    models. The state of each compartment is displayed using a chosen color map.
  
  - GLview: This tool lets one simultaneously display many variables of
    arbitrary simulation entities. Values of state variables are represented
    using color, length, width, etc. of 3D objects displayed on the screen.

Demos can be found in the moosegui 'Help' menu, and in the 'gl-demo'
subdirectory inside the 'DEMOS' directory.

=============================================
Release notes for new numerical engines (Upi Bhalla)
=============================================

There are two new numerical engines in this version of MOOSE.
1. StateScanner. This class finds steady-state solutions to chemical
kinetic systems. An example script is in DEMOS/SteadyState/states_TRI.g

This class utilizes the stoichiometry matrix solver system and the 
GNU Scientific library routines for multidimensional root finding to 
find steady-states. It sets up a system of equations by setting the
rates of change of all molecules to zero, and folding in the conservation
equations. It then looks for solutions starting from a range of initial
conditions that are selected randomly. It keeps track of unique solutions.

Performance: The actual state identification is fast, but it may take a lot
of initial conditions to find all possible steady states.


2. SigNeur. This class makes multiscale models that combine electrical
models and biochemical models of neurons. An example script is in
DEMOS/SigNeur/sn.g

It currently needs three models to be specified: an electrical compartmental 
model, a dendritic signaling model, and a spine signaling model. It first 
works out how to spatially compartmentalize the dendrites. This is typically 
at a smaller discretization than the electrical compartmental model. Having 
done so, it populates the dendrites with the dendritic model, and sets up 
inter- compartmental diffusion. Then it fills in copies of the spine model 
into assigned spine compartments, and diffusively couples these to the 
appropriate dendrite compartment. It also sets up interfaces between 
electrical model entities (calcium concentration and ion channel density) 
and maps them to the appropriate signaling entities. At run-time, each of 
the electrical and signaling models run simultaneously, and the interfaces 
map the appropriate variables between the respective numerical engines. 
Currently supports the Hsolver and the GSL kinetic solver for the two engines.

Performance: This is pretty efficient, and is mostly limited by the speed
of the numerical engine for the electrical model.

This class is still under active development. Prospective users should
contact the developers for updates and examples.
