Creator: Aditya Gilra, NCBS, Bangalore, India, adityag@ncbs.res.in
Date: 20 Sep, 2012

#I'm following instructions at:
#http://developer.ubuntu.com/packaging/html/packaging-new-software.html
#and
#https://wiki.ubuntu.com/PackagingGuide/Complete

These instructions are better than above:
http://www.debian.org/doc/manuals/maint-guide/index.en.html

Packaging for and on Ubuntu 10.04/12.04 64bit in a virtualbox virtual machine on pinni@ncbs. Not sure if updating to the latest updates for the OS will make moose deb package more restrictive. Hence not updating. But could there be security issues?

For setting the proxy for the system, and setting up synaptic, subversion read the initial parts of the LiveCD customization instructions, that inform how to set up moose on a fresh install.
https://moose.svn.sourceforge.net/svnroot/moose/packaging/UbuntuLiveCD_customization.txt
It seems that Ubuntu Software Center does not honour the system proxy.
So above document gives command line workarounds for the same.

Get moose source from sourceforge using subversion (set proxy in ~/.subversion/servers)
svn co https://moose.svn.sourceforge.net/svnroot/moose/moose/branches/buildQ/ ~/moose_src

As per README, get dependencies:
sudo apt-get install g++ make python-dev libgsl0-dev libpthread-stubs0-dev python-numpy libhdf5-serial-dev
For the GUI:
sudo apt-get install python-matplotlib python-qt4 python-qt4-gl

In ~/moose_src,
make BUILD=release
confirm that gui runs with:
export PYTHONPATH=$PYTHONPATH:/home/user/moose_src/python/
python /home/user/moose_src/gui/MooseGUI.py


--------------------- Create 'debian' directory in ~/moose_src from scratch: -----------

From the instructions at:
http://www.debian.org/doc/manuals/maint-guide/first.en.html

Follow sec 2.7 setting up dh_make in above file, setting DEBEMAIL and DEBFULLNAME
install dh-make and build-essential via synaptic
As per sec 2.9, above
cd ~/moose_src
dh_make --native -s -p moose_2.0.0 -c lgpl2
[Sets version number (in debian/changelog) and licence (lgpl2) above.]
This creates a ~/moose_src/debian directory.

------------------ Put in MOOSE specific information for packaging ----------------------

svn checkout the Debian packaging scripts/files:
svn co https://moose.svn.sourceforge.net/svnroot/moose/packaging/debian ~/moose_src/debian-ref
## copy all the config files ignoring the .svn files
rsync --exclude=.svn debian-ref/* debian/

In ~/moose_src/debian/, you can
edit 'copyright' file to put in author names, change package copyright also to lgpl2 etc.
edit control, postinst and prerm files.
IMPORTANT: In ~/moose_src/debian/control,
 set architecture to 'i386' or 'amd64' for 32-bit / 64-bit systems, and
 set python2.6 / python2.7 on the 'Depends' line based on Ubuntu 10.04 / 12.04.

[You cannot have a common package for python 2.6 & 2.7
as _moose.so is linked to libpython2.6 / libpython2.7 .]

------------------- Generate /debian/moose/usr/ etc and .deb package ---------------------

In ~/moose_src,
dpkg-buildpackage -b
-b is for only binary package.
will create debian/moose and deeper directories and also ../*.deb files.

Can do a 'sudo make install' after this, as the make was done with BUILD=release.
This will help check the gui and squid_demo from the desktop.
Of course for the .deb install testing, you need to go to a fresh install snapshot of the virtual machine.

------------------------------ Important packaging notes and tips ---------------------------------------------

Note that dpkg-buildpackage calls a lot of dh_* scripts. Read their manpages to see what they do.
You can call these individually yourself too for testing.

I've set BUILD=release in debian/rules, and also unexported LD_FLAGS which dpkg-buildpackage sets initially [else these flags cause moose to fail linking during build].

fakeroot debian/rules binary
I've modified rules so that for binary target, it copies (via script copy_moose_install_files) all required/installable moose files into debian/tmp as needed for dh_install below.
UPDATE: I updated Makefile install target to install all files (called by dh_auto_install). There are no extra files to install (thus dh_install presently does nothing). If needed, you could use as indicated here.

dh_install
Refer manpage of dh_install (man dh_install).
To install files that 'make install' does not, first copy them to debian/tmp as above,
then specify the source files/folders and destinations in 'debian/moose.install' as I have done .

[Use `dpkg-buildpackage -s -nc` to not clean before build. But if you change rules, Makefile, etc., dpkg-buildpackage will not realize it. You need to remove the -nc and recompile from beginning :( !]

dh_pysupport will copy moose module over to /usr/share/pyshared/. In postinst, it will also set triggers to byte-compile + register this, and also byte-compile gui, Demos etc. In any case, I've put in my own commands to byte-compile in postinst.

------------------------------ Testing deb packages ---------------------------------------

list contents of the .deb package:
dpkg-deb -c ~/moose_2.0_amd64.deb

Install lintian via synaptic and use it on moose*.dsc and moose*.deb to check for certain errors.

--------------------------- Setting up a Debian system ------------------------

Debian 6.0.6 Squeeze
Open root terminal from mainmenu->accesories in the LXDE desktop.
During install, it did not ask for proxy, so it could not get latest packages.
So, in ~/.bashrc of root and user
export http_proxy=http://proxy.ncbs.res.in:3128
export ftp_proxy=ftp://proxy.ncbs.res.in:3128
In /etc/apt/sources.list, all repositories were commented out by the installer.
The sources.list did not even have the debian main repository.
So as per
http://wiki.debian.org/SourcesList
I added to /etc/apt/sources.list:
deb http://ftp.br.debian.org/debian squeeze main
deb-src http://ftp.br.debian.org/debian squeeze main

deb http://ftp.br.debian.org/debian squeeze-updates main
deb-src http://ftp.br.debian.org/debian squeeze-updates main

deb http://security.debian.org/ squeeze/updates main
deb-src http://security.debian.org/ squeeze/updates main

apt-get update
(update gets package lists, different from upgrade)
apt-get install synaptic
set proxy in synaptic preferences->network.

unable to get guest additions on the virtual machine running as it did not have gcc by default!

install gdebi via synaptic.
run gdebi-gtk from a terminal and then install the .deb file using it.
debian 6.0.6 'squeeze' still uses python2.6, so use the appropriate package.

-----------------------------------------------------------------------------
